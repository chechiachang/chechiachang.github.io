<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Che-Chia Chang</title>
    <link>https://chechiachang.github.io/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Che-Chia Chang</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>chechiachang &amp;copy; 2016</copyright>
    <lastBuildDate>Wed, 15 May 2019 12:00:00 +0800</lastBuildDate>
    
	    <atom:link href="https://chechiachang.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Service Mesh for Microservices on Kubernetes</title>
      <link>https://chechiachang.github.io/talk/service-mesh-for-microservices-on-kubernetes/</link>
      <pubDate>Wed, 15 May 2019 12:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/service-mesh-for-microservices-on-kubernetes/</guid>
      <description>

&lt;hr /&gt;

&lt;h3 id=&#34;outlines&#34;&gt;Outlines&lt;/h3&gt;

&lt;p&gt;傳統的 Monolith被分解為分散的微服務，以取得更高的效能與更彈性的管理。當眾多的為服務同時運作，產生複雜的依賴與交流，網路層不再只是有『有通就好』，而是需要精細且彈性的流量管理與監控，來提供穩定的效能。本次主題將基於 Kubernetes 平台上的 Istio ，探討 Service Mesh 的概念與相關應用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;何為 Service Mesh ？為何需要 Service Mesh ？&lt;/li&gt;
&lt;li&gt;Service Mesh 基本概念&lt;/li&gt;
&lt;li&gt;如何Service-to-Service的網路層管理監控&lt;/li&gt;
&lt;li&gt;導入 Istio 到 Kubernetes&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;目標聽眾&#34;&gt;目標聽眾&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;微運大量微服務，希望導入Service Mesh 的Operator&lt;/li&gt;
&lt;li&gt;想了解微服務生態中竄紅的 Service Mesh&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;收穫&#34;&gt;收穫&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;了解為服務的優勢與Cloud Native應用發展趨勢&lt;/li&gt;
&lt;li&gt;了解 Service Mesh 與 Istio 觀念&lt;/li&gt;
&lt;li&gt;能使用 Istio 於 Kubernetes，進行服務網路的管理。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;你有聽過-microservice-istio有聽過嗎&#34;&gt;你有聽過 Microservice / Istio有聽過嗎？&lt;/h3&gt;

&lt;p&gt;今天來介紹一款好藥：Istio。如果你有以下問題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;維運大量(成千上百)微服務&lt;/li&gt;
&lt;li&gt;需要服務對服務的流量控制，監控，管理&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;談 Service Mesh 之前，不免的要先談一下 Microservice，這個目前好像很夯的一個技術名詞。&lt;/p&gt;

&lt;p&gt;如果手上有一個 App，會希望依照 Monolith 的架構，或是 Microservices？
Microservices 聽起來又新又潮。相對於 Monolith有許多明顯的好處：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decoupling&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也有明顯的壞處：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Development Complexity&lt;/li&gt;
&lt;li&gt;Operation Cost&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;沒事別挖坑跳&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;何為 Service Mesh？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service Mesh: Model / Pattern&lt;/li&gt;
&lt;li&gt;Implementations: linkerd, istio, &amp;hellip;&lt;/li&gt;
&lt;li&gt;基於底層的網路服務，在複雜的 topology 中可靠的傳遞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用Microservie 可能會遇到的問題：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Traffic control&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;A/B Testing&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 三分鐘就入坑 佈署篇</title>
      <link>https://chechiachang.github.io/post/service-mesh-for-microservice-on-kubernetes/</link>
      <pubDate>Mon, 06 May 2019 18:12:15 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/post/service-mesh-for-microservice-on-kubernetes/</guid>
      <description>

&lt;h1 id=&#34;create-gke&#34;&gt;Create GKE&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;gcloud beta container --project &amp;quot;istio-playground-239810&amp;quot; clusters create &amp;quot;istio-playground&amp;quot; \
  --zone &amp;quot;asia-east1-b&amp;quot; \
  --username &amp;quot;admin&amp;quot; \
  --cluster-version &amp;quot;1.11.8-gke.6&amp;quot; \
  --machine-type &amp;quot;n1-standard-2&amp;quot; \
  --image-type &amp;quot;COS&amp;quot; \
  --disk-type &amp;quot;pd-standard&amp;quot; \
  --disk-size &amp;quot;100&amp;quot; \
  --preemptible \
  --num-nodes &amp;quot;1&amp;quot; \
  --enable-cloud-logging \
  --enable-cloud-monitoring \
  --no-enable-ip-alias \
  --addons HorizontalPodAutoscaling,HttpLoadBalancing,KubernetesDashboard,Istio \
  --istio-config auth=MTLS_PERMISSIVE \
  --no-enable-autoupgrade \
  --enable-autorepair
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;take-a-peek&#34;&gt;Take a Peek&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get namespaces

NAME           STATUS    AGE
default        Active    2m
istio-system   Active    1m
kube-public    Active    2m
kube-system    Active    2m

$ kubectl get po -n istio-system
NAME                                      READY     STATUS      RESTARTS   AGE
istio-citadel-7f6f77cd7b-nxfbf            1/1       Running     0          3m
istio-cleanup-secrets-h454m               0/1       Completed   0          3m
istio-egressgateway-7c56db84cc-nlrwq      1/1       Running     0          3m
istio-galley-6c747bdb4f-45jrp             1/1       Running     0          3m
istio-ingressgateway-6ff68cf95d-tlkq4     1/1       Running     0          3m
istio-pilot-8ff66f8c4-q9chz               2/2       Running     0          3m
istio-policy-69b78b7d6-c8pld              2/2       Running     0          3m
istio-sidecar-injector-558996c897-hr6q4   1/1       Running     0          3m
istio-telemetry-f96459fb-5cbpg            2/2       Running     0          3m
promsd-ff878d44b-hv8nh                    2/2       Running     1          3m
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploy-app&#34;&gt;Deploy app&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;kubectl label namespace default istio-injection=enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bookinfo Application&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/platform/kube/bookinfo.yaml

kubectl get pods
kubectl get services
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gateway&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/bookinfo-gateway.yaml

kubectl get gateways

kubectl get svc istio-ingressgateway -n istio-system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to ingress public ip&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.status.loadBalancer.ingress[0].ip}&#39;)
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.spec.ports[?(@.name==&amp;quot;http2&amp;quot;)].port}&#39;)
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.spec.ports[?(@.name==&amp;quot;https&amp;quot;)].port}&#39;)

curl -v ${INGRESS_HOST}:{$INGRESS_PORT}/productpage

404 Not Found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apply destination rules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/destination-rule-all.yaml

curl -v ${INGRESS_HOST}:{$INGRESS_PORT}/productpage
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;brief-review&#34;&gt;Brief review&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;kubectl get virtualservices
kubectl get destinationrules
kubectl get gateways
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;istio-tasks&#34;&gt;Istio Tasks&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/&#34; target=&#34;_blank&#34;&gt;https://istio.io/docs/tasks/traffic-management/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins on Kubernetes</title>
      <link>https://chechiachang.github.io/talk/jenkins-on-kubernetes/</link>
      <pubDate>Sat, 20 Apr 2019 13:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/jenkins-on-kubernetes/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;How to deploy a cloud-native Jenkins with Jenkins X.&lt;/li&gt;
&lt;li&gt;A pipeline with Kubernetes based dynamics worker sclaing (jenkins-kubernetes).&lt;/li&gt;
&lt;li&gt;Give it a try.&lt;/li&gt;
&lt;li&gt;(Defered) Customized test reports for multiple language (ex. go-junit-report)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins X on Kubernetes</title>
      <link>https://chechiachang.github.io/post/jenkins-x-on-kubernetes/</link>
      <pubDate>Fri, 19 Apr 2019 12:15:41 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/post/jenkins-x-on-kubernetes/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://jenkins.io/&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt; is one of the earliest open source antomation server and remains the most common option in use today. Over the years, Jenkins has evolved into a powerful and flexible framework with hundreds of plugins to support automation for any project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/&#34; target=&#34;_blank&#34;&gt;Jenkins X&lt;/a&gt;, on the other hand, is a CI/CD platform (Jenkins Platform) for modern cloud applications on Kubernetes.&lt;/p&gt;

&lt;p&gt;Here we talk about some basic concepts about Jenkins X and provide a hand-to-hand guide to deploy jenkins-x on Kubernetes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#architecture&#34;&gt;Architecture of Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install Jenkins with jx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipeline&#34;&gt;Create a Pipeline with jx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#client&#34;&gt;Develope with jx client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information about jx itself, check &lt;a href=&#34;https://github.com/jenkins-x/jx&#34; target=&#34;_blank&#34;&gt;Jenkins-X Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;architecture&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;architecture&#34;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;Check this beautiful diagram.&lt;/p&gt;




  




&lt;figure&gt;

&lt;img src=&#34;https://chechiachang.github.io/img/jenkins/architecture-serverless.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;&lt;a href=&#34;https://jenkins-x.io/architecture/diagram/&#34; target=&#34;_blank&#34;&gt;https://jenkins-x.io/architecture/diagram/&lt;/a&gt;&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;hr /&gt;

&lt;p&gt;&lt;a name=&#34;install&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;h3 id=&#34;create-gke-cluster-get-credentials&#34;&gt;Create GKE cluster &amp;amp; Get Credentials&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gcloud init
gcloud components update
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;CLUSTER_NAME=jenkins-server
#CLUSTER_NAME=jenkins-serverless

gcloud container clusters create ${CLUSTER_NAME} \
  --num-nodes 1 \
  --machine-type n1-standard-4 \
  --enable-autoscaling \
  --min-nodes 1 \
  --max-nodes 2 \
  --zone asia-east1-b \
  --preemptible

# After cluster initialization, get credentials to access cluster with kubectl
gcloud container clusters get-credentials ${CLUSTER_NAME}

# Check cluster stats.
kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-jx-on-local-machine&#34;&gt;Install jx on Local Machine&lt;/h3&gt;

&lt;p&gt;[Jenkins X Release](&lt;a href=&#34;https://github.com/jenkins-x/jx/releases](https://github.com/jenkins-x/jx/releases&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x/jx/releases](https://github.com/jenkins-x/jx/releases&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JX_VERSION=v2.0.2
OS_ARCH=darwin-amd64
#OS_ARCH=linux-amd64
curl -L https://github.com/jenkins-x/jx/releases/download/&amp;quot;${JX_VERSION}&amp;quot;/jx-&amp;quot;${OS_ARCH}&amp;quot;.tar.gz | tar xzv
sudo mv jx /usr/local/bin
jx version

NAME               VERSION
jx                 2.0.2
Kubernetes cluster v1.11.7-gke.12
kubectl            v1.11.9-dispatcher
helm client        v2.11.0+g2e55dbe
helm server        v2.11.0+g2e55dbe
git                git version 2.20.1
Operating System   Mac OS X 10.14.4 build 18E226
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;option-1-install-serverless-jenkins-pipeline&#34;&gt;(Option 1) Install Serverless Jenkins Pipeline&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;DEFAULT_PASSWORD=mySecretPassWord123
jx install \
  --default-admin-password=${DEFAULT_PASSWORD} \
  --provider=&#39;gke&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;Enter Github user name&lt;/li&gt;
&lt;li&gt;Enter Github personal api token for CI/CD&lt;/li&gt;
&lt;li&gt;Enable Github as Git pipeline server&lt;/li&gt;
&lt;li&gt;Select Jenkins installation type:

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Serverless Jenkins X Pipelines with Tekon&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Static Master Jenkins&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pick default workload build pack

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Kubernetes Workloads: Automated CI+CD with GitOps Promotion&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Library Workloads: CI+Release but no CD&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the organization where you want to create the environment repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;chechiachang&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your Kubernetes context is now set to the namespace: jx
INFO[0231] To switch back to your original namespace use: jx namespace jx
INFO[0231] Or to use this context/namespace in just one terminal use: jx shell
INFO[0231] For help on switching contexts see: https://jenkins-x.io/developing/kube-context/
INFO[0231] To import existing projects into Jenkins:       jx import
INFO[0231] To create a new Spring Boot microservice:       jx create spring -d web -d actuator
INFO[0231] To create a new microservice from a quickstart: jx create quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;option-2-install-static-jenkins-server&#34;&gt;(Option 2) Install Static Jenkins Server&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;DEFAULT_PASSWORD=mySecretPassWord123

jx install \
  --default-admin-password=${DEFAULT_PASSWORD} \
  --provider=&#39;gke&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;Enter Github user name&lt;/li&gt;
&lt;li&gt;Enter Github personal api token for CI/CD&lt;/li&gt;
&lt;li&gt;Enable Github as Git pipeline server&lt;/li&gt;
&lt;li&gt;Select Jenkins installation type:

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Serverless Jenkins X Pipelines with Tekon&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Static Master Jenkins&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pick default workload build pack

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Kubernetes Workloads: Automated CI+CD with GitOps Promotion&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Library Workloads: CI+Release but no CD&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select the organization where you want to create the environment repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;chechiachang&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0465]Your Kubernetes context is now set to the namespace: jx
INFO[0465] To switch back to your original namespace use: jx namespace default
INFO[0465] Or to use this context/namespace in just one terminal use: jx shell
INFO[0465] For help on switching contexts see: https://jenkins-x.io/developing/kube-context/
INFO[0465] To import existing projects into Jenkins:       jx import
INFO[0465] To create a new Spring Boot microservice:       jx create spring -d web -d actuator
INFO[0465] To create a new microservice from a quickstart: jx create quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access Static Jenkins Server through Domain with username and password
Domain &lt;a href=&#34;http://jenkins.jx.11.22.33.44.nip.io/&#34; target=&#34;_blank&#34;&gt;http://jenkins.jx.11.22.33.44.nip.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;uninstall&#34;&gt;Uninstall&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx uninstall
# rm -rf ~/.jx
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&#34;pipeline&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;setup-ci-cd-pipeline&#34;&gt;Setup CI/CD Pipeline&lt;/h1&gt;

&lt;h3 id=&#34;create-quickstart-repository&#34;&gt;Create Quickstart Repository&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;kubectl get pods --namespace jx --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# cd workspace
jx create quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which organisation do you want to use? chechiachang&lt;/li&gt;
&lt;li&gt;Enter the new repository name:  serverless-jenkins-quickstart&lt;/li&gt;

&lt;li&gt;&lt;p&gt;select the quickstart you wish to create  [Use arrows to move, type to filter]
angular-io-quickstart
aspnet-app
dlang-http
&amp;gt; golang-http
jenkins-cwp-quickstart
jenkins-quickstart
node-http&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO[0121] Watch pipeline activity via:    jx get activity -f serverless-jenkins-quickstart -w
INFO[0121] Browse the pipeline log via:    jx get build logs chechiachang/serverless-jenkins-quickstart/master
INFO[0121] Open the Jenkins console via    jx console
INFO[0121] You can list the pipelines via: jx get pipelines
INFO[0121] Open the Jenkins console via    jx console
INFO[0121] You can list the pipelines via: jx get pipelines
INFO[0121] When the pipeline is complete:  jx get applications
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;check-log-of-the-first-run&#34;&gt;Check log of the first run&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx logs pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;add-step-to-pipeline&#34;&gt;Add Step to Pipeline&lt;/h3&gt;

&lt;p&gt;Add a setup step for pullrequest&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd serverless-jenkins-quickstart
jx create step --pipeline pullrequest \
  --lifecycle setup \
  --mode replace \
  --sh &amp;quot;echo hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate pipeline step for each modification&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx step validate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A build-pack pod started after git push. Watch pod status with kubectl.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get pods --namespace jx --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;check-build-status-on-prow-serverless&#34;&gt;Check Build Status on Prow (Serverless)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://deck.jx.130.211.245.13.nip.io/&#34; target=&#34;_blank&#34;&gt;http://deck.jx.130.211.245.13.nip.io/&lt;/a&gt;
Login with username and password&lt;/p&gt;

&lt;h3 id=&#34;import-existing-repository&#34;&gt;Import Existing Repository&lt;/h3&gt;

&lt;p&gt;In source code repository:&lt;/p&gt;

&lt;p&gt;Import jx to remote jenkins-server. This will apply a Jenkinsfile to repository by default&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx import --url git@github.com:chechiachang/serverless-jenkins-quickstart.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update jenkins-x.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx create step
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git commit &amp;amp; push&lt;/p&gt;

&lt;h3 id=&#34;trouble-shooting&#34;&gt;Trouble Shooting&lt;/h3&gt;

&lt;p&gt;Failed to get jx resources&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jx get pipelines
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure your jx (or kubectl) context is with the correct GKE and namespace&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kc config set-context gke_my-project_asia-east1-b_jenkins \
  --namespace=jx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;why-not-use-helm-chart&#34;&gt;Why not use helm chart?&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s readlly depend on what we need in CI/CD automation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/jenkins&#34; target=&#34;_blank&#34;&gt;Jenkins Helm Chart&lt;/a&gt; create Jenkins master and slave cluster on Kubernetes utilizing the Jenkins Kubernetes plugin.
Jenkin Platform with jx is Jenkins Platform native to Kubernetes. It comes with powerful cloud native components like Prow automation, Nexus, Docker Registry, Tekton Pipeline, &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;check-jenkins-x-examples&#34;&gt;Check jenkins-x examples&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34; target=&#34;_blank&#34;&gt;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&#34;client&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;jx get urls
Name                      URL
jenkins                   http://jenkins.jx.11.22.33.44.nip.io
jenkins-x-chartmuseum     http://chartmuseum.jx.11.22.33.44.nip.io
jenkins-x-docker-registry http://docker-registry.jx.11.22.33.44.nip.io
jenkins-x-monocular-api   http://monocular.jx.11.22.33.44.nip.io
jenkins-x-monocular-ui    http://monocular.jx.11.22.33.44.nip.io
nexus                     http://nexus.jx.11.22.33.44.nip.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-cluster-status&#34;&gt;Get Cluster Status&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx diagnose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-applications-pipelines&#34;&gt;Get Applications &amp;amp; Pipelines&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx get applications
jx get pipelines
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;get-ci-activities-build-log&#34;&gt;Get CI Activities &amp;amp; build log&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx get activities
jx get activities --filter=&#39;jenkins-x-on-kubernetes&#39;

jx get build log

INFO[0003] view the log at: http://jenkins.jx.11.22.33.44.nip.io/job/chechiachang/job/jenkins-x-on-kubernetes/job/feature-add-test/3/console
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;trigger-build-check-activity&#34;&gt;Trigger Build &amp;amp; Check Activity&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx start pipeline
jx start pipeline --filter=&#39;jenkins-x-on-kubernetes/feature-add-test&#39;

jx get activities --filter=&#39;jenkins-x-on-kubernetes&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-pull-request&#34;&gt;Create Pull Request&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;jx create pullrequest
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins X on Kubernetes</title>
      <link>https://chechiachang.github.io/project/jenkins-x-on-kubernetes/</link>
      <pubDate>Fri, 19 Apr 2019 11:11:59 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/project/jenkins-x-on-kubernetes/</guid>
      <description>&lt;p&gt;An example project to demonstrate a working pipeline with jenkins-x on Kubernetes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELK for Applications on Kubernetes</title>
      <link>https://chechiachang.github.io/talk/elk-on-kubernetes/</link>
      <pubDate>Tue, 22 Jan 2019 19:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/elk-on-kubernetes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Kubernetes Container Runtime Interface</title>
      <link>https://chechiachang.github.io/post/kubernetes-container-runtime-interface/</link>
      <pubDate>Sat, 06 Oct 2018 12:07:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/post/kubernetes-container-runtime-interface/</guid>
      <description>&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://chechiachang.github.io/slides/container-runtime-interface/&#34; target=&#34;_blank&#34;&gt;Slides here&lt;/a&gt; &amp;lt;-&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Networking</title>
      <link>https://chechiachang.github.io/talk/kubernetes-networking/</link>
      <pubDate>Thu, 14 Jun 2018 09:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/kubernetes-networking/</guid>
      <description>&lt;p&gt;從系統管理層面看Kubernetes的網路架構&lt;/p&gt;

&lt;p&gt;網路實作為Kubernetes架構，也是開發過程中容易出錯的部分。本次演講將從群集管理員的角度，說明Kubernetes 中網路的實作。&lt;/p&gt;

&lt;p&gt;大綱:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker 與 Kubernetes 的網路架構&lt;/li&gt;
&lt;li&gt;不同層級的網路溝通實作

&lt;ul&gt;
&lt;li&gt;容器對容器&lt;/li&gt;
&lt;li&gt;Pod對Pod&lt;/li&gt;
&lt;li&gt;集群內部與Service&lt;/li&gt;
&lt;li&gt;集群外部對Service&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;以flannel為例講解網路實作&lt;/li&gt;
&lt;li&gt;開發過程中常遇到的網路問題&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;希望聽眾對Kubernetes的網路架構能有基礎的概念，並在開發過程中遇到問題時，有明確的除錯步驟來判定網路是否有問題。遇到網路的問題，也能明確的知道問題的核心，並找到解法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manage and Schedule GPU Computing Tasks on Kubernetes</title>
      <link>https://chechiachang.github.io/talk/gpu-computing-on-kubernetes/</link>
      <pubDate>Wed, 16 May 2018 11:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/gpu-computing-on-kubernetes/</guid>
      <description>&lt;p&gt;Manage and Schedule GPU Computing Tasks on Kubernetes&lt;/p&gt;

&lt;p&gt;使用Kubernets管理集群GPU機器，靈活的分配調度GPU資源，並自動排程GPU運算工作。
使用者如資料科學家，只需將運算工作實施到Kubernetes上，Kubernetes便會檢視機器上可用的GPU資源，將運算工作分配到合適的機器
上，並監控工作的狀況。如資源不足Kubernetes會自動將工作加入排程，當前面的工作完成，GPU資源釋放後，Kubernetes會自動將運算
工作，配置到合適的機器上。管理者如系統工程師，只需透過Kubernetes，將機器上的GPU資源加入到Kubernetes。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why we need Kubernetes for GPUs computing? Pros &amp;amp; Cons&lt;/li&gt;
&lt;li&gt;How to deploy a GPU-enabled Kubernetes cluster&lt;/li&gt;
&lt;li&gt;Run GPU computing on Kubernetes cluster&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Deploy Kubernetes With Kubespray</title>
      <link>https://chechiachang.github.io/talk/deploy-kubernetes-with-kubespray/</link>
      <pubDate>Wed, 28 Mar 2018 19:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/deploy-kubernetes-with-kubespray/</guid>
      <description>

&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;re interested in building your own Kubernetes. Install the following tools we use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34;&gt;virtualbox 5.1+&lt;/a&gt; to create VMs, on which we deploy our Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34; target=&#34;_blank&#34;&gt;vagrant 2.0.x+&lt;/a&gt; to control virtualbox to build and manage vms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.ansible.com/ansible/latest/intro_installation.html&#34; target=&#34;_blank&#34;&gt;ansible-playbook&lt;/a&gt; to run Kubespray playbook to deploy Kuberentes&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34; target=&#34;_blank&#34;&gt;kubectl&lt;/a&gt; to control Kubernetes cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Ubuntu
apt-add-repository ppa:ansible/ansible \
  &amp;amp;&amp;amp; apt-get update \
  &amp;amp;&amp;amp; apt-get install -y python3 ansible
  &amp;amp;&amp;amp; pip install netaddr

# Mac
pip install ansible

port install py27-netaddr

# netaddr is required by Kubespray
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;clone https://github.com/kubernetes-incubator/kubespray.git

cd kubespray
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;This gonna take a while. Let&amp;rsquo;s get to some details.&lt;/p&gt;

&lt;h3 id=&#34;virtualbox&#34;&gt;Virtualbox&lt;/h3&gt;

&lt;p&gt;Install &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34;&gt;virtualbox 5.1+&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Disadvantage about vbox GUI:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clicking is time-consuming and engineers are lazy.&lt;/li&gt;
&lt;li&gt;Bad for automation.&lt;/li&gt;
&lt;li&gt;Lack of Scalibility&lt;/li&gt;
&lt;li&gt;Manual operation could cause mistakes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A good practice is to Write shell script with VBoxManage, the client of virtualbox&lt;/p&gt;

&lt;p&gt;Or even better, use Vagrant&lt;/p&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34; target=&#34;_blank&#34;&gt;vagrant 2.0.x+&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create you VMs with (ruby based) script.&lt;/p&gt;

&lt;p&gt;Bring VMs up &amp;amp; down within only one command&lt;/p&gt;

&lt;p&gt;Check the Vagrantfile&lt;/p&gt;

&lt;h3 id=&#34;ansible-playbook&#34;&gt;Ansible playbook&lt;/h3&gt;

&lt;p&gt;Ansible is a IT automation tools&lt;/p&gt;

&lt;p&gt;Basically, ansible playbook ssh and execute bash command on servers.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce manual efforts. Deliver and deploy faster&lt;/li&gt;
&lt;li&gt;Install K8s components to each servers and check components status on each step&lt;/li&gt;
&lt;li&gt;Come with lots of handy tools (like native array supports)&lt;/li&gt;
&lt;li&gt;Automation is everything&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;kubespay&#34;&gt;Kubespay&lt;/h3&gt;

&lt;p&gt;Deploy k8s with ansible-playbook&lt;/p&gt;

&lt;p&gt;Available on AWS, GCE, or baremetal&lt;/p&gt;

&lt;p&gt;High Available cluster&lt;/p&gt;

&lt;p&gt;Generate inventory file with inventory.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -rfp inventory/sample inventory/mycluster

declare -a IPS=(10.10.1.3 10.10.1.4 10.10.1.5)
CONFIG_FILE=inventory/mycluster/hosts.ini python3 contrib/inventory_builder/inventory.py ${IPS[@]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Optional) Change parameters&lt;/p&gt;

&lt;p&gt;deploy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook -i inventory/myCluster/hosts.ini cluster.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kubectl&#34;&gt;Kubectl&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;kubectl config use-context

kubectl get po
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;destroy&#34;&gt;Destroy&lt;/h3&gt;

&lt;p&gt;Remember to suspend / destroy VMs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant suspend
vagrant destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;more-about-kubernetes&#34;&gt;More about Kubernetes&lt;/h1&gt;

&lt;p&gt;Why k8s&lt;/p&gt;

&lt;h3 id=&#34;use-case-1-when-data-scientist-wants-gpu&#34;&gt;Use case 1: when data scientist wants GPU&lt;/h3&gt;

&lt;p&gt;Workflow dispatching and resouce management&lt;/p&gt;

&lt;h3 id=&#34;use-case-2-when-your-site-grows-bigger&#34;&gt;Use case 2: when your site grows bigger&lt;/h3&gt;

&lt;p&gt;Scalibility&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/&#34; target=&#34;_blank&#34;&gt;FYI&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Storage and Glusterfs</title>
      <link>https://chechiachang.github.io/talk/kubernetes-storage-and-glusterfs/</link>
      <pubDate>Sat, 10 Feb 2018 10:00:00 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/talk/kubernetes-storage-and-glusterfs/</guid>
      <description>

&lt;h3 id=&#34;outlines&#34;&gt;Outlines&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Docker Storage&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kubernetes Storage&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GlusterFS for K8s&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;docker-storage&#34;&gt;Docker Storage&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/storage/&#34; target=&#34;_blank&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;within container: inside writable layer of a container&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deleted with container&lt;/li&gt;
&lt;li&gt;couple with host machine&lt;/li&gt;

&lt;li&gt;&lt;p&gt;require storage driver&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps -s
docker inspect ubuntu
dd if=/dev/zero of=1Mfile bs=1k count=1000
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker volume&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a directory on host&lt;/li&gt;
&lt;li&gt;prepare: provision on host&lt;/li&gt;
&lt;li&gt;usage: set volume on docker run&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;kubernetes-storage&#34;&gt;Kubernetes Storage&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volumes/&#34; target=&#34;_blank&#34;&gt;https://kubernetes.io/docs/concepts/storage/volumes/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;On-disk files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deleted on container restart&lt;/li&gt;
&lt;li&gt;File sharing in Pod&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kubernetes Volume:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a directory&lt;/li&gt;
&lt;li&gt;Coexist with Pod&lt;/li&gt;
&lt;li&gt;Data preserved across container restarts&lt;/li&gt;
&lt;li&gt;Pod can use many volumes of different types&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Some of) Types of volumes :
  * emptyDir
    - first created volume
    - prepare: none
    - usage: always&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gcePersistentDisk&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;independent to pod&lt;/li&gt;
&lt;li&gt;prepare: gcp&lt;/li&gt;

&lt;li&gt;&lt;p&gt;usage: claim by name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud compute disks create --size=500GB --zone=us-central1-a my-data-disk
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PersistentVolumeClaim&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prepare: provision by admin&lt;/li&gt;
&lt;li&gt;usage: add PVC request&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/&#34; target=&#34;_blank&#34;&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;persistentvolume&#34;&gt;PersistentVolume&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34; target=&#34;_blank&#34;&gt;Doc&lt;/a&gt;
  * Persistent Volume
    - a piece of provisioned storage
    - Independent lifecycle
    - abstract with k8s object API
    - many implementations: ex. GCEPersistentDisk, NFS, GlusterFS&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why PersistentVolume&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one APIs, many PV implementations&lt;/li&gt;
&lt;li&gt;Separates providers (admin) and consumers (users)&lt;/li&gt;
&lt;li&gt;PV subsystem API handles details of implementation&lt;/li&gt;
&lt;li&gt;Handle different need like size, access mode, performance&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PersistentVolumeClaim&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PV: a resource&lt;/li&gt;
&lt;li&gt;PVC: a request for storage&lt;/li&gt;
&lt;li&gt;Pods consume Node resources and PVCs consume PV resources&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PVC lifecycle&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Povisioning&lt;/li&gt;
&lt;li&gt;Binding&lt;/li&gt;
&lt;li&gt;Using&lt;/li&gt;
&lt;li&gt;Reclaiming&lt;/li&gt;
&lt;li&gt;Deleting&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PV Access Modes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ReadWriteOnce: 1 node R/W&lt;/li&gt;
&lt;li&gt;ReadOnlyMany: n node R, 1 node W&lt;/li&gt;
&lt;li&gt;ReadWriteMany: n node R/W&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;StorageClass&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;usage:PV.storageClassName&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34; target=&#34;_blank&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;glusterfs&#34;&gt;GlusterFS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.gluster.org/en/latest/Administrator%20Guide/GlusterFS%20Introduction/&#34; target=&#34;_blank&#34;&gt;Doc&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why glusterFS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network FS&lt;/li&gt;
&lt;li&gt;Distributed FS

&lt;ul&gt;
&lt;li&gt;High Availability&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;High performance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Architecture: Types of Volumes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed&lt;/li&gt;
&lt;li&gt;Replicated&lt;/li&gt;
&lt;li&gt;Distributed Replicated&lt;/li&gt;
&lt;li&gt;Striped: file&lt;/li&gt;
&lt;li&gt;Distributed Striped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;note: glusterFS Volume vs Kubernetes PV&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;glusterfs-for-k8s&#34;&gt;GlusterFS for k8s&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Heketi&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST storage management API&lt;/li&gt;
&lt;li&gt;Receive requests from k8s storage driver&lt;/li&gt;
&lt;li&gt;use secret to control glusterFS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Usage&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;has a glusterFS&lt;/li&gt;
&lt;li&gt;apply storage class and secret to k8s&lt;/li&gt;
&lt;li&gt;Create PV&lt;/li&gt;
&lt;li&gt;Request PVC with Pods&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;demo&#34;&gt;Demo&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Env

&lt;ul&gt;
&lt;li&gt;Kubernetes 1.9.2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
