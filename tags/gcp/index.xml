<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcp on Che-Chia Chang</title>
    <link>https://chechiachang.github.io/tags/gcp/</link>
    <description>Recent content in gcp on Che-Chia Chang</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>chechiachang &amp;copy; 2016</copyright>
    <lastBuildDate>Sun, 15 Sep 2019 11:43:03 +0800</lastBuildDate>
    
	    <atom:link href="https://chechiachang.github.io/tags/gcp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Self-host ELK stack - Installation</title>
      <link>https://chechiachang.github.io/post/self-host-elk-stack-on-gcp/</link>
      <pubDate>Sun, 15 Sep 2019 11:43:03 +0800</pubDate>
      
      <guid>https://chechiachang.github.io/post/self-host-elk-stack-on-gcp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechiachang.github.io/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechiachang.github.io/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechiachang.github.io/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechiachang.github.io/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 logstash pipeline 做數據前處理&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作為範例的 ELK 的版本是當前的 stable release 7.3.1。&lt;/p&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechiachang.github.io&#34;&gt;https://chechiachang.github.io&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;h1 id=&#34;簡介-elk-stack&#34;&gt;簡介 ELK stack&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/index.html&#34;&gt;官方說明文件&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;elk-的元件&#34;&gt;ELK 的元件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch: 基於 Lucene 的分散式全文搜索引擎&lt;/li&gt;
&lt;li&gt;Logstash: 數據處理 pipeline&lt;/li&gt;
&lt;li&gt;Kibana: ELK stack 的管理後台與數據視覺化工具&lt;/li&gt;
&lt;li&gt;Beats: 輕量級的應用端數據收集器，會從被監控端收集 log 與監控數據(metrics)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elk-的工作流程&#34;&gt;ELK 的工作流程&lt;/h3&gt;
&lt;p&gt;beats -&amp;gt; (logstash) -&amp;gt; elasticsearch -&amp;gt; kibana&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將 beats 放在應用端的主機上，或是在容器化環境種作為 sidecar，跟應用放在一起&lt;/li&gt;
&lt;li&gt;設定 beats 從指定的路徑收集 log 與 metrics&lt;/li&gt;
&lt;li&gt;設定 beats 向後輸出的遠端目標&lt;/li&gt;
&lt;li&gt;(Optional) beats 輸出到 logstash ，先進行數據的變更、格式整理，在後送到 elasticsearch&lt;/li&gt;
&lt;li&gt;beats 向後輸出到 elasticsearch，儲存數據文件(document)，並依照樣式(template)與索引(index)儲存，便可在 elasticsearch 上全文搜索數據&lt;/li&gt;
&lt;li&gt;透過 Kibana，將 elasticsearch 上的 log 顯示&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;官方不是有出文件嗎&#34;&gt;官方不是有出文件嗎&lt;/h1&gt;
&lt;p&gt;Elastic 官方準備了大量的文件，理論上要跟著文件一步一步架設這整套工具應該是十分容易。然而實際照著做卻遇上很多困難。由於缺乏 get-started 的範例文件，不熟悉 ELK 設定的使用者，常常需要停下來除錯，甚至因為漏掉某個步驟，而需要回頭重做一遍。&lt;/p&gt;
&lt;p&gt;說穿了本篇的技術含量不高，就只是一個踩雷過程。&lt;/p&gt;
&lt;p&gt;Lets get our hands dirty.&lt;/p&gt;
&lt;h1 id=&#34;warning&#34;&gt;WARNING&lt;/h1&gt;
&lt;p&gt;這篇安裝過程沒有做安全性設定，由於 ELK stack 的安全性功能模組，在&lt;a href=&#34;https://www.elastic.co/what-is/open-x-pack&#34;&gt;v6.3.0 以前的版本是不包含安全性模組的&lt;/a&gt;，官方的安裝說明文件將安全性設定另成一篇。我第一次安裝，全部安裝完後，才發現裏頭沒有任何安全性設定，包含帳號密碼登入、api secret token、https/tls 通通沒有，整組 elk 裸奔。&lt;/p&gt;
&lt;p&gt;我這邊分開的目的，不是讓大家都跟我一樣被雷(XD)，而是因為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;另起一篇對安全性設定多加說明&lt;/li&gt;
&lt;li&gt;在安全的內網中，沒有安全性設定，可以大幅加速開發與除錯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然沒有安全性設定，但仍然有完整的功能，如果只是在測試環境，或是想要評估試用 self-hosted ELK，這篇的說明已足夠。但千萬不要用這篇上 public network 或是用在 production 環境喔。&lt;/p&gt;
&lt;p&gt;如果希望第一次安裝就有完整的 security 設定，請等待下篇 &lt;a href=&#34;#secure-elk-stack&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;討論需求與規格&#34;&gt;討論需求與規格&lt;/h1&gt;
&lt;p&gt;這邊只是帶大家過一下基礎安裝流程，我們在私有網路中搭建一台 standalone 的 ELK stack，通通放在一台節點(node)上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elk-node-standalone 10.140.0.10
app-node-1          10.140.0.11
...                 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本機的 ELK stack 元件，彼此透過 localhost 連線&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch:  localhost:9200&lt;/li&gt;
&lt;li&gt;Kibana:         localhost:5601&lt;/li&gt;
&lt;li&gt;Apm-server:     localhost:8200&lt;/li&gt;
&lt;li&gt;Self Monitoring Services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私有網路中的外部服務透過 10.140.0.10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beats 從其他 node 輸出到 Elasticsearch: 10.140.0.10:9200&lt;/li&gt;
&lt;li&gt;beats 從其他 node 輸出到 Apm-server:    10.140.0.10:8200&lt;/li&gt;
&lt;li&gt;在內部網路中 透過 browser 存取 Kibana:  10.140.0.10:5601&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;standalone 的好處:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便 (再次強調這篇只是示範，實務上不要貪一時方便，維運崩潰)&lt;/li&gt;
&lt;li&gt;最簡化設定，ELK 有非常大量的設定可以調整，這篇簡化了大部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Standalone可能造成的問題:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No High Availablity: 沒有任何容錯備援可以 failover，這台掛就全掛&lt;/li&gt;
&lt;li&gt;外部服務多的話，很容易就超過 node 上對於網路存取的限制，造成 tcp drop 或 delay。需要調整 ulimit 來增加網路，當然這在雲端上會給維運帶來更多麻煩，不是一個好解法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要有 production ready 的 ELK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HA 開起來&lt;/li&gt;
&lt;li&gt;把服務分散到不同 node 上, 方便之後 scale out 多開幾台
&lt;ul&gt;
&lt;li&gt;elasticsearch-1, elasticsearch-2, elasticsearch-3&amp;hellip;&lt;/li&gt;
&lt;li&gt;kibana-1&lt;/li&gt;
&lt;li&gt;apm-server-1, apm-server-2, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果應用在已經容器化, 這些服務元件也可以上 Kubernetes 做容器自動化，這個部份蠻好玩，如果有時間我們來聊這篇&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;主機設定&#34;&gt;主機設定&lt;/h1&gt;
&lt;p&gt;Elasticsearch 儲存數據會佔用不少硬碟空間，我個人的習慣是只要有額外占用儲存空間，都要另外掛載硬碟，不要占用 root，所以這邊會需要另外掛載硬碟。&lt;/p&gt;
&lt;p&gt;GCP 上使用 Google Compote Engine 的朋友，可以照 &lt;a href=&#34;https://cloud.google.com/compute/docs/disks/add-persistent-disk?hl=zh-tw&#34;&gt;Google 官方操作步驟操作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成後接近這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ df -h
$ df --human-readable

Filesystem      Size  Used Avail Use% Mounted on
/dev/sda1       9.6G  8.9G  682M  93% /
/dev/sdb        492G   63G  429G  13% /mnt/disks/elk

$ ls /mnt/disks/elk

/mnt/disks/elk/elasticsearch
/mnt/disks/elk/apm-server
/mnt/disks/elk/kibana
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至於需要多少容量，取決收集數據的數量，落差非常大，可以先上個 100Gb ，試跑一段時間，再視情況 scale storage disk。&lt;/p&gt;
&lt;h1 id=&#34;開防火牆&#34;&gt;開防火牆&lt;/h1&gt;
&lt;p&gt;需要開放 10.140.0.10 這台機器的幾個 port&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch           :9200   來源只開放私有網路其他 ip 10.140.0.0/9&lt;/li&gt;
&lt;li&gt;apm-server              :8200   (同上)&lt;/li&gt;
&lt;li&gt;kibana                  :5601   (同上)，如果想從外部透過 browser開，需要 whitelist ip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCP 上有 default 的防火牆允許規則，私有網路可以彼此連線&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default-allow-internal: :all    :10.140.0.0/9   tcp:0-65535&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;install-elasticsearch&#34;&gt;Install Elasticsearch&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.3/install-elasticsearch.html&#34;&gt;Install Elasticsearch 官方文件 7.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們這邊直接在 ubuntu 18.04 上使用 apt 作為安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install apt-transport-https
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
add-apt-repository &amp;quot;deb https://artifacts.elastic.co/packages/7.x/apt stable main&amp;quot;
sudo apt-get update
sudo apt-get install elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝完後路徑長這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/elasticsearch
/etc/elasticsearch/elasticsearch.yml
/etc/elasticsearch/jvm.options

# Utility
/usr/share/elasticsearch/bin/

# Log
/var/log/elasticsearch/elasticsearch.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有需要也可以複寫設定檔，把 log 也移到 /mnt/disks/elk/elasticsearch/logs&lt;/p&gt;
&lt;h3 id=&#34;服務控制&#34;&gt;服務控制&lt;/h3&gt;
&lt;p&gt;透過 systemd 管理，我們可以用 systemctl 控制，
用戶 elasticsearch:elasticsearch，操作時會需要 sudo 權限。&lt;/p&gt;
&lt;p&gt;但在啟動前要先調整數據儲存路徑，並把權限移轉給使用者。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /mnt/disks/elk/elasticsearch
chown elasticsearch:elasticsearch /mnt/disks/elk/elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;設定檔案&#34;&gt;設定檔案&lt;/h3&gt;
&lt;p&gt;ELK 提供了許多可設定調整的設定,但龐大的設定檔案也十分難上手。我們這邊先簡單更改以下設定檔案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/elasticsearch/elasticsearch.yml

# Change Network
network.host: 0.0.0.0
# Change data path
path.data: /mnt/disks/elk/elasticsearch

vim /etc/elasticsearch/jvm-options
# Adjust heap to 4G
-Xms4g
-Xmx4g

# Enable xpack.security
discovery.seed_hosts: [&amp;quot;10.140.0.10&amp;quot;]
discovery.type: &amp;quot;single-node&amp;quot;
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.license.self_generated.type: basic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.3.0 後的版本已經附上安全性模組 xpack，這邊順便開起來。關於 xpack 的安全性設定，這邊先略過不提。&lt;/p&gt;
&lt;p&gt;有啟用 xpack ，可以讓我們透過 elasticsearch 附帶的工具，產生使用者與帳號密碼。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto

# Keep your passwords safe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後把啟動 Elasticsearch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl enable elasticsearch.service
sudo systemctl start elasticsearch.service
sudo systemctl status elasticsearch.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看一下 log，確定服務有在正常工作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tail -f /var/log/elasticsearch/elasticsearch.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 node 上試打 Elasticsearch API&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9200

{
  &amp;quot;name&amp;quot; : &amp;quot;elk&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;cluster_uuid&amp;quot; : &amp;quot;uiMZe7VETo-H6JLFLF4SZg&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;7.3.1&amp;quot;,
    &amp;quot;build_flavor&amp;quot; : &amp;quot;default&amp;quot;,
    &amp;quot;build_type&amp;quot; : &amp;quot;deb&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;4749ba6&amp;quot;,
    &amp;quot;build_date&amp;quot; : &amp;quot;2019-08-19T20:19:25.651794Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;8.1.0&amp;quot;,
    &amp;quot;minimum_wire_compatibility_version&amp;quot; : &amp;quot;6.8.0&amp;quot;,
    &amp;quot;minimum_index_compatibility_version&amp;quot; : &amp;quot;6.0.0-beta1&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;kibana&#34;&gt;Kibana&lt;/h1&gt;
&lt;p&gt;有了正常工作的 Elasticsearch，接下來要安裝 kibana，由於 apt repository 已經匯入，這邊直接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install kibana
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一樣快速設定一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/kibana/kinana.yml

# change server.host from localhost to 0.0.0.0 to allow outside requests
server.host: &amp;quot;0.0.0.0&amp;quot;

# Add elasticsearch password
elasticsearch.username: &amp;quot;kibana&amp;quot;
elasticsearch.password:

sudo systemctl enable kibana.service
sudo systemctl start kibana.service
sudo systemctl status kibana.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;檢查 log 並試打一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl status kibana

$ curl localhost:5601
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;透過內網 ip 也可以用 browser 存取
使用 elastic 這組帳號密碼登入，可以有管理員權限
可以檢視一下 kibana 的頁面，看一下是否系統功能都上常上線
http://10.140.0.10/app/monitoring#&lt;/p&gt;
&lt;h1 id=&#34;filebeat&#34;&gt;Filebeat&lt;/h1&gt;
&lt;p&gt;以上是 ELK 最基本架構: elasticsearch 引擎與前端視覺化管理工具 Kibana。當然現在進去 kibana 是沒有數據的，所以我們現在來安裝第一個 beat，收集第一筆數據。&lt;/p&gt;
&lt;p&gt;你可能會覺得奇怪: 我現在沒有任何需要監控的應用，去哪收集數據?&lt;/p&gt;
&lt;p&gt;ELK 提供的自我監測 (self-monitoring) 的功能，也就是在 node 上部屬 filebeat 並啟用 modules，便可以把這台 node 上的 elasticsearch 運行的狀況，包含cpu 狀況、記憶體用量、儲存空間用量、安全性告警、&amp;hellip;都做為數據，傳到 elasticsearch 中，並在 Kibana monitoring 頁面製圖顯示。&lt;/p&gt;
&lt;p&gt;這邊也剛好做為我們 ELK stack 的第一筆數據收集。&lt;/p&gt;
&lt;p&gt;WARNING: 這邊一樣要提醒， production 環境多半會使用另外一組的 elasticsearch 來監控主要的這組 elastic stack，以維持 elk stack 的穩定性，才不會自己 monitoring 自己，結果 elastic 掛了，metrics 跟錯誤訊息都看不到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-installation.html&#34;&gt;官方安裝文件&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;預設的 filebeat.yml 設定檔案不是完整的，請到官網下載完整版，但官網沒給檔案連結(慘)，只有網頁版 &lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html&#34;&gt;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們上 github 把她載下來&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/elastic/beats/v7.3.1/filebeat/filebeat.reference.yml
$ sudo mv filebeat-reference-y
$ sudo vim /etc/filebeat/filebeat.yml

# Enable elasticsearch module and kibana module to process metrics of localhost elasticsearch &amp;amp; kibana
filebeat.modules:
- module: elasticsearch
  # Server log
  server:
    enabled: true

- module: kibana
  # All logs
  log:
    enabled: true

# The name will be added to metadata
name: filebeat-elk
fields:
  env: elk

# Add additional cloud_metadata since we&#39;re on GCP
processors:
- add_cloud_metadata: ~

# Output to elasticsearch
output.elasticsearch:
  enabled: true
  hosts: [&amp;quot;localhost:9200&amp;quot;]
  protocol: &amp;quot;http&amp;quot;
  username: &amp;quot;elastic&amp;quot;
  password: 

# Configure kibana with filebeat: add template, dashboards, etc...
setup.kibana:
  host: &amp;quot;localhost:5601&amp;quot;
  protocol: &amp;quot;http&amp;quot;
  username: &amp;quot;elastic&amp;quot;
  password: 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;啟動 filebeat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl start filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看一下 log，filebeat 會開始收集 elasticsearch 的 log 與 metrics，可以在 log 上看到收集的狀況。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo journalctl -fu filebeat

Sep 15 06:28:50 elk filebeat[9143]: 2019-09-15T06:28:50.176Z        INFO        [monitoring]        log/log.go:145        Non-zero metrics in the last 30s        {&amp;quot;monitoring&amp;quot;: {&amp;quot;metrics&amp;quot;: {&amp;quot;beat&amp;quot;:{&amp;quot;cpu&amp;quot;:{&amp;quot;system&amp;quot;:{&amp;quot;ticks&amp;quot;:1670860,&amp;quot;time&amp;quot;:{&amp;quot;ms&amp;quot;:66}},&amp;quot;total&amp;quot;:{&amp;quot;ticks&amp;quot;:6964660,&amp;quot;time&amp;quot;:{&amp;quot;ms&amp;quot;:336},&amp;quot;value&amp;quot;:6964660},&amp;quot;user&amp;quot;:{&amp;quot;ticks&amp;quot;:5293800,&amp;quot;time&amp;quot;:{&amp;quot;ms&amp;quot;:270}}},&amp;quot;handles&amp;quot;:{&amp;quot;limit&amp;quot;:{&amp;quot;hard&amp;quot;:4096,&amp;quot;soft&amp;quot;:1024},&amp;quot;open&amp;quot;:11},&amp;quot;info&amp;quot;:{&amp;quot;ephemeral_id&amp;quot;:&amp;quot;62fd4bfa-1949-4356-9615-338ca6a95075&amp;quot;,&amp;quot;uptime&amp;quot;:{&amp;quot;ms&amp;quot;:786150373}},&amp;quot;memstats&amp;quot;:{&amp;quot;gc_next&amp;quot;:7681520,&amp;quot;memory_alloc&amp;quot;:4672576,&amp;quot;memory_total&amp;quot;:457564560376,&amp;quot;rss&amp;quot;:-32768},&amp;quot;runtime&amp;quot;:{&amp;quot;goroutines&amp;quot;:98}},&amp;quot;filebeat&amp;quot;:{&amp;quot;events&amp;quot;:{&amp;quot;active&amp;quot;:-29,&amp;quot;added&amp;quot;:1026,&amp;quot;done&amp;quot;:1055},&amp;quot;harvester&amp;quot;:{&amp;quot;open_files&amp;quot;:4,&amp;quot;running&amp;quot;:4}},&amp;quot;libbeat&amp;quot;:{&amp;quot;config&amp;quot;:{&amp;quot;module&amp;quot;:{&amp;quot;running&amp;quot;:0}},&amp;quot;output&amp;quot;:{&amp;quot;events&amp;quot;:{&amp;quot;acked&amp;quot;:1055,&amp;quot;active&amp;quot;:-50,&amp;quot;batches&amp;quot;:34,&amp;quot;total&amp;quot;:1005},&amp;quot;read&amp;quot;:{&amp;quot;bytes&amp;quot;:248606},&amp;quot;write&amp;quot;:{&amp;quot;bytes&amp;quot;:945393}},&amp;quot;pipeline&amp;quot;:{&amp;quot;clients&amp;quot;:9,&amp;quot;events&amp;quot;:{&amp;quot;active&amp;quot;:32,&amp;quot;published&amp;quot;:1026,&amp;quot;total&amp;quot;:1026},&amp;quot;queue&amp;quot;:{&amp;quot;acked&amp;quot;:1055}}},&amp;quot;registrar&amp;quot;:{&amp;quot;states&amp;quot;:{&amp;quot;current&amp;quot;:34,&amp;quot;update&amp;quot;:1055},&amp;quot;writes&amp;quot;:{&amp;quot;success&amp;quot;:35,&amp;quot;total&amp;quot;:35}},&amp;quot;system&amp;quot;:{&amp;quot;load&amp;quot;:{&amp;quot;1&amp;quot;:1.49,&amp;quot;15&amp;quot;:0.94,&amp;quot;5&amp;quot;:1.15,&amp;quot;norm&amp;quot;:{&amp;quot;1&amp;quot;:0.745,&amp;quot;15&amp;quot;:0.47,&amp;quot;5&amp;quot;:0.575}}}}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果數據都有送出，就可以回到 kibana 的頁面，看一下目前這個 elasticsearch 集群，有開啟 monitoring 功能的元件們，是否都有正常工作。&lt;/p&gt;
&lt;p&gt;http://10.140.0.10/app/monitoring#&lt;/p&gt;
&lt;p&gt;頁面長得像這樣&lt;/p&gt;



  




&lt;figure&gt;

&lt;img src=&#34;https://chechiachang.github.io/img/elk/kibana-monitoring.png&#34; width=&#34;100%&#34; height=&#34;100%&#34; &gt;


&lt;/figure&gt;

&lt;p&gt;Standalone cluster 中的 filebeat，是還未跟 elasticsearch 配對完成的數據，會顯示在另外一個集群中，配對完後會歸到 elk cluster 中，就是我們的主要 cluster。&lt;/p&gt;
&lt;p&gt;點進去可以看各個元件的服務情形。&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡單思考 self-host ELK stack 搭建的架構&lt;/li&gt;
&lt;li&gt;在單一 node 上安裝最簡易的 elastic stack&lt;/li&gt;
&lt;li&gt;設定元件的 output 位置&lt;/li&gt;
&lt;li&gt;設定 self-monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恭喜各位獲得一個裸奔但是功能完整的 ELK, 我們下篇再向安全性邁進。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
