<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Che-Chia Chang</title>
    <link>https://chechia.net/post/</link>
    <description>Recent content in Posts on Che-Chia Chang</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>chechiachang &amp;copy; 2016</copyright>
    
	    <atom:link href="https://chechia.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform Infrastructure as Code</title>
      <link>https://chechia.net/post/terraform-infrastructure-as-code-module/</link>
      <pubDate>Sat, 27 Jun 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/terraform-infrastructure-as-code-module/</guid>
      <description>&lt;p&gt;This article is part of &lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;Infrastructure as Code: introduce Terraform from stratch&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground&#34;&gt;Get-started examples / SOP on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;Introducation to Terraform Iac: Speaker transcript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://slides.com/chechiachang/terraform-introduction/edit&#34;&gt;Presentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check my website &lt;a href=&#34;https://chechia.net&#34;&gt;chechia.net&lt;/a&gt; for other blog. &lt;a href=&#34;https://www.facebook.com/engineer.from.scratch&#34;&gt;Follow my page to get notification&lt;/a&gt;. Like my page if you really like it :)&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code Transcript</title>
      <link>https://chechia.net/post/terraform-infrastructure-as-code-transcript/</link>
      <pubDate>Mon, 15 Jun 2020 10:58:56 +0800</pubDate>
      
      <guid>https://chechia.net/post/terraform-infrastructure-as-code-transcript/</guid>
      <description>&lt;p&gt;This article is part of &lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;Infrastructure as Code: introduce Terraform from stratch&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground&#34;&gt;Get-started examples / SOP on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;Introducation to Terraform Iac: Speaker transcript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://slides.com/chechiachang/terraform-introduction/edit&#34;&gt;Presentation file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check my website &lt;a href=&#34;https://chechia.net&#34;&gt;chechia.net&lt;/a&gt; for other blog. &lt;a href=&#34;https://www.facebook.com/engineer.from.scratch&#34;&gt;Follow my page to get notification&lt;/a&gt;. Like my page if you really like it :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;各位好&lt;/p&gt;
&lt;h1 id=&#34;about-this-presentation&#34;&gt;About this presentation&lt;/h1&gt;
&lt;p&gt;開始之前，先分享一些資源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://slides.com/chechiachang/terraform-introduction/edit&#34;&gt;投影片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code-transcript/&#34;&gt;講稿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground&#34;&gt;程式碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground/blob/master/SOP.md&#34;&gt;SOP 範本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/engineer.from.scratch/&#34;&gt;Facebook 粉專&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都放在這裡，因為有附逐字稿，所以如果很忙的朋友，掃了 QR code 就可以回家自己看了，不用客氣。&lt;/p&gt;
&lt;p&gt;然後有興趣在追這系列文章的，可以幫我 facebook 粉專按個讚跟追蹤，每周新文章出來，會推播通知。&lt;/p&gt;
&lt;p&gt;文章在 chechia.net 上，新文章通知靠 facebook 粉專這樣。也可以只追蹤不按讚。我自己看別人技術 blog 也很常這樣(XD&lt;/p&gt;
&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;
&lt;p&gt;好，今天來講得這個 Terraform&lt;/p&gt;
&lt;p&gt;我會實際分享我們公司為雲團隊導入的經驗，前半部會有點像購物頻道的廣告&lt;/p&gt;
&lt;p&gt;以下的對話是不是常出現在日常工作中？&lt;/p&gt;
&lt;h1 id=&#34;以下這段對話很耳熟&#34;&gt;以下這段對話很耳熟？&lt;/h1&gt;
&lt;p&gt;「是誰改了這個設定？」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by 週一上班的 DevOps 與週六值班的維運團隊&lt;/li&gt;
&lt;li&gt;對啟用的環境的掌握如何&lt;/li&gt;
&lt;li&gt;環境的變更能否永久保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「這個環境怎麼少一個設定？」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網站噴錯後，整個團隊一步步釐清問題，不是 code，不是變數config，是 infra 有一個小地方沒設定&lt;/li&gt;
&lt;li&gt;環境複雜，以我們的例子是複雜得多雲網路，常出這種問題&lt;/li&gt;
&lt;li&gt;環境設定的除錯很費時&lt;/li&gt;
&lt;li&gt;完全可以避免&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「會動就好，沒事不要改環境（抖）」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Legacy site&lt;/li&gt;
&lt;li&gt;調整 production 環境是否有信心&lt;/li&gt;
&lt;li&gt;我們看不慣無人整理的舊架構，導入 terraform 後，（很不要命的）把 production site 搬過一遍&lt;/li&gt;
&lt;li&gt;我有十成的信心跟你說新舊兩個 site 完全一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;our-stories&#34;&gt;Our stories&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;我們是思華科技(ＸＤ)&lt;/li&gt;
&lt;li&gt;開發團隊大概 100+ 個左右&lt;/li&gt;
&lt;li&gt;專案很多，而且老闆很喜歡開新專案測試商業模型&lt;/li&gt;
&lt;li&gt;環境也越開越多，大大小小幾百台 vm，幾十個資料庫，都是不同專案在跑，規模大概這樣&lt;/li&gt;
&lt;li&gt;每週都有新環境要交付&lt;/li&gt;
&lt;li&gt;交接缺口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們公司東西多，但東西多不是問題，問題是什麼呢?&lt;/p&gt;
&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;手動部屬本來不是問題，但漸漸成為問題
&lt;ul&gt;
&lt;li&gt;開 infrastructure 的方法，跟著 SOP 上去 GCP GUI 介面，點一點，填一填。公有雲開機器很方便。&lt;/li&gt;
&lt;li&gt;可是不同人開的環境漸漸出現一些不同，可能差一個設定、一個參數、或是命名規則差一點。這些細節的不同，差一個 config 有時候就會雷到人。「這機器誰建的阿，根本有問題啊」，而且這種雷很多時候都是跑下去出事了，才發現「阿靠原來設定不一樣」&lt;/li&gt;
&lt;li&gt;命名差一點不影響功能，但看久了就很煩，「阿就對不齊阿」，有強迫症就很痛苦。然後你維運的自動化腳本就爆掉，命名差一個字，regex 就要大改。突然增加維運成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生產環境大家都不太敢動。架構調整很沒信心
&lt;ul&gt;
&lt;li&gt;誰知道當初環境設定了那些東西，開機器的人離職了，也不知道他為啥設定，「你知道他當初為什麼要設定這個嗎?」，你問我我是要去擲茭喔。
&lt;ul&gt;
&lt;li&gt;我們這一季把所有現有環境都搬到新的架構上，因為我們對舊架構不爽很久了(XD)，這個能做到當然有作法，後面細講&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有實際需求才找解決方案，沒有需求就不用衝動導入新技術，導入過程中還是蠻累的&lt;/p&gt;
&lt;h1 id=&#34;需求-1&#34;&gt;需求&lt;/h1&gt;
&lt;p&gt;從維運的角度，需求大概長這樣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提升穩定度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;infra 交付標準化&lt;/li&gt;
&lt;li&gt;交付自動化&lt;/li&gt;
&lt;li&gt;測試環境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;infra 提交要能夠 review&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提升效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老闆要的。超快部屬，腳本跑下去要快，還要更快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;次要目標&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成本，效能最佳化，希望能在整理過程中，找到最適合的可行架構&lt;/li&gt;
&lt;li&gt;新人好上手，Junior 同事也能「安全」的操作，看到這個安全兩個字了嗎? 安全第一，在訓練新的 op 時要注意安全，不然他上去 GUI 點一點，一個手起刀落 DB 就不見了，整個維運團隊一周不用睡覺。安全第一吼。&lt;/li&gt;
&lt;li&gt;權限控管，IAM 也用 terraform 管理，權限管理人多手雜越用越亂，可以考慮使用 IaC，一覽無遺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;promatical-approach-for-infra&#34;&gt;Promatical approach for infra&lt;/h1&gt;
&lt;p&gt;啊不就是 Infrastructure as code XD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;導入前，大家都有聽過，大家都覺得很想導入，但沒人有經驗，每個人都超怕，但又不知道在怕三小&lt;/li&gt;
&lt;li&gt;這表明了一件事，大家都知道要做對的事情，但不是每個人都能改變現況，讓團隊導向對的事情&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;計畫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;確定需求&lt;/li&gt;
&lt;li&gt;開始 survey&lt;/li&gt;
&lt;li&gt;「小心」導入&lt;/li&gt;
&lt;li&gt;有經驗領頭羊很棒，但不是必須&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技術細節&#34;&gt;技術細節&lt;/h2&gt;
&lt;p&gt;先簡單講一下 IaC (Yeah 終於要講技術了)&lt;/p&gt;
&lt;h1 id=&#34;iac&#34;&gt;IaC&lt;/h1&gt;
&lt;p&gt;上面都講概念跟心法，現在實際講用到的技術。&lt;/p&gt;
&lt;p&gt;首先是 Infrastructure as Code，這個概念很久了，但導入的公司好像不是那麼多。所以我今天要來傳教，洗腦大家(XD，跟你推薦這個配方保證快又有效(XD)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡單來說就是用程式來操作 infrastructure，今天主講的 terraform 是 IaC 工具中的一個&lt;/li&gt;
&lt;li&gt;IaC 工具可以是宣告式，或是命令式，或是兩種都支援
&lt;ul&gt;
&lt;li&gt;一個是我告訴你結果，步驟我不管，請你幫我生出這樣的結果。&lt;/li&gt;
&lt;li&gt;一個是我告訴你步驟，你一步一步幫我做完，就會得到我要的結果&lt;/li&gt;
&lt;li&gt;terraform 是宣告式，說明邏輯跟結果，例如我要 1 2 3 台機器，terraform 自己去幫我打 Google API 這樣，把機器生出來&lt;/li&gt;
&lt;li&gt;ansible 是命令式，我把步驟寫成一堆命令腳本 playbook ，ansible 幫我照著跑下去，理論上跑完後我的機器也準備好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;terraform&#34;&gt;Terraform&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;官網在這邊，自己看 &lt;a href=&#34;https://www.terraform.io/&#34;&gt;https://www.terraform.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;宣告式的 Iac 工具&lt;/li&gt;
&lt;li&gt;單一語法描述各家 API&lt;/li&gt;
&lt;li&gt;透過 provider 轉換 tf 成為 API call&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;terraform-core-workflow&#34;&gt;Terraform Core Workflow&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/guides/core-workflow.html&#34;&gt;https://www.terraform.io/guides/core-workflow.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write 撰寫期待狀態 tf file&lt;/li&gt;
&lt;li&gt;plan 計畫試算結果&lt;/li&gt;
&lt;li&gt;apply 用期待狀態去更新遠端
&lt;ul&gt;
&lt;li&gt;tf file，就是宣告式的表達 infra ，描述期待的infra長這樣，ex. tf file 裡有這些機器 1 2 3 台這樣
&lt;ul&gt;
&lt;li&gt;resource 一個一個物件描述，後面可能是對映 provider 的 API Endpoint (ex. GCP GKE API)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;remote resources，是真實存在遠端的機器，例如 GCP 雲端實際上只有 1 2 兩台這樣。&lt;/li&gt;
&lt;li&gt;terraform diff tf vs remote，算出 plan，少的生出來，多的上去砍掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;demo-1&#34;&gt;Demo 1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(empty project)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add my-gce.tf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check GUI remote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;existing my-gce&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remove my-gce.tf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這邊不 apply 我 demo 還要用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊這樣有理解 terraform 的基本流程嗎？編寫，計畫，apply 三步驟
很單純
然後講一點細節&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remove (out of scope)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plan -&amp;gt; addd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;apply (deplicated ID)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mv state (Danger)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rename state with the same ID -&amp;gt; destroy and recreate (Danger)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;state&#34;&gt;State&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;terraform 經手(apply) 過的 resource 會納入 state (scope)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不在 scope 裡的 resource 不會納入 plan，不會被 destroy，但可能會 create duplicated ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;terraform 允許直接操作 state&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import&lt;/li&gt;
&lt;li&gt;remove&lt;/li&gt;
&lt;li&gt;但我不允許XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意是 diff state 喔，所以每次 plan 時候會自動 refresh state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;state 又是什麼? remote 是一個動態環境，可能會多會少，這樣沒辦法 diff，state 是把我執行當下，遠端相關資源的狀態快照存起來，然後根據這個 snapshop 去 diff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;apply 只是拿你的期待去 diff state，terraform 幫你算出來差多少，例如我們這邊就是遠端少一台。terraform 透過 provider 去知道，喔這一台要去打那些 GCP API，把這台生出來。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State，是核心概念，我當初自己卡觀念是卡這邊，所以我特別拉出來講&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雲端空蕩蕩，refresh state 也是空的，tf file 多加一個 VM，plan 覺得要 create&lt;/li&gt;
&lt;li&gt;雲端有東西，refresh state 未必會 refresh 到
&lt;ul&gt;
&lt;li&gt;相同 ID 的資源之前 import 在 state 中，refresh state，tf file 沒東西，plan 覺得要 destroy&lt;/li&gt;
&lt;li&gt;相同 ID 的資源不在 state 中，這些 resource 不在當前 state 的 scopor 中，refresh state 是空的，tf file 沒東西，plan 覺得沒增沒減&lt;/li&gt;
&lt;li&gt;相同 ID 的資源不在 state 中，這些 resource 不在當前 state 的 scopor 中，refresh state 是空的，tf file 有相同 ID 的資源，plan 覺得要 create，但實際 apply，API error 遠端已經有相同 ID 的資源存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Write -&amp;gt; Plan -&amp;gt; Apply&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;大家都會 terraform 惹&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;初步使用感想&#34;&gt;初步使用感想&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IaC 地端跟雲端都能做，但雲端做起來效果超級好
&lt;ul&gt;
&lt;li&gt;完全展現雲端運算的特性，迅速、彈性、隨用隨叫，調度大量的虛擬化資源&lt;/li&gt;
&lt;li&gt;新增東西很快，不要的資源，要刪掉也很快
&lt;ul&gt;
&lt;li&gt;不小心刪錯也很快(大誤)，所以我說新人一個手起刀落公司整個雲弄不見也是有可能的，「啊我的雲勒」「被 terraform 砍了」。不要笑，那個新人就是我，我自己剛學的時候就有把整個 db 變不見過，差點一到職就引咎辭職(XD。用這些技術還是有很多安全要注意，稍後會細講注意的安全事項。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之，Iac 就是用程式化的語法，精準的描述雲端的狀態或是步驟，完全沒有模糊的地帶。帶來的好處，降低維運的錯誤風險，加快維運效率，最佳化節省成本。&lt;/p&gt;
&lt;h1 id=&#34;新手-state-的雷&#34;&gt;新手 state 的雷&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;多人協作，同時變更 state 會造成不可預期的錯誤
&lt;ul&gt;
&lt;li&gt;避免直接操作 state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;state 可能有 sensitive 資料&lt;/li&gt;
&lt;li&gt;推薦使用外部帶有 lock 的 state storage&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;導入&#34;&gt;導入&lt;/h2&gt;
&lt;h1 id=&#34;導入工具之後&#34;&gt;導入工具之後&lt;/h1&gt;
&lt;p&gt;新工具導入時要做好風險評估，每個人都是第一次用 terraform ，用起來很快很爽的同時也要不斷宣導安全概念，雷在哪裡坑在哪裡。&lt;/p&gt;
&lt;p&gt;使用 terraform 的風險&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打 DELET API 超快，砍起來很方便，但很多時候方便 = 危險。眼看小明一個手起刀落，談笑間，公有雲灰飛煙滅(XD，通通變不見。現在在講故事很開心，實際發生的話大家都笑不出來，全公司 RD 都跑來維運部門排隊盯著你看，就算修好也要懲處。壓力超大。但小明砍錯東西不是小明的錯，是大環境的錯是 SOP 的錯(XD。認真的，團隊沒有提供 SOP，新人砍錯東西當然是團隊負責。所以我們 SOP 第一行就寫得很清楚。&lt;/li&gt;
&lt;li&gt;看見 destroy 就雙手離開鍵盤，直接求救，這樣還能出事嗎&lt;/li&gt;
&lt;li&gt;再來，給予特殊的 IAM 權限，例如只能新增不能刪除的權限&lt;/li&gt;
&lt;li&gt;進一步導入 git-flow，push、review、PR，讓他連犯錯的機會都沒有&lt;/li&gt;
&lt;li&gt;根本還是要給予新人足夠的訓練，然後同時保障公司安全。
&lt;ul&gt;
&lt;li&gt;給新人過大權限砍錯東西，或是工作流程一堆坑，根本是在誘導新人犯錯，團隊的資深成員要檢討。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;逐漸導入&#34;&gt;逐漸導入&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;導入的過程不斷檢討跟修改，最後找出適合我們公司的流程&lt;/li&gt;
&lt;li&gt;檢討透明，有錯就修 SOP，修工作流程。讓你的工作流程跟工作環境，固若金湯，成員很難在裡面犯錯，這才是 DevOps 在做這的事。&lt;/li&gt;
&lt;li&gt;官方建議的最佳實作 &lt;a href=&#34;https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html&#34;&gt;https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;至於我們是如何逐漸導入 IaC 到公司的開發流程中？具體的導入步驟如下&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;introduction-iac&#34;&gt;Introduction: IaC&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;舊架構保存。先把雲端上已經有的機器，terraform 裡面叫資源，import 成代碼&lt;/li&gt;
&lt;li&gt;檢查舊架構。所有設定都變成代碼了，跟你看程式碼一樣，一拍兩瞪眼沒有任何模稜兩可。整理過程中找出合理跟不合理的設定。有可能會發現一些雷，只是還沒爆炸，也趁機修一修。&lt;/li&gt;
&lt;li&gt;然後，依照這些現行的資源，去整理一份適合公司的環境範本，之後所有的新環境都這這個範本部屬，確定新的環境都有合理的規劃。&lt;/li&gt;
&lt;li&gt;到此，所有新環境都是同一份範本生出來的，環境已經標準化了。不會再有零碎的小錯誤。聽起來超讚，但有時候出錯就是一起全錯，超慘(XD。當然有錯就修範本，修 SOP。同樣的錯永不再犯，不用再修第二次。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;introduction-git-flow&#34;&gt;Introduction: Git-flow&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;然後，導入版本控管，整合 git-flow 的開發流程。寫 SOP，之後所有變更都要&lt;/li&gt;
&lt;li&gt;先把 master 封起來，所有人都不准直接改架構&lt;/li&gt;
&lt;li&gt;開新 branch，commit&lt;/li&gt;
&lt;li&gt;開 PR 大家 review，大家都看過了吼，再 merge 進去，這樣有錯就不是一個人的鍋而是大家一起背鍋(XD。不是拉，review 能大幅降低錯誤，分享團隊經驗加速新人訓練，並且讓所有人 on the same page，不會再有「阿靠這機器誰開的」有人不知情的事情。&lt;/li&gt;
&lt;li&gt;永遠只使用 master 來部屬雲端資源，也是確定所有架構都經過多人 review。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;introduction-pipeline-automation&#34;&gt;Introduction: Pipeline Automation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;最後，整合 CICD，讓架構的部屬完全自動化。把人工降到最低，同時也把人工錯誤的機率降到最低，當然這個也是沒錯都沒錯，要錯一起錯的狀態(XD，使用時還是要注意。但如果執行的很穩定的話，自動化絕對是值得投資的。因為現在把架構當作產品做，部屬完要測試功能，網路設定是否正確，監控是否完整，proxy 是不是要打看看。這些都整合進 infra 自動 pipeline。部屬完就是測試，然後交付給其他團隊。&lt;/li&gt;
&lt;li&gt;之後就是不斷調整 SOP，跟 CI/CD pipeline。把維運步驟轉成程式維護。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;犯錯過一次，永不再犯。這個對於長期團隊經營非常重要，讓經驗跟知識累積，團隊質量才會成長。IaC 在這點幫助很大。&lt;/p&gt;
&lt;h2 id=&#34;demo-2&#34;&gt;Demo 2&lt;/h2&gt;
&lt;h1 id=&#34;repo&#34;&gt;Repo&lt;/h1&gt;
&lt;p&gt;我使用的原碼都開源在 github 上，因為是真的拿來導入我們公司的架構，保證可以用。阿不能用的話，幫我發 issue 給我，或是你人更好發個 PR 給我都可以(XD。把 repo 拉下來，這邊有 gcp / azure / aws，雖然有三個但我們公司主要是用 gcp，剩下兩個我自己做興趣的。裡面 templates 跟 modules ，但你不用管，我 makefile 都寫好了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我這邊要新增一個 kubernetes 集群&lt;/li&gt;
&lt;li&gt;我直接進來我的專案， NAME=my-new-k8s make gke，東西就生出來，具體做的事情就是新增兩個程式區塊，每個區塊描述一個機器&lt;/li&gt;
&lt;li&gt;git diff 看多了什麼，這邊多一個 k8s 跟多一個 node-pool&lt;/li&gt;
&lt;li&gt;然後我 plan，讓 terraform 預測一下試跑結果，我們依據結果好好 review，例如這邊 2 to add 0 to destroy 我的想像是不是真的跟 terraform 計畫一樣。&lt;/li&gt;
&lt;li&gt;然後 terraform apply，這邊要看清楚，我們是 2 to add 0 to destroy，如果看到有 destroy 就要雙手離開鍵盤，大家不要衝動，看清楚，因為她真的會上去把東西砍掉&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. 專案可以按照公司需求分，資源太多太擠就拆分成幾個資料夾好管理，然後分權責管理，例如館 iam 的、管網路、管應用機器的可以分開來&lt;/p&gt;
&lt;h1 id=&#34;git-flow&#34;&gt;Git-flow&lt;/h1&gt;
&lt;p&gt;然後因為我後面會講 git-flow 工作流程整合，所以我順便做完。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的變更 commit ，plan 但是還沒 apply。我要求所有新的 commit 推上去&lt;/li&gt;
&lt;li&gt;發 PR，其他團隊成員來幫我 review。PR 用的 template ，描述一下新架構的目的，變更的地方，有沒有雷，然後幾個 checklist 檢查&lt;/li&gt;
&lt;li&gt;其他隊員 review 都 lgtm 才 merge 回 master&lt;/li&gt;
&lt;li&gt;apply 永遠在最新的 master 上 apply，確保所有推到雲端的架構都是多人 review 過的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有 review 才有品質可言，code 都要 review，infra 自然也需要 review。IaC + git-flow 是必要的。&lt;/p&gt;
&lt;h1 id=&#34;demo-2-1&#34;&gt;Demo 2&lt;/h1&gt;
&lt;h1 id=&#34;工具--流程&#34;&gt;工具 + 流程&lt;/h1&gt;
&lt;p&gt;導入的成功與否，不是最佳實踐，而是各個階段，都給予團隊適合的挑戰與協助&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git-flow SOP 範例
&lt;ul&gt;
&lt;li&gt;中文版，超長，上面操作過了，這邊不細講，大家自己上去看&lt;/li&gt;
&lt;li&gt;但如果團隊是第一次導入 terraform，我強烈建議要有類似的東西&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide template&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;demo 時不是有 makefile，makefile 裡面寫的小腳本跟本身 IaC 沒有關係，提供一些而外的小腳本輔助，可以進一步降低人工操作，提升效率，又增加安全。工具不一定完全適合團隊吧，這時候就需要補足團隊文化跟工具間的落差，潤滑一下。&lt;/p&gt;
&lt;p&gt;再說一次，新人做錯，不是他做錯，而是團隊沒有提供他足夠的協助。如何讓新人也能有高產出同時又顧及安全，資深工程師是這邊在資深。提供一些一用性工具是必要的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terraform module&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又是一個 terraform 的功能&lt;/p&gt;
&lt;p&gt;簡單來說，GKE 也許定義了 2 個子物件(ex. Cluster，Node-pool)，總共有 30 個參數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你其實不需要那麼多參數 XD&lt;/li&gt;
&lt;li&gt;建立一個 my-gke-module，一個物件，5 個必填參數，5 個有預設值的選填參數&lt;/li&gt;
&lt;li&gt;也許寫錯的機會只剩 5 個，也許工時只需要 5/30&lt;/li&gt;
&lt;li&gt;需求變更就改 module，讓你的操作物件本身就是符合實際需求的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能手動改的地方就是能犯錯的地方，黑箱封裝可以保護整體架構，並提高易用性&lt;/p&gt;
&lt;h2 id=&#34;雜項&#34;&gt;雜項&lt;/h2&gt;
&lt;h1 id=&#34;其他&#34;&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;上面是 IaC 在我們公司的流程&lt;/li&gt;
&lt;li&gt;我們選 terraformㄨ&lt;/li&gt;
&lt;li&gt;如果是用 terraform 以外的工具，可以參考流程，也許殊途同歸&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/intro/vs/index.html&#34;&gt;https://www.terraform.io/intro/vs/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;優缺點&#34;&gt;優缺點&lt;/h1&gt;
&lt;p&gt;好，跟團隊一步一步溝通改進，花了一兩個月，成功導入。是否有解決當初的問題？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;降低人工操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免人工失誤&lt;/li&gt;
&lt;li&gt;infra 交付標準化，沒有奇怪的設定，再也沒有「啊我機器開錯了」這回事&lt;/li&gt;
&lt;li&gt;快，真低快。開一個機器就是我剛剛 demo 這樣，而且保證會動。這樣開出來的機器，對她超有信心，要複製完全一模一樣的環境也超有信心。如果再加上自動化測試就更敢保證。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;準確&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大家都 review 過，比較不會有「啊我當時沒想到」的狀況，infra 出這種萬萬沒想到的問題，很有機率要幹掉重來。菜鳥跟著 review ，試著發 PR，這樣新人訓練才會有效率，他之後才能自己操作，資深工程師只要 review 就好。要給新人足夠的訓練，又要顧慮安全， review 花的時間非常值得。&lt;/li&gt;
&lt;li&gt;保證開發、測試、staging、production 環境長的一模一樣。terraform 程式保證的不是我保證的(XD)。但他的保證是有根據的，讓團隊從開發到上限保重相同環境。「阿在我的機器上會跑怎麼上 production 就壞掉」不好意思沒這回事，壞掉就是你扣寫錯(兇。認真地說，排除一些 infra 的問題，可以大幅增加除錯的效率，只要檢查還沒自動化的地方就好。&lt;/li&gt;
&lt;li&gt;自動化測試，扣要測試環境也要測試，這邊直接整進去，環境交出去保證是好的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生產環境變動&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為已經轉成程式碼，要有什麼改動都很精確，大家也比較敢動環境，特別是 production 環境。再來因為保留所有環境產生的程式碼，要複製環境也很容易，而且有信心保證一樣。我們就把就架構的 production 複製，然後搬家。安全下庄沒出事。後面就搬上癮，整個公司服務大搬家，搬成團隊理想的架構。搬家已經上線的服務，這個需要多少信心跟勇氣你們知道嗎，維運真的是愛與勇氣的冒險。新架構我們也很滿意。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自動化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動化就是讓你用零倍的時間做十倍的事情嘛。聽起來怪怪的蛋是是真的。&lt;/li&gt;
&lt;li&gt;因為我們目標是維運躺著上班嘛(XD)，我們才能把時間拿去做改進，不然以光是開機器，測試環境可用性，維運就飽了，根本沒時間改進跟提升。這樣對公司長期非常不好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可讀性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GUI 沒辦法打 comment 阿，誰知道這個機器當初為什是這個設定。IaC 後到處都可以寫 comment，怕你不寫而已。然後 code 的表達性還是很強大，比起 GUI，資深工程師可以把握整個公司的架構狀況，比起去雲平台下一堆搜索，手動比對，程式碼的可維護性真的超高。而 GCP 已經是 GUI 做得很好的公有雲了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;降低人工，快速，準確，自動化，有信心&lt;/p&gt;
&lt;h2 id=&#34;qa&#34;&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;還有空我們再來講 terraform 的細節&lt;/p&gt;
&lt;p&gt;有事歡迎透過粉專私敲，因為我也需要人討論&lt;/p&gt;
&lt;h2 id=&#34;還有時間再聊&#34;&gt;還有時間再聊&lt;/h2&gt;
&lt;h1 id=&#34;terraform-1&#34;&gt;terraform&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;validate 既然是 code，這邊幫你做 lint、語法檢測、type check，過濾第一層錯誤&lt;/li&gt;
&lt;li&gt;import 可以把遠端的資源匯入成 state，一個點讚 follow 追蹤的概念(XD)，不是所有的遠端資源都需要追蹤到 state，我們只需要在對的 scope 裡面關注需要的機器&lt;/li&gt;
&lt;li&gt;module 可以自由撰寫，把有相依性的資源打包，依照團隊使用習慣調整使用&lt;/li&gt;
&lt;li&gt;cloud 可以管理 state，terraform cloud 幫你維護全域同一份 state，有人在使用時會 lock state，避免多人同時修改，打亂 API 造成資源錯誤&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;state-conflicts&#34;&gt;state conflicts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;如果有多份 state，你電腦上一份 local state，我電腦上一份 local state，其實會造成衝突&lt;/li&gt;
&lt;li&gt;更怕同時多人憶起 apply，GCP API 直接被打亂，會有不可預期的錯誤&lt;/li&gt;
&lt;li&gt;解法是使用 terraform remote backend，不要用 local state，使用 DB 、storage 或是 terraform cloud，透過一隻 lock 來保證 synchronized state&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;間接理解-api&#34;&gt;間接理解 API&lt;/h1&gt;
&lt;p&gt;ex.  GCP Load Balancer&lt;/p&gt;
&lt;p&gt;這個講下去就太多了，基本上透過爬 terraform google provider 的文件，然後去比對&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為去點 GUI 其實感受不到 GCP API 的調用，但是使用 terraform 轉寫資源時候就很有感，打這個 API 跟打這個 API，tf 檔案上其實看得出來。&lt;/li&gt;
&lt;li&gt;進一步去查，才發現 GCP Load Balancer 內網或外網、http 或 tcp、全球或區域，使用的 Load Balancer 行為不一樣，因為底下的實作不一樣。但之前使用 GUI 時其實不會去想為啥設定不一樣，使用 terraform 就會被迫去了解，強迫學習XD。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;垃圾話&#34;&gt;垃圾話&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;最佳實踐不是問題 ，如何導入才是問題&lt;/li&gt;
&lt;li&gt;可以不用躺著上班，但是不能跪著上班&lt;/li&gt;
&lt;li&gt;願意多幾個人來看我粉專比較實在&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>從零開始的 Infrastructure as Code: Terraform - 01</title>
      <link>https://chechia.net/post/terraform-infrastructure-as-code/</link>
      <pubDate>Sun, 14 Jun 2020 16:46:09 +0800</pubDate>
      
      <guid>https://chechia.net/post/terraform-infrastructure-as-code/</guid>
      <description>&lt;p&gt;This article is part of &lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;從零開始的 Infrastructu as Code: Terraform&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;01 - Introduction to Infrastructure as Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[02 - Terraform 簡介與基本操作]&lt;/li&gt;
&lt;li&gt;[03 - 為公司導入 Terraform]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground&#34;&gt;Get-started examples / SOP on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/terraform-infrastructure-as-code/&#34;&gt;Introducation to Terraform Iac: Speaker transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check my website &lt;a href=&#34;https://chechia.net&#34;&gt;chechia.net&lt;/a&gt; for other blog. &lt;a href=&#34;https://www.facebook.com/engineer.from.scratch&#34;&gt;Follow my page to get notification&lt;/a&gt;. Like my page if you really like it :)&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;outlline&#34;&gt;Outlline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;our story: issues, steps, &amp;amp; results&lt;/li&gt;
&lt;li&gt;basics IaC, terraform&lt;/li&gt;
&lt;li&gt;benefits&lt;/li&gt;
&lt;li&gt;risks and 坑&lt;/li&gt;
&lt;li&gt;to be or not to be&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;experience oriented&lt;/p&gt;
&lt;h1 id=&#34;our-stories&#34;&gt;Our stories&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;100+ devs, many teams&lt;/li&gt;
&lt;li&gt;25+ projects&lt;/li&gt;
&lt;li&gt;50+ GKEs&lt;/li&gt;
&lt;li&gt;80+ SQLs&lt;/li&gt;
&lt;li&gt;IAMs, redis, VPCs, load-balancers, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;issues&#34;&gt;Issues&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ops manually create resources through GUI by SOP.&lt;/li&gt;
&lt;li&gt;We have many isolated, separeated resources, VPCs. It&amp;rsquo;s our culture, and we (devops) want to change.&lt;/li&gt;
&lt;li&gt;Some projects have short life-cycle. Rapid resources created &amp;amp; destroy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;our-user-story&#34;&gt;Our user story&lt;/h1&gt;
&lt;p&gt;As a devops,
I would like to introduce terraform (IaC)
so that I can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;review all existing resources&lt;/li&gt;
&lt;li&gt;minimize error from manual operation&lt;/li&gt;
&lt;li&gt;ASAP!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a devops,
I would like to fully enforce terraform (IaC)
so that I can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimize efforts to operate infra&lt;/li&gt;
&lt;li&gt;delegate infra operations to junior team members&lt;/li&gt;
&lt;li&gt;minimize IAM privilges&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;import existing resources&lt;/li&gt;
&lt;li&gt;review existing resources code&lt;/li&gt;
&lt;li&gt;plan best practice resource templates&lt;/li&gt;
&lt;li&gt;create new resources with templates&lt;/li&gt;
&lt;li&gt;introduce git workflow, plan, commit, PR, and review&lt;/li&gt;
&lt;li&gt;add wrapper handler&lt;/li&gt;
&lt;li&gt;automation pipeline&lt;/li&gt;
&lt;li&gt;repeat 2-4&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;iac&#34;&gt;IaC&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Programatic way to operate infra&lt;/li&gt;
&lt;li&gt;declarative (functional) vs. imperative (procedural)&lt;/li&gt;
&lt;li&gt;Perfect for public cloud, cloud native, virtualized resources&lt;/li&gt;
&lt;li&gt;Benefits: cost (reduction), speed (faster execution) and risk (remove errors and security violations)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;terraform&#34;&gt;Terraform&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Declarative (functional) IaC&lt;/li&gt;
&lt;li&gt;Invoke API delegation&lt;/li&gt;
&lt;li&gt;State management&lt;/li&gt;
&lt;li&gt;providers: azure / aws / gcp /alicloud / &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;demo&#34;&gt;Demo&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground&#34;&gt;https://github.com/chechiachang/terraform-playground&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;scope&#34;&gt;Scope&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compute Instances&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Databases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IAM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Networking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load Balancer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;expected-benefits&#34;&gt;Expected benefits&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Minimize manual operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zero manual operation error&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standarized infra. Infra as a (stable) product.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fast, really fast to duplicate envs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infra workflow with infra review&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to create identical dev, staging, prod envs&lt;/li&gt;
&lt;li&gt;Reviewed infra. Better workflow. Code needs reviews, so do infra.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fully automized infra pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;other-benefits&#34;&gt;Other Benefits&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t afraid to change prod sites anymore
&lt;ul&gt;
&lt;li&gt;We made a massive infra migration in this quater!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Better readability to GUI. Allow comment everywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;risks&#34;&gt;Risks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Incorrect usage could cause massive destruction.
&lt;ul&gt;
&lt;li&gt;如果看見 destroy 的提示，請雙手離開鍵盤。 ~ first line in our SOP&lt;/li&gt;
&lt;li&gt;If see &amp;ldquo;destroy&amp;rdquo;, cancel operation &amp;amp; call for help.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State management&lt;/li&gt;
&lt;li&gt;A little latency between infra version and terraform provider version&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;reduce-risks&#34;&gt;Reduce Risks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Sufficient understanding to infra &amp;amp; terraform&lt;/li&gt;
&lt;li&gt;Sufficient training to juniors&lt;/li&gt;
&lt;li&gt;Minimize IAM privilege: remove update / delete permissions&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;git-flow&#34;&gt;Git-flow&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chechiachang/terraform-playground/blob/master/SOP.md&#34;&gt;Our SOP&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit tf&lt;/li&gt;
&lt;li&gt;push new branch commit&lt;/li&gt;
&lt;li&gt;PR, review &amp;amp; discussion&lt;/li&gt;
&lt;li&gt;merge &amp;amp; apply&lt;/li&gt;
&lt;li&gt;revert to previous tag if necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;utility-provide-template&#34;&gt;(Utility) Provide template&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;wrap resources for
&lt;ul&gt;
&lt;li&gt;better accesibility&lt;/li&gt;
&lt;li&gt;lower operation risks&lt;/li&gt;
&lt;li&gt;uniform naming convention&lt;/li&gt;
&lt;li&gt;best practice&lt;/li&gt;
&lt;li&gt;suggested default value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;about-introducing-new-tool&#34;&gt;About introducing new tool&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The hardest part is always people
&lt;ul&gt;
&lt;li&gt;Focus on critical issues (痛點) instead of tool itself. &amp;ldquo;We introduce tool to solve&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Put result into statistics &amp;ldquo;The outage due to misconfig is reduced by&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;overall-my-iac-experience-is-great&#34;&gt;Overall, my IaC experience is GREAT!&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IaC to automation.&lt;/li&gt;
&lt;li&gt;Comment (for infra) is important. You have to write doc anyway. Why not put in IaC?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;qa&#34;&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Full transcript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Presentation file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/chechiachang.github.io-src/blob/master/content/post/terraform-infrastructure-as-code/index.md&#34;&gt;Source Code on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net&#34;&gt;chechia.net&lt;/a&gt; &amp;lt;- full contents&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/engineer.from.scratch&#34;&gt;Follow my page to get notification&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Like it if you really like it :)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;appendixi-more-about-terraform&#34;&gt;Appendix.I more about terraform&lt;/h1&gt;
&lt;p&gt;terraform validate
terraform import
terraform module
terraform cloud &amp;amp; state management&lt;/p&gt;
&lt;h1 id=&#34;appendixi-understand-state-conflict&#34;&gt;Appendix.I understand State conflict&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Shared but synced&lt;/li&gt;
&lt;li&gt;watch out for state conflicts when colaborating
&lt;ul&gt;
&lt;li&gt;state diff. could cause terraform mis-plan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution: synced state lock
&lt;ul&gt;
&lt;li&gt;Colatorative edit (git branch &amp;amp; PR), synchronized terraform plan &amp;amp; apply&lt;/li&gt;
&lt;li&gt;or better: automation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;appendixii-understand-resources-from-api-aspect&#34;&gt;Appendix.II understand resources from API aspect&lt;/h1&gt;
&lt;p&gt;GCP Load Balancer&lt;/p&gt;
&lt;h3 id=&#34;gcp-load-balancing&#34;&gt;GCP Load Balancing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;understand resources from API aspect&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how terraform work with GCP API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;internal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;regional
&lt;ul&gt;
&lt;li&gt;pass-through: tcp / udp   -&amp;gt; internal TCP/UDP&lt;/li&gt;
&lt;li&gt;proxy: http / https       -&amp;gt; internal HTTP(S)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;external&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;regional
&lt;ul&gt;
&lt;li&gt;pass-through: tcp / udp   -&amp;gt; tcp/udp network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;global / effective regional
&lt;ul&gt;
&lt;li&gt;proxy
&lt;ul&gt;
&lt;li&gt;tcp                     -&amp;gt; TCP Proxy&lt;/li&gt;
&lt;li&gt;ssl                     -&amp;gt; SSL Proxy&lt;/li&gt;
&lt;li&gt;http / https            -&amp;gt; External HTTP(S)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;terraform-resource&#34;&gt;Terraform Resource&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;forwarding_rule&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forwarding_rule: tcp &amp;amp; http&lt;/li&gt;
&lt;li&gt;global_forwarding_rule: only http&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backend_service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backend_service
&lt;ul&gt;
&lt;li&gt;health_check&lt;/li&gt;
&lt;li&gt;http_health_check&lt;/li&gt;
&lt;li&gt;https_health_check&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;region_backend_service
&lt;ul&gt;
&lt;li&gt;region_health_check&lt;/li&gt;
&lt;li&gt;region_http_health_check&lt;/li&gt;
&lt;li&gt;region_https_health_check&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;some-ways-to-do-iac&#34;&gt;Some ways to do IaC&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Formation&lt;/li&gt;
&lt;li&gt;bash script with API / client&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引言-infrastructure-as-code&#34;&gt;引言 Infrastructure as Code&lt;/h1&gt;
&lt;p&gt;從字面上解釋，IaC 就是用程式碼描述 infrastructure。那為何會出現這個概念？&lt;/p&gt;
&lt;p&gt;如果不 IaC 是什麼狀況？我們還是可以透過 GUI 或是 API 操作。隨叫隨用&lt;/p&gt;
&lt;p&gt;雲端運算風行，工程師可以很在 GUI 介面上，很輕易的部署資料中心的架構。輸入基本資訊，滑鼠點個一兩下，就可以在遠端啟用運算機器，啟用資料庫，設置虛擬網路與路由，幾分鐘就可以完成架設服務的基礎建設(infrastructure)，開始運行服務。&lt;/p&gt;
&lt;p&gt;然而隨著&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雲平台提供更多新的（複雜的）服務
&lt;ul&gt;
&lt;li&gt;服務彼此可能是有相依性（dependency），服務需要仰賴其他服務&lt;/li&gt;
&lt;li&gt;或是動態耦合，更改服務會連動其他服務，一髮動全身&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要縝密的存取控管（access control）
&lt;ul&gt;
&lt;li&gt;防火牆，路由規則&lt;/li&gt;
&lt;li&gt;雲平台上，團隊成員的存取權限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;專案的規模與複雜度增加
&lt;ul&gt;
&lt;li&gt;多環境的部署&lt;/li&gt;
&lt;li&gt;多個備援副本設定&lt;/li&gt;
&lt;li&gt;大量機器形成的集群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;iac-的實際需求&#34;&gt;IaC 的實際需求&lt;/h1&gt;
&lt;p&gt;以下這些對話是不是很耳熟？&lt;/p&gt;
&lt;h1 id=&#34;iac-的實際需求-1&#34;&gt;IaC 的實際需求&lt;/h1&gt;
&lt;p&gt;沒有需求，就不需要找尋新的解決方案。&lt;/p&gt;
&lt;p&gt;有看上面目錄的朋友，應該知道這系列文章的後面，我會實際分享於公司內部導入 Terraform 與 IaC 方法的過程。&lt;/p&gt;
&lt;p&gt;各位讀者會找到這篇文，大概都是因為實際搜尋了 Terraform 或是 IaC 的關鍵字才找到這篇。&lt;/p&gt;
&lt;p&gt;如果沒有需求，自己因為覺得有趣而拉下來研究，&lt;/p&gt;
&lt;p&gt;如果沒有明確需求，就貿然導入
無謂增加亂度&lt;/p&gt;
&lt;h1 id=&#34;iac-的實現工具&#34;&gt;IaC 的實現工具&lt;/h1&gt;
&lt;h1 id=&#34;為何選擇-terraform&#34;&gt;為何選擇 Terraform&lt;/h1&gt;
&lt;h1 id=&#34;建議&#34;&gt;建議&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;如果不熟，從 import 現有最好的資源開始。把 70 分保住，再向 80 90 邁進。&lt;/li&gt;
&lt;li&gt;善用 module 封裝，只露出會用到的參數。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Say Goodbye 2019</title>
      <link>https://chechia.net/post/say-goodbye-2019/</link>
      <pubDate>Tue, 31 Dec 2019 18:38:51 +0800</pubDate>
      
      <guid>https://chechia.net/post/say-goodbye-2019/</guid>
      <description>&lt;p&gt;今年結束了，回顧一下今年做的事情&lt;/p&gt;
&lt;p&gt;&amp;ndash; 我是軟體工程師 &amp;ndash;&lt;/p&gt;
&lt;p&gt;6 場公開演講，並且踏出熟悉的社群舒適圈，南下進軍高雄XD&lt;/p&gt;
&lt;p&gt;37 篇技術文章
其中包含 30 篇 Ithome 30天(參賽就不用睡覺)鐵人賽參賽文章
結賽撿到賀優選狂賀?&lt;/p&gt;
&lt;p&gt;正職工作方面，進了幣圈，切身了解敝圈真亂後，又踏出了幣圈&lt;/p&gt;
&lt;p&gt;開坑翻譯麻省理工學院的課程『分散式系統』，好課揪團一起修
預計會有 22 篇文章，準備在可見的未來，犧牲無數個夜晚，邁向 2020&lt;/p&gt;
&lt;p&gt;&amp;ndash; 我是專業水肺潛水教練 &amp;ndash;
也是自由潛水員&lt;/p&gt;
&lt;p&gt;年末的幾天，正式開始執業，帶學生下海(?)
學習教導學生，也學習對學生的安全負責&lt;/p&gt;
&lt;p&gt;新年復工後，正職碼農，副業潛水
有人要潛請找我，保證優惠不藏私&lt;/p&gt;
&lt;p&gt;&amp;ndash; 我是數位行銷實習生 &amp;ndash;&lt;/p&gt;
&lt;p&gt;跟前公司 (雖然都不是MK但卻) 超強的行銷團隊&amp;lt;3學習數位行銷
從零開始大造個人品牌，邊學邊實習
開了兩個粉絲專頁
一個是技術文章分享，一個做潛水影片分享
打造個人品牌，自己推廣行銷，學習數位行銷&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT 6.824 Distributed System Learning Note</title>
      <link>https://chechia.net/post/mit-6.824-distributed-system/</link>
      <pubDate>Mon, 16 Dec 2019 23:46:46 +0800</pubDate>
      
      <guid>https://chechia.net/post/mit-6.824-distributed-system/</guid>
      <description>&lt;p&gt;跟著 MIT 6.824 學習分散式系統&lt;/p&gt;
&lt;p&gt;這個專案儲存 MIT 6.824 分散式系統編程的上課內容，我將內容翻譯程中文，加上個人學習筆記&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我會在我的學習過程中，持續翻譯課程內容
&lt;ul&gt;
&lt;li&gt;一方面深入個人學習&lt;/li&gt;
&lt;li&gt;另一方面也回饋社群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依照課程的進度進行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若有餘力，會嘗試翻譯以下內容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;課堂 Q &amp;amp; A&lt;/li&gt;
&lt;li&gt;論文&lt;/li&gt;
&lt;li&gt;lab 實做&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ablockchain Atomic Swap</title>
      <link>https://chechia.net/post/blockchain-atomic-swap/</link>
      <pubDate>Fri, 08 Nov 2019 08:03:30 +0800</pubDate>
      
      <guid>https://chechia.net/post/blockchain-atomic-swap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Atomic_swap&#34;&gt;https://en.bitcoin.it/wiki/Atomic_swap&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;2 pay txs and 2 claim tx&lt;/li&gt;
&lt;li&gt;claim txs are singed at first, locked with time&lt;/li&gt;
&lt;li&gt;2 pay txs are encrypted by x, affects only when x is reveal on the network&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Initialization&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A: random number x&lt;/p&gt;
&lt;p&gt;tx1: A pay B
A Pay BTC to B&amp;rsquo;s public key
if x known &amp;amp; singed by B
or Signed by A &amp;amp; B&lt;/p&gt;
&lt;p&gt;tx2: A claim
tx1 pay BTC to A&amp;rsquo;s public key
locked 48 hours
signed by A&lt;/p&gt;
&lt;p&gt;A -&amp;gt; B tx2
B -&amp;gt; A tx2 signed by A &amp;amp; B&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A -&amp;gt; submit tx1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tx3: B pay A alt-coin
B Pay A alt-coin
if x known &amp;amp; singed by A
or signed by A &amp;amp; B&lt;/p&gt;
&lt;p&gt;tx4: B claim
tx3 pay B alt-coins
locked 48 hours
signed by B&lt;/p&gt;
&lt;p&gt;B -&amp;gt; A tx4
A -&amp;gt; B tx4 signed by A &amp;amp; B&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;B submit tx3&lt;/li&gt;
&lt;li&gt;A spends tx3, reveal x&lt;/li&gt;
&lt;li&gt;B spends tx1 using x&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;specialized-alt-chain&#34;&gt;Specialized Alt-chain&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Blockchain Bep3 Atomic Swap</title>
      <link>https://chechia.net/post/blockchain-bep3-atomic-swap/</link>
      <pubDate>Tue, 22 Oct 2019 10:35:20 +0800</pubDate>
      
      <guid>https://chechia.net/post/blockchain-bep3-atomic-swap/</guid>
      <description>&lt;h1 id=&#34;bep3-atomic-swap&#34;&gt;BEP3 Atomic Swap&lt;/h1&gt;
&lt;p&gt;Binance 在 &lt;a href=&#34;https://github.com/binance-chain/BEPs/blob/master/BEP3.md&#34;&gt;BEP3: HTLC and Atomic Peg&lt;/a&gt; 提到，BEP 即將在 binance chain 上支援原生的 Hash Timer Locked Transfer (HTLT) ，這使跨鏈的原子性交換 (atomic swap) 變得可行，透過 HTLC 在兩邊的鏈上鎖住 (peg) tokens，然後只有在執行交換的時候，透過 hash 交換，一次執行雙邊的交易。&lt;/p&gt;
&lt;p&gt;關於 Atomic Swap 網路有非常多的訊息，有興趣的話可以看&lt;a href=&#34;https://en.bitcoin.it/wiki/Atomic_swap&#34;&gt;這篇&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交易只有在雙邊完成後才完成，完成之前不能動用交換的資產&lt;/li&gt;
&lt;li&gt;在任何階段失效都可以完全 fallback，並進行 refund&lt;/li&gt;
&lt;li&gt;交易的認證是去中心化的
&lt;ul&gt;
&lt;li&gt;這邊有個但書，Ethereum 上是透過 smart contract 實現，但 Binance chain 上還是靠 Binance 認證 XD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Binance 在 BEP3 中支援 HTLC，我們這邊主要的資訊來源是 binance.org 的&lt;a href=&#34;https://docs.binance.org/atomic-swap.html&#34;&gt;官方說明文件&lt;/a&gt;，這邊針對文章進行驗證，並且補足文件缺漏的部分，提醒過程中可能會踩到的雷。&lt;/p&gt;
&lt;h3 id=&#34;跨鍊cross-chain-交易&#34;&gt;跨鍊(Cross Chain) 交易&lt;/h3&gt;
&lt;p&gt;在部署 asset / token 的時候，我們會選擇合適的鏈作為發布資產並運行 block chain app。常用的應用鏈如 ethereum 與 binance chain 等等。不同的主鏈上有各自的優缺點，例如使用 ethereum ，可以與許多 token 與應用互動，也是最多人使用的應用主鏈。而在 binance 鏈上執行，則能夠快速的發生 transactions，並且可以與 binance 上的資產與交易所互動。&lt;/p&gt;
&lt;p&gt;在某些應用場景，我們會希望兩個獨立主鏈上的資產能後互動，例如在 binance chain 上執行快速的 transaction，然而也要使用 etheruem 上既有的 ERC-20 tokens，這時便需要一個溝通兩條鏈的機制。&lt;/p&gt;
&lt;h3 id=&#34;文章分為三個部分&#34;&gt;文章分為三個部分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;在 Binance Chain 上互換兩個 address 的 binance asset&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;從 ethereum token 到 binance&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;從 binance chain 到 ethereum&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;swap-on-binance-chain&#34;&gt;Atomic Swap on Binance Chain&lt;/h3&gt;
&lt;p&gt;我們今天會實作 Atomic Peg Swap，透過 HTLT 鎖住 Binance Chain 上兩個 address 的資產，並進行原子性的一次交易，來達成鏈上的資產互換。這邊直接使用 binance 提供的 bnbcli 來執行。&lt;/p&gt;
&lt;h3 id=&#34;使用情境&#34;&gt;使用情境&lt;/h3&gt;
&lt;p&gt;兩個在 Binance Chain 上的 address 想交換資產&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client: HTLT 的發起方，擁有一部分 asset，發起 HTLT 希望執行資產互換&lt;/li&gt;
&lt;li&gt;Recipient: HTLT 的收受方，收到 HTLT，需要於時限內 deposit 指定數量的資產到 swap 中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服務元件&#34;&gt;服務元件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTLT transactions on binance chain: 來鎖住並 claim assets&lt;/li&gt;
&lt;li&gt;Client tooling: tbnbcli 讓客戶可以操作，監測鏈上 swap 的狀況&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流程&#34;&gt;流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Client 使用 tbnbcli 發起 HTLT&lt;/li&gt;
&lt;li&gt;Recipient 收到發起方送來的 swap info 與 asset (frozen)&lt;/li&gt;
&lt;li&gt;Recipient Deposit 指定數量的 asset 到 swap 中&lt;/li&gt;
&lt;li&gt;Binance Chain 自動完成 swap，完成交換，解鎖兩邊交換的資產&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;取得-tbnbcli&#34;&gt;取得 tbnbcli&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.binance.org/api-reference/cli.html&#34;&gt;tbnbcli 的說明文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由於 bnbcli repo 中使用 Git Large File Storage 來存放 binary，這邊要啟用 git-lfs 來下載 binary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Mac port
sudo port install git-lfs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Git clone repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone git@github.com:binance-chain/node-binary.git
cd node-binary

git chechout v0.6.2
git lfs pull --include cli/testnet/0.6.2/mac/tbnbcli
sudo copy cli/testnet/0.6.2/mac/tbnbcli /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這邊要注意使用 v0.6.2+ 的版本，不然會沒有 HTLT 的 subcommands&lt;/p&gt;
&lt;h3 id=&#34;測試-tbnbcli&#34;&gt;測試 tbnbcli&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli status --node http://data-seed-pre-0-s3.binance.org:80

&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;node_info&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;protocol_version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p2p&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;block&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;34ac6eb6cd914014995b5929be8d7bc9c16f724d&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listen_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aa13359cd244f11e988520ad55ba7f5a-c3963b80c9b991b7.elb.us-east-1.amazonaws.com:27146&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;network&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binance-Chain-Nile&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.31.5&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channels&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;36402021222330380041&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;moniker&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data-seed-0&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tx_index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rpc_address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp://0.0.0.0:27147&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sync_info&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latest_block_hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;359AD9BF36B7DEEB069A86D53D3B65D9F4BB77A1A65E40E1289B5798D4C1094F&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latest_app_hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E748CFA5806B587D9678F55DFDDB336E3669CDF421191CDA6D2DF8AA7A3461F3&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latest_block_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;45868456&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latest_block_time&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-23T07:36:38.176957281Z&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catching_up&amp;#34;&lt;/span&gt;: false
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;validator_info&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1C360E22E04035E22A71A3765E4A8C5A6D586132&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pub_key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tendermint/PubKeyEd25519&amp;#34;&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T56yDoH+B+OY8PP2tmeFtJtk+9ftnBUVHykKfLS45Es=&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;voting_power&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;acquire-valid-binance-testnet-account&#34;&gt;Acquire Valid Binance Testnet Account&lt;/h3&gt;
&lt;p&gt;Check &lt;a href=&#34;https://www.binance.com/en/support/articles/360023912272&#34;&gt;Testnet Doc&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://testnet.binance.org/en/&#34;&gt;Binance Testnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a wallet&lt;/li&gt;
&lt;li&gt;Save address, mn, keystore, private key&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;https://www.binance.vision/tutorials/binance-dex-funding-your-testnet-account&#34;&gt;testnet faucet&lt;/a&gt; to fund testnet account&lt;/li&gt;
&lt;li&gt;Receive 200 BNB on testnet&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;client-create-htlt&#34;&gt;Client Create HTLT&lt;/h3&gt;
&lt;p&gt;這邊使用簡單的範例，鎖住兩個 BEP2 tokens 來進行交換，展示一下 tbnbcli 的 HTLT&lt;/p&gt;
&lt;p&gt;準備兩個 address，這邊是我自己的兩個 testnet address&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p (179 BNB) &lt;a href=&#34;https://testnet-explorer.binance.org/address/tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&#34;&gt;Explorer 上查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce (20 BNB) &lt;a href=&#34;https://testnet-explorer.binance.org/address/tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&#34;&gt;Exporler 上查看&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目標：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTLT&lt;/li&gt;
&lt;li&gt;tbnb&amp;hellip;j9p -&amp;gt; 0.3 BNB -&amp;gt; tbnb&amp;hellip;7ce&lt;/li&gt;
&lt;li&gt;tbnb&amp;hellip;j9p &amp;lt;- 0.1 BNB &amp;lt;- tbnb&amp;hellip;7ce&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tbnbcli 執行 HTLT，從 from address 執行 HTLT，給 recipient-addr 0.3 BNB，並預期對方回 0.1 BNB，等待 height-span 個 block 時間(360 &amp;gt; 2 minutes)&lt;/p&gt;
&lt;h3 id=&#34;tbnbcli-key&#34;&gt;tbnbcli key&lt;/h3&gt;
&lt;p&gt;實際執行前，由於我們需要透過 tbnbcli 操作 from-address，要先&lt;a href=&#34;https://docs.binance.org/keys.html&#34;&gt;透過 tbnbcli 把 address 的 key 加進到本地&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli keys add tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce --recover

tbnbcli keys list

NAME:	                                      TYPE:	ADDRESS:						                        PUBKEY:
tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce	local	tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce	bnbp1addwnpepq0pw06d3y7ykg2j33pc604j3awgqgl5vhd88wdjhjg5sptnsfpqyx2rmhl4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;實際執行&#34;&gt;實際執行&lt;/h3&gt;
&lt;p&gt;參數：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FROM ADDR: tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RECIPIENT ADDR: tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hightspan: 3600，height-span 是發起 HTLT，受方 deposit，發起方去 claim 的時限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;amount: asset * 10^8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p 執行 HTLT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;給 tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce 0.3 BNB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;預期對方回 0.1 BNB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等待 3600 個 block 時間&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM_ADDR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p
RECIPIENT_ADDR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce
HEIGHT_SPAN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;

tbnbcli token HTLT &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --recipient-addr &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RECIPIENT_ADDR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --amount 30000000:BNB &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --expected-income 10000000:BNB &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --height-span &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HEIGHT_SPAN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;FROM_ADDR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;產生 swap 的結果，可以於&lt;a href=&#34;https://testnet-explorer.binance.org/tx/8F865C5C9E5CD06239DE99746BCE73AACA2F3AD881C26765FB90C9465EF06EF0&#34;&gt;Testnet Explorer 上看到&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Committed at block &lt;span style=&#34;color:#ae81ff&#34;&gt;47218942&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tx hash: 8F865C5C9E5CD06239DE99746BCE73AACA2F3AD881C26765FB90C9465EF06EF0, response: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Code:0 Data:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;213&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;217&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;194&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;248&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;189&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;188&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;208&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;159&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;188&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;196&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt; 249&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Log:Msg 0: swapID: 4d8a1d33ba41d57d69d90566aac2f895bdbc38d0a65d309fbcc48f6f1f4297f9 Info: GasWanted:0 GasUsed:0 Tags:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; 114&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; 112&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; 116&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; 100&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; 110&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; 84&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}]&lt;/span&gt; Codespace: XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;query-atomic-swap&#34;&gt;Query Atomic Swap&lt;/h3&gt;
&lt;p&gt;產生了 atomic swap，這邊可以使用 tbnbcli 查詢 swap 的狀態&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;SWAP_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4d8a1d33ba41d57d69d90566aac2f895bdbc38d0a65d309fbcc48f6f1f4297f9

tbnbcli token query-swap &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回傳 swap 的狀態&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;out_amount&amp;#34;&lt;/span&gt;:[{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;denom&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;30000000&amp;#34;&lt;/span&gt;}],&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;in_amount&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expected_income&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10000000:BNB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;recipient_other_chain&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number_hash&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4cf88f1acf8bcbc628609f3257406913f67e009e5c61f2671b601e40f4e5cc6a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1572506189&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cross_chain&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expire_height&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;47222542&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2254&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;closed_time&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deposit-htlt&#34;&gt;Deposit HTLT&lt;/h3&gt;
&lt;p&gt;受方 reciept-address 這邊要把 1 BNB 打進去 swap 中&lt;/p&gt;
&lt;p&gt;注意這邊的 from-address 已經變成當初的 recipient-addr tbnb&amp;hellip;j9p&lt;/p&gt;
&lt;p&gt;當然這邊要存取，也要有 tbnb&amp;hellip;j9p 的 key，這樣我們本地就會有發受兩方的 key，但一般來說應該是兩個不同的人&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli keys add tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p--recover

tbnbcli keys list

NAME:	                                      TYPE:	ADDRESS:						                        PUBKEY:
tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce	local	tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce	bnbp1addwnpepq0pw06d3y7ykg2j33pc604j3awgqgl5vhd88wdjhjg5sptnsfpqyx2rmhl4
tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p	local	tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p	bnbp1addwnpepqwk5zx3jnrq5guxc9tsgrte9aw9knla0ahunwynypkm0jvst6y7l2q83ueq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;受方把約好的錢存進去&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token deposit &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --amount 10000000:BNB &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RECIPIENT_ADDR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以成功 deposit，&lt;a href=&#34;https://testnet-explorer.binance.org/tx/FDCC528B9F98E9CEEDCB113A398A747F440666061340535D44C526D79F9CD667&#34;&gt;檢查這次 tx Deposit swap 的內容&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Password to sign with &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#39;&lt;/span&gt;:
Committed at block &lt;span style=&#34;color:#ae81ff&#34;&gt;47219070&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tx hash: FDCC528B9F98E9CEEDCB113A398A747F440666061340535D44C526D79F9CD667, response: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Code:0 Data:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; Log:Msg 0:  Info: GasWanted:0 GasUsed:0 Tags:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; 114&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; 101&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; 116&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; 100&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; 110&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; 84&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}]&lt;/span&gt; Codespace: XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;發起方-claim-htlt&#34;&gt;發起方 Claim HTLT&lt;/h3&gt;
&lt;p&gt;針對每筆 HTLT ，解鎖鎖住的 assets。每個 HTLT 只能被解鎖一次。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token claim &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id  &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --random-number &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RANDOM_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;FROM_ADDR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以成功 claim，&lt;a href=&#34;https://testnet-explorer.binance.org/tx/D08F81D0315F0A7B13E510782F6E56804803B5198F4914C8EB10E3A5084F2BAA&#34;&gt;檢查這次 tx Deposit swap 的內容&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Password to sign with &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&amp;#39;&lt;/span&gt;:
Committed at block &lt;span style=&#34;color:#ae81ff&#34;&gt;47219128&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tx hash: D08F81D0315F0A7B13E510782F6E56804803B5198F4914C8EB10E3A5084F2BAA, response: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Code:0 Data:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; Log:Msg 0:  Info: GasWanted:0 GasUsed:0 Tags:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; 114&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; 100&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; 116&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; 101&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; 114&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; 100&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; 116&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; 112&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; 110&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; 84&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}]&lt;/span&gt; Codespace: XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查詢-swap-狀態&#34;&gt;查詢 swap 狀態&lt;/h3&gt;
&lt;p&gt;從 open 變成 completed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token query-swap &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;out_amount&amp;#34;&lt;/span&gt;:[{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;denom&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;30000000&amp;#34;&lt;/span&gt;}],&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;in_amount&amp;#34;&lt;/span&gt;:[{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;denom&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10000000&amp;#34;&lt;/span&gt;}],&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expected_income&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10000000:BNB&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;recipient_other_chain&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number_hash&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4cf88f1acf8bcbc628609f3257406913f67e009e5c61f2671b601e40f4e5cc6a&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cb5f6296078fd73b86d03eb58bc8a6e0af8d4b60c1cd678b71f8c185e206db53&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1572506189&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cross_chain&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expire_height&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;47222542&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2254&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;closed_time&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1572506323&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Completed&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣 swap 就完成了&lt;/p&gt;
&lt;h3 id=&#34;超時-expired-處理&#34;&gt;超時 (Expired) 處理&lt;/h3&gt;
&lt;p&gt;由於 HTLT 是有時間限制，有可能會超時，會無法繼續操作，例如另外一筆 HTLT 在受方 deposit 時無法 deposit&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token deposit &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --amount 1:BNB &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RECIPIENT_ADDR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ERROR:&lt;/span&gt; {
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;codespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;abci_code&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;524302&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current block height is 46046996, the swap expire height(46043293) is passed&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;超過 swap block height 了，受方這邊逾時去存錢，導致整個 swap expired，不能在做什麼事&lt;/p&gt;
&lt;p&gt;發起方去透過 refund 解鎖&lt;/p&gt;
&lt;h3 id=&#34;refund-htlt&#34;&gt;Refund HTLT&lt;/h3&gt;
&lt;p&gt;若是已經 complete 或是 timeout expired，發起 HTLT 的 address 可以透過 refund 來取回資產&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token refund &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --from &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;FROM_ADDR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回覆 tx 的狀態，&lt;a href=&#34;https://testnet-explorer.binance.org/tx/F0F5AB40EF7B1CCFE54EBAE0B8022E9B3C381D0029C55A8FE7C3C87E8ACF800D&#34;&gt;可以在explorer 上看到&lt;/a&gt;，transaction type 為 refund swap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Committed at block &lt;span style=&#34;color:#ae81ff&#34;&gt;46047771&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
  tx hash: F0F5AB40EF7B1CCFE54EBAE0B8022E9B3C381D0029C55A8FE7C3C87E8ACF800D, 
  response: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Code:0 
    Data:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; 
    Log:Msg 
    0:  
      Info: 
        GasWanted:0 
        GasUsed:0 
        Tags:&lt;span style=&#34;color:#f92672&#34;&gt;[{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; 114&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; 100&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; 116&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; 101&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Key:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; 110&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Value:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; 84&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; XXX_sizecache:0&lt;span style=&#34;color:#f92672&#34;&gt;}]&lt;/span&gt; 
        Codespace: 
          XXX_NoUnkeyedLiteral:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; 
          XXX_unrecognized:&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; 
          XXX_sizecache:0
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重新查詢 swap 狀態，已經變成 expired&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token query-swap &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --swap-id &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SWAP_ID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;out_amount&amp;#34;&lt;/span&gt;: [{
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;denom&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
	}],
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;in_amount&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expected_income&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1:BNB&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;recipient_other_chain&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number_hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2c2588c81a5f08bf55a183cc2d61a123368405638741169933e200c90f4532e5&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1571905650&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cross_chain&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expire_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;46043293&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2239&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;closed_time&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1571908256&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expired&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;from-ethereum-to-binance-chain&#34;&gt;從 Ethereum swap 到 Binance Chain&lt;/h1&gt;
&lt;p&gt;這邊我們要從 ethereum 上，將 ERC-20 token 與 binance chain 上的 BNB 做交換，先準備需要用到的東西&lt;/p&gt;
&lt;h3 id=&#34;binance-testnet&#34;&gt;binance testnet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;準備好 address 與 BNB，這邊沿用我們上篇使用的 address &lt;a href=&#34;https://testnet-explorer.binance.org/address/tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&#34;&gt;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ethereum-testnet-ropsten&#34;&gt;ethereum testnet (ropsten)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Admin Address &lt;a href=&#34;https://ropsten.etherscan.io/address/0x938a452d293c23c2cdeae0bf01760d8ecc4f826b&#34;&gt;[ropsten etherscan]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;部署 ERC20 token &lt;a href=&#34;https://ropsten.etherscan.io/address/0xDec348688B060fB44144971461b3BAaC8BD1e571&#34;&gt;[ropsten etherscan]&lt;/a&gt;，我自己發行的 &lt;a href=&#34;https://ropsten.etherscan.io/token/0xDec348688B060fB44144971461b3BAaC8BD1e571&#34;&gt;Party Parrot Token (PPT)&lt;/a&gt; &lt;img src=&#34;https://cultofthepartyparrot.com/parrots/hd/parrot.gif&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;部署 ERC20 Atomic Swapper 智能合約
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chechiachang/bep3-smartcontracts&#34;&gt;binance-chain/bep3-smartcontract&lt;/a&gt; 提供&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nodevm&#34;&gt;Node/VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來執行 bep3 deputy process
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/binance-chain/bep3-deputy&#34;&gt;https://github.com/binance-chain/bep3-deputy&lt;/a&gt; 提供&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;workflow&#34;&gt;workflow&lt;/h3&gt;
&lt;p&gt;我們看一下官方提供的這張圖&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.binance.org/assets/eth2bnc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wallet Address 在 ERC20 Token (PPToken) approve() Swap Contract 一部分 Token&lt;/li&gt;
&lt;li&gt;初始化 Swap Transaction(tx)&lt;/li&gt;
&lt;li&gt;Deputy 監測到 Ethereum 鏈上的 swap tx，向 Binance Chain 發起一個對應的 HTLT tx，等待 Binance 上的 claim tx&lt;/li&gt;
&lt;li&gt;Wallet Address 向 Binance Chain 執行 HTLT claim()&lt;/li&gt;
&lt;li&gt;Deputy 監測到 Binance Chain 上的 claim tx 與 swap complete，代為向 Ethereum claim ERC-20&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;執行-deputy&#34;&gt;執行 deputy&lt;/h3&gt;
&lt;p&gt;我們可以先將 deputy 程序跑起來，這邊使用的是 &lt;a href=&#34;https://github.com/binance-chain/bep3-deputy&#34;&gt;Binance Chaing/bep3-deputy&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/binance-chain/bep3-deputy
cd &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GOPATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/src/github.com/binance-chain/bep3-deputy

$ go mod download
$ make build
go build  -o build/deputy main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;啟動本地 MySQL，這邊直接用 docker 起一個無密碼的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run \
  --name some-mysql \
  -e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
  -e MYSQL_DATABASE=deputy \
  -d \
  mysql:5.7.27
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;設定 config/confg.json&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;db_config&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dialect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;db_path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root:@(localhost:3306)/deputy?charset=utf8&amp;amp;parseTime=True&amp;amp;loc=Local&amp;#34;&lt;/span&gt;,
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;chain_config&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bnb_start_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;42516056&lt;/span&gt;,

    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other_chain&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ETH&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other_chain_start_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6495598&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;admin_config&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;listen_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bnb_config&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mnemonic&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mnemonic&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;my-mnemonic&amp;gt;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;rpc_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp://data-seed-pre-0-s1.binance.org:80&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;symbol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;deputy_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fetch_interval&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eth_config&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;swap_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;erc20_swap&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key_type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;private_key&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;private_key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;my-private-key&amp;gt;&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;provider&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ropsten.infura.io/v3/cd9643b1870b489b93477921cb767882&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;swap_contract_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0xA08E0F38462eCd107adE62Ee3004850f2448f3d6&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;token_contract_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0xDec348688B060fB44144971461b3BAaC8BD1e571&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;deputy_addr&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gas_limit&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;300000&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gas_price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20000000000&lt;/span&gt;,
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這樣注意幾個地方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db_config 填上 mysql url，有設密碼的話一併帶入&lt;/li&gt;
&lt;li&gt;chain_config.bnb_start_height 可以先追到目前的 block height，畢竟我們的 swap tx 都在 deputy 起來之後才會產生，可以跳過啟動時 sync block 的時間。如果是要追過去的 tx，就要調整 block 的高度，並且給予足夠的時間上 deputy 去 sync block。可以到 &lt;a href=&#34;https://testnet-explorer.binance.org/&#34;&gt;testnet-explorer&lt;/a&gt; 查目前的 block height。&lt;/li&gt;
&lt;li&gt;chain_config.other_chain_start_height 也追到最新的 eth block height，可以到 &lt;a href=&#34;https://ropsten.etherscan.io/&#34;&gt;Etherscan&lt;/a&gt; 查目前的 block height&lt;/li&gt;
&lt;li&gt;bnb_config 填上 bnb addr 與助記祠&lt;/li&gt;
&lt;li&gt;eth_config 填上 eth addr 與 private key&lt;/li&gt;
&lt;li&gt;eth_config.deupty_addr 使用 Admin addr，並填上 private key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把 deputy 以 testnet 為目標執行起來&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./build/deputy --help

./build/deputy &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --bnb-network &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --config-type local &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --config-path config/config.json

2019-10-25 17:16:48 DEBUG Debug sent a request
2019-10-25 17:16:48 INFO fetch ETH cur height: &lt;span style=&#34;color:#ae81ff&#34;&gt;6641795&lt;/span&gt;
2019-10-25 17:16:48 DEBUG Debug sent a request
2019-10-25 17:16:48 DEBUG Debug sent a request
2019-10-25 17:16:48 INFO fetch BNB cur height: &lt;span style=&#34;color:#ae81ff&#34;&gt;46215517&lt;/span&gt;
2019-10-25 17:16:48 DEBUG Debug sent a request
2019-10-25 17:16:48 INFO fetch try to get ahead block, chain&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BNB, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46215518&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;deputy 啟動後，就會依據 db 中的 block 資料，開始一路追 block，發現是相關的 addr 就把 tx 拉下來處理。&lt;/p&gt;
&lt;p&gt;由於我們這邊是新 db，我們又直接跳到最新的 block，應該不會需要太多時間就能追上。&lt;/p&gt;
&lt;p&gt;deputy 有 admin api 可以使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl http://localhost:8080

curl http://localhost:8080/failed_swaps/1
the number of total failed swaps is 0, the offset of query is &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

curl http://localhost:8080/status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mode&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NormalMode&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bnb_chain_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;46215719&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bnb_sync_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;46215718&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other_chain_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6641804&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other_chain_sync_height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6641804&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bnb_chain_last_block_fetched_at&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-25T17:18:52+08:00&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other_chain_last_block_fetched_at&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2019-10-25T17:18:40+08:00&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bnb_status&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;: [
            {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;symbol&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;free&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;18.99812504&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;locked&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.00000000&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;frozen&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.00000000&amp;#34;&lt;/span&gt;
            }
        ]
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;other_chain_status&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allowance&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9.8e+13&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;erc20_balance&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9.999999969e+20&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;eth_balance&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6.982922764&amp;#34;&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 deputy 上設定的 bnb_addr, eth_addr 的狀態&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;other_chain_status.allowance: 9.8e+13&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;開始-swap&#34;&gt;開始 Swap&lt;/h1&gt;
&lt;p&gt;複習一下流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.binance.org/assets/eth2bnc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;部署好 swap contract &amp;amp; deputy，啟動 deputy process&lt;/li&gt;
&lt;li&gt;Wallet Address 在 ERC20 Token (PPToken) approve()，給 Swap Contract 一部分 Token&lt;/li&gt;
&lt;li&gt;初始化 Swap Transaction(tx)&lt;/li&gt;
&lt;li&gt;Deputy 監測到 Ethereum 鏈上的 swap tx，向 Binance Chain 發起一個對應的 HTLT tx，等待 Binance 上的 claim tx&lt;/li&gt;
&lt;li&gt;Wallet Address 向 Binance Chain 執行 HTLT claim()&lt;/li&gt;
&lt;li&gt;Deputy 監測到 Binance Chain 上的 claim tx 與 swap complete，代為向 Ethereum claim ERC-20&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;erc20-contract-approve&#34;&gt;ERC20 contract Approve()&lt;/h3&gt;
&lt;p&gt;到 ERC20 contract 的頁面，選擇 approve&lt;/p&gt;
&lt;p&gt;spender: swap contract address
value: 10000 PPToken (乘上 10^18)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ropsten.etherscan.io/address/0xdec348688b060fb44144971461b3baac8bd1e571#events&#34;&gt;到 etherscan 上查看&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;call-htlt-function&#34;&gt;Call HTLT function&lt;/h3&gt;
&lt;p&gt;Go to swap contract，call  htlt()&lt;/p&gt;
&lt;p&gt;用 etherscan 送上去，然後就壞掉了，&lt;a href=&#34;https://ropsten.etherscan.io/tx/0xbd0c829ad2466fcd6e49a12bbac1849827fb9e7a251271816401ed4c9bfe2fa8&#34;&gt;Etherscan 上壞掉的 tx&lt;/a&gt; 不知為什麼 QAQ&lt;/p&gt;
&lt;p&gt;


  




&lt;figure&gt;

&lt;img src=&#34;https://chechia.net/img/bep3-atomic-swap-failure-01.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34; &gt;


&lt;/figure&gt;




  




&lt;figure&gt;

&lt;img src=&#34;https://chechia.net/img/bep3-atomic-swap-failure-02.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34; &gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;開 remix IDE，重新嘗試參數&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;randomNumberHash:
&lt;ul&gt;
&lt;li&gt;SHA256(randomNumber||timestamp), randomNumber is 32-length random byte array.&lt;/li&gt;
&lt;li&gt;0x0000000000000000000000000000000000000000000000000000000000000000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;timestamp:
&lt;ul&gt;
&lt;li&gt;it should be about 10 mins span around current timestamp. &lt;a href=&#34;https://www.unixtimestamp.com/&#34;&gt;unix timestamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1572250902 (now + 60 sec * 10 min)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;heightSpan:
&lt;ul&gt;
&lt;li&gt;it&amp;rsquo;s a customized filed for deputy operator. it should be more than 200 for this deputy.&lt;/li&gt;
&lt;li&gt;10000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;recipientAddr:
&lt;ul&gt;
&lt;li&gt;deputy address on Ethereum.&lt;/li&gt;
&lt;li&gt;0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bep2SenderAddr:
&lt;ul&gt;
&lt;li&gt;omit this field with 0x0&lt;/li&gt;
&lt;li&gt;0x0000000000000000000000000000000000000000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bep2RecipientAddr:
&lt;ul&gt;
&lt;li&gt;Decode your testnet address from bech32 encoded to hex&lt;/li&gt;
&lt;li&gt;0xee82ca237387495e9603f4d8d7efed128bdd59a6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;outAmount:
&lt;ul&gt;
&lt;li&gt;approved amount, should be bumped by e^10.&lt;/li&gt;
&lt;li&gt;10 0000000000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bep2Amount:
&lt;ul&gt;
&lt;li&gt;outAmount * exchange rate, the default rate is 1.&lt;/li&gt;
&lt;li&gt;10 0000000000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deputy-call-htlt-on-binance-chain&#34;&gt;Deputy Call HTLT on Binance Chain&lt;/h3&gt;
&lt;p&gt;Deputy 監測 Ethereum 上的 block 狀態，特別是會取得 Swap contract address 的 swap tx，並在 Binance Chain 上產生對應的 HTLT。&lt;/p&gt;
&lt;h3 id=&#34;claim-htlt-on-binance-chain&#34;&gt;Claim HTLT on Binance Chain&lt;/h3&gt;
&lt;p&gt;Binance Chain 上產生 HTLT 後，客戶端這邊可以使用 tbnb 以 recipient addr 查詢 Binance Chain 上的 Swap ID&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tbnbcli token query-swapIDs-by-recipient  &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --recipient-addr tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --chain-id Binance-Chain-Nile &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --trust-node &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;獲得過去產生的 swap list&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c2be98ac3b9ee7153e5ba84edfefca1917b6e2ec72d2576bf6cce584cbd6095e&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;18c938b994c62bcce9e8cedcb426a603863d95565a246c323a1df89d5c4226c1&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5c4fdd60ce44fa4be6de70e65df3f8295df88178fd381b4242a8c2d047663a1b&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a47c89dfca910cbb34dec92acebebb59d2c62e7f90bf216a87c2c23c84e48d4f&amp;#34;&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;都是過去使用的 swap id，如果都沒有新的 swap 出來，可能是 height span 太高，導致一直都爬不到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SWAP_ID=c2be98ac3b9ee7153e5ba84edfefca1917b6e2ec72d2576bf6cce584cbd6095e
tbnbcli token query-swap \
  --swap-id ${SWAP_ID} \
  --chain-id Binance-Chain-Nile \
  --trust-node \
  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊要對一下 random number, to wallet addr, out amount 等參數，如果 HTLT 符合，客戶就可以執行 Claim HTLT&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tbnbcli token claim \
  --swap-id ${SWAP_ID} \
  --random-number ${RANDOM_NUMBER} \
  --from ${FROM_KEY} \
  --chain-id Binance-Chain-Nile \
  --trust-node \
  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;deputy-claim-erc20-token&#34;&gt;Deputy Claim ERC20 Token&lt;/h3&gt;
&lt;p&gt;客戶端在 Binance Chain 上 Claim HTLT，Deputy 在 Ethereuem 上 Claim HTLT，至此完成 Atomic Swap 兩邊的流程。客戶端從 Binance Chain Claim，Deputy 從 Ethereuem 上 Claim。完整流程
如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client Call HTLT on Ethereum -&amp;gt; Deputy Call HTLT on Binance Chain&lt;/li&gt;
&lt;li&gt;Client Check HTLT Status on Binance Chain&lt;/li&gt;
&lt;li&gt;Client Call Claim HTLT on Binance Chain -&amp;gt; Deputy Call Claim HTLT on Ethereum&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;client-app-javascript-demo&#34;&gt;Client APP javascript Demo&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.binance.org/atomic-swap.html#6-demo-for-client-app-swap-erc20-to-bep2&#34;&gt;希望直接寫成 javascript app 可以參考這篇&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;from-binance-chaing-to-ethereum&#34;&gt;Swap Tokens from Binance Chain to Ethereum&lt;/h1&gt;
&lt;p&gt;這邊進行反向操作，客戶發起從 Binance Chain 換到 Ethereum 上的請求，Deputy 做對應的處理，把 Token Swap 到 Ethereum。我們依樣依照&lt;a href=&#34;https://docs.binance.org/atomic-swap.html#swap-tokens-from-binance-chain-to-ethereum&#34;&gt;這份文件&lt;/a&gt;操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客戶端在 Binance Chain 上 Call HTLT()&lt;/li&gt;
&lt;li&gt;Deputy 在 Ethereum 上 Init Swap tx&lt;/li&gt;
&lt;li&gt;Deputy Call Approve() 到 ethereum swap contract&lt;/li&gt;
&lt;li&gt;客戶端取得 swap 資訊&lt;/li&gt;
&lt;li&gt;客戶端在 Ethereum 上 Call Claim()，取得 ERC-20 Token&lt;/li&gt;
&lt;li&gt;Deputy 在 Binance 上 Call Claim()，取得 Binance Chain Token&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;在-binance-chain-上-htlt&#34;&gt;在 Binance Chain 上 HTLT&lt;/h3&gt;
&lt;p&gt;客戶端發起 HTLT 請求，需要從客戶端 Wallet 送出（但因為我們這邊只使用一個 Binance Address，所以發起的 Addr 跟 Deputy Binance addr 是一樣的。&lt;/p&gt;
&lt;p&gt;這邊鎖進 10:BNB，等待 100:PPT 從 ethereum 近來&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEPUTY_BNB_WALLET_ADDR=tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce
CLIENT_BNB_WALLET_ADDR=${DEPUTY_BNB_WALLET_ADDR}
CLIENT_ETHEREUM_ADDR=0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b

tbnbcli token HTLT \
  --from ${CLIENT_BNB_WALLET_ADDR} \
  --recipient-addr ${DEPUTY_BNB_WALLET_ADDR}  \
  --chain-id Binance-Chain-Nile  \
  --height-span 500 \
  --amount  10:BNB  \
  --expected-income 100:PPT  \
  --recipient-other-chain ${CLIENT_ETHEREUM_ADDR}  \
  --cross-chain \
  --trust-node \
  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HTLT 回復的結果如下，可以在&lt;a href=&#34;https://testnet-explorer.binance.org/tx/D653FC7B5D2048A2A165F49426CDCAD733703CF534367133819091892E3A1F14&#34;&gt;Binance Testnet Explorer&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Random number: 75267ba4cc4f2d9ddbf9f90dc1ea813ae2a4d2114eb2ef2cb7ff0a5d285c7396
Timestamp: 1572337686
Random number hash: dabd990af86582969d47218012ecdb09899b9ad2b069c05be94ef82bea889a1b
Password to sign with &#39;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&#39;:
Committed at block 46889130 (tx hash: D653FC7B5D2048A2A165F49426CDCAD733703CF534367133819091892E3A1F14, response: {Code:0 Data:[119 24 196 176 181 1 29 177 60 107 100 166 55 16 253 136 159 3 204 56 109 46 63 87 93 9 239 158 138 172 21 129] Log:Msg 0: swapID: 7718c4b0b5011db13c6b64a63710fd889f03cc386d2e3f575d09ef9e8aac1581 Info: GasWanted:0 GasUsed:0 Tags:[{Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 97 54 112 118 53 103 109 110 115 97 121 52 97 57 115 114 55 110 118 100 48 109 108 100 122 50 57 97 54 107 100 120 121 101 51 55 99 101] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[97 99 116 105 111 110] Value:[72 84 76 84] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}] Codespace: XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取得 swap id 與 random number，使用 swap ip 查詢&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SWAP_ID=7718c4b0b5011db13c6b64a63710fd889f03cc386d2e3f575d09ef9e8aac1581
tbnbcli token query-swap \
  --swap-id ${SWAP_ID} \
  --chain-id Binance-Chain-Nile \
  --trust-node \
  --node http://data-seed-pre-0-s3.binance.org:80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;回復當前的狀態&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;out_amount&amp;#34;&lt;/span&gt;:[
      {
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;denom&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BNB&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
      }
   ],
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;in_amount&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expected_income&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100:PPT&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;recipient_other_chain&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number_hash&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dabd990af86582969d47218012ecdb09899b9ad2b069c05be94ef82bea889a1b&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;random_number&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1572337686&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cross_chain&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expire_height&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;46889630&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2245&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;closed_time&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deputy-appove-token&#34;&gt;Deputy Appove Token&lt;/h3&gt;
&lt;p&gt;Deputy 已經抓到 Binance Chain 上的 tx，會記錄在 Mysql 內&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use deputy;

select * from tx_log limit 10;

| id | chain | swap_id                                                          | tx_type   | tx_hash                                                          | contract_addr | sender_addr                                 | receiver_addr                               | sender_other_chain                         | other_chain_addr                           | in_amount | out_amount | out_coin | random_number_hash                                               | expire_height | timestamp  | random_number | block_hash                                                       | height   | status    | confirmed_num | create_time | update_time |
|  2 | BNB   | 7718c4b0b5011db13c6b64a63710fd889f03cc386d2e3f575d09ef9e8aac1581 | BEP2_HTLT | d653fc7b5d2048a2a165f49426cdcad733703cf534367133819091892e3a1f14 |               | tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce | tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce |                                            | 0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b | 100:PPT   | 10         | BNB      | dabd990af86582969d47218012ecdb09899b9ad2b069c05be94ef82bea889a1b |      46889630 | 1572337686 |               | 6948f34e4013da29c9922306b60b2c12f174925c63ff2a46d6b2fc3acd7a3774 | 46889130 | CONFIRMED |             6 |  1572337694 |  1572337695 |
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;deputy-send-htlt-on-ethereum&#34;&gt;Deputy Send HTLT on Ethereum&lt;/h3&gt;
&lt;p&gt;查詢 Ethereum 上的 HTLT&lt;/p&gt;
&lt;h3 id=&#34;客戶端-call-claim-取得-erc-20-token&#34;&gt;客戶端 Call Claim 取得 ERC-20 Token&lt;/h3&gt;
&lt;p&gt;客戶端取得 100:PPT&lt;/p&gt;
&lt;h3 id=&#34;deputy-call-htlt-claim-取得-binance-token&#34;&gt;Deputy Call HTLT Claim 取得 Binance Token&lt;/h3&gt;
&lt;p&gt;Deputy 取得 10:BNB&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;gce&#34;&gt;GCE&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gcloud compute ssh dep3-deputy

sudo apt-get update
sudo apt-get install mysql-server
sudo cat /etc/mysql/debian.cnf

wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz
export PATH=$PATH:/usr/local/go/bin

go get github.com/binance-chain/bep3-deputy
go mod tidy
go build  -o build/deputy main.go
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.binance.org/atomic-swap.html&#34;&gt;Binace Chain Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/binance-chain/BEPs/blob/master/BEP3.md&#34;&gt;Binance BEP3 spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Custom Resources with Operator SDK</title>
      <link>https://chechia.net/post/kubernetes-custom-resource-with-operator-sdk/</link>
      <pubDate>Tue, 15 Oct 2019 17:28:12 +0800</pubDate>
      
      <guid>https://chechia.net/post/kubernetes-custom-resource-with-operator-sdk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;超簡短推坑 oeprator-sdk&lt;/li&gt;
&lt;li&gt;鐵人賽心得&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;承上&#34;&gt;承上&lt;/h1&gt;
&lt;p&gt;上篇介紹了 crd 與 controller，然而沒有說明 controller 的編寫與操作，因為 controller 的部分比較複雜，我們鐵人挑戰賽尾聲，篇幅說實在是不太夠。&lt;/p&gt;
&lt;p&gt;有興趣詳細了解的大德，請參考相同鐵人挑戰團隊的隊友文章，裏頭對 controller 有詳細介紹，這邊就不贅述。直接提供個人使用覺得最簡單上手的 &lt;a href=&#34;https://github.com/operator-framework/operator-sdk&#34;&gt;operator sdk&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;operator-sdk&#34;&gt;Operator SDK&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/operator-framework/operator-sdk&#34;&gt;Operator SDK&lt;/a&gt; 是 &lt;a href=&#34;https://github.com/operator-framework&#34;&gt;Operator framework&lt;/a&gt; 中的一部分，能有效且自動化的管理 kubernetes native apps, operator 的管理工具。&lt;/p&gt;
&lt;p&gt;複雜的 kubernetes application 是非常難管理的，寫 operator 也是很有挑戰，不僅要處理大量 kubernetes 底層的 API，要寫很多樣版。 operator SDK 使用 controller-runtime 的 library 讓編寫 native application 變得簡單許多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用上層的 API 與抽象來編寫 operator 邏輯&lt;/li&gt;
&lt;li&gt;快速使用 code generation&lt;/li&gt;
&lt;li&gt;有擴充套件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;workflow&#34;&gt;Workflow&lt;/h1&gt;
&lt;p&gt;這邊以 golang 為例說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 operator sdk&lt;/li&gt;
&lt;li&gt;定義新的 API resource (custom resource definition)&lt;/li&gt;
&lt;li&gt;定義 controller 來監測 custom resource&lt;/li&gt;
&lt;li&gt;編寫 reconciling 邏輯來 sync desired state 與 current state&lt;/li&gt;
&lt;li&gt;使用 sdk cli 進行測試&lt;/li&gt;
&lt;li&gt;使用 sdk cli 來 build，並產生部屬用的 manifests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安裝請依照 &lt;a href=&#34;https://github.com/operator-framework/operator-sdk/blob/master/doc/user/install-operator-sdk.md&#34;&gt;安裝說明&lt;/a&gt; 操作即可。&lt;/p&gt;
&lt;p&gt;這邊使用 sdk cli 來增加新的 crd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Add a new API for the custom resource AppService
$ operator-sdk add api --api-version=app.example.com/v1alpha1 --kind=AppService
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;產生的 go 源碼會放在 pkg 中，可以依自己需求調整 crd 的結構&lt;/p&gt;
&lt;p&gt;這邊使用 sdk cli 產生對應 crd 的 controller，裏頭已經寫好大部分的 code gene 與 reconcile 的樣板，直接修改就可使用，非常方便&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Add a new controller that watches for AppService
$ operator-sdk add controller --api-version=app.example.com/v1alpha1 --kind=AppService
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改完，直接使用 sdk cli build 成 image，然後推到 image hub 上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Build and push the app-operator image to a public registry such as quay.io
$ operator-sdk build quay.io/example/app-operator
$ docker push quay.io/example/app-operator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部屬前檢查一下 manefests 檔案，特別是 crd.yaml 與 operator.yaml，如果源碼有調整記得做對應的修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Setup Service Account
$ kubectl create -f deploy/service_account.yaml

# Setup RBAC
$ kubectl create -f deploy/role.yaml
$ kubectl create -f deploy/role_binding.yaml

# Setup the CRD
$ kubectl create -f deploy/crds/app.example.com_appservices_crd.yaml

# Deploy the app-operator
$ kubectl create -f deploy/operator.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣便部屬了 operator，operator 會監看指定的 custom resource，並依照 controller 的邏輯進行 reconcile。&lt;/p&gt;
&lt;p&gt;這邊以增加 custom resource 為例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Create an AppService CR
# The default controller will watch for AppService objects and create a pod for each CR
$ kubectl create -f deploy/crds/app.example.com_v1alpha1_appservice_cr.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;增加一個 cr 到 kubernetes 上，這時 operator 會偵測到 cr 的變化，並且依照 reconcile 的邏輯 sync&lt;/p&gt;
&lt;p&gt;檢查一下 cr 與 operator 的狀態&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Verify that a pod is created
$ kubectl get pod -l app=example-appservice
NAME                     READY     STATUS    RESTARTS   AGE
example-appservice-pod   1/1       Running   0          1m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;詳細的操作步驟可以看 &lt;a href=&#34;https://github.com/operator-framework/getting-started/blob/master/README.md&#34;&gt;這邊&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;p&gt;事實上，operator sdk 的功能還有非常多，細講又要花好幾篇文章講，之後有機會會放在我的個人網站上。&lt;/p&gt;
&lt;p&gt;另外 operator sdk 也歡迎外部的 Issue 與 PR，團隊的人非常 nice 會願意花時間跟社群朋友溝通，有興趣請來 contribute。&lt;/p&gt;
&lt;p&gt;這系列鐵人文章，說實在沒有什麼很深入的技術討論，多半資料都是各個項目的官方文件翻譯，加上一些個人的經驗與解讀，並不是含金量很高的文章。然而我個人在接觸這些項目時，卻往往因為找不到細節操作的步驟分享文章，在許多小細節上撞牆很久，也因此才有了這系列文章。&lt;/p&gt;
&lt;p&gt;這系列文就只是踩雷之旅，讓後人如果有用到這些文章，生活能過得開心一點，這 30 天的時間就有了價值。&lt;/p&gt;
&lt;p&gt;鐵人挑戰賽的最後一天，感謝各路大德一路相隨，讓我在假日也能心甘情願地坐下來寫文章。游於藝天一篇真的很逼人，有幾天的文章品質是有蠻多問題的，也感謝大德們協助捉錯，給予很多建議。&lt;/p&gt;
&lt;p&gt;謝謝各位。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Custom Resource Deployment</title>
      <link>https://chechia.net/post/kubernetes-custom-resource-deployment/</link>
      <pubDate>Sun, 13 Oct 2019 22:03:08 +0800</pubDate>
      
      <guid>https://chechia.net/post/kubernetes-custom-resource-deployment/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CRD 內容&lt;/li&gt;
&lt;li&gt;Deploy CRD&lt;/li&gt;
&lt;li&gt;Use custom resource&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;recap&#34;&gt;Recap&lt;/h1&gt;
&lt;p&gt;在上次的 cert-manager 內容中我們走過 cert-manager 的安裝步驟，其中有一個步驟是 apply cert-manager 的 manigests 檔案 &lt;code&gt;*.yaml&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jetstack/cert-manager/tree/release-0.11/deploy/manifests&#34;&gt;https://github.com/jetstack/cert-manager/tree/release-0.11/deploy/manifests&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/jetstack/cert-manager
$ git checkout release-0.11
$ ls deploy/manifest

00-crds.yaml
01-namespace.yaml
BUILD.bazel	
README.md	
helm-values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們快速看一下這個 00-crds.yaml，這個 yaml 非常長，直接&lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/release-0.11/deploy/manifests/00-crds.yaml#L1786&#34;&gt;跳到 certificates.certmanager.k8s.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;希望看 golang 源碼文件的話，可以搭配&lt;a href=&#34;https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions#CustomResourceDefinitionSpec&#34;&gt;godoc.org/k8s.io/apiextensions&lt;/a&gt; 來閱讀，更能理解 definition。&lt;/p&gt;
&lt;p&gt;在看之前先注意幾件事，CRD 內除了 schema 外，還定義了許多不同情境的使用資料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CRD 內定義了 custom resource 的資料儲存 .spec.validation.openAPIV3Schema，使用 custom resource 會透過 validator 驗證&lt;/li&gt;
&lt;li&gt;.openAPIV3Schema 內定義了 .spec，以及 rumtime 中紀錄 .status 的資料
&lt;ul&gt;
&lt;li&gt;controller 可以把狀態 sync 到 custom resource 的 .status 中紀錄&lt;/li&gt;
&lt;li&gt;controller 可以比對 .spec 與 .status 來決定是否要 sync 以及如何 sync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRD 內定義了與 server 以及 client 互動的方式，
&lt;ul&gt;
&lt;li&gt;names 中定義各種使用情境的 custom resource 名稱&lt;/li&gt;
&lt;li&gt;additionalPrinterColumns 中添加 kubectl 中的顯示內容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// 這邊使用的是 v1beta1 的 API (deprecated at v1.16) ，新版開發建議使用 apiextension.k8s.io/v1 的 api
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: certificates.cert-manager.io
spec:
  // 使用 kubectl 會額外顯示的資訊內容，透過 jsonpath 去 parse 顯示
  additionalPrinterColumns:
  - JSONPath: .status.conditions[?(@.type==&amp;quot;Ready&amp;quot;)].status
    name: Ready
    type: string
  - JSONPath: .spec.secretName
    name: Secret
    type: string
  - JSONPath: .spec.issuerRef.name
    name: Issuer
    priority: 1
    type: string
  - JSONPath: .status.conditions[?(@.type==&amp;quot;Ready&amp;quot;)].message
    name: Status
    priority: 1
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: CreationTimestamp is a timestamp representing the server time when
      this object was created. It is not guaranteed to be set in happens-before order
      across separate operations. Clients may not set this value. It is represented
      in RFC3339 form and is in UTC.
    name: Age
    type: date
  group: cert-manager.io
  // 定義 CRD 在不同情境下使用的名稱
  names:
    kind: Certificate
    listKind: CertificateList
    plural: certificates
    shortNames:
    - cert
    - certs
    singular: certificate
  scope: Namespaced
  subresources:
    status: {}
  validation:
    // openAPIV3Schema 中是 custom resource 實際操作會使用的內容
    // properties 使用 . .description .type ，分別定義名稱，描述，檢查型別
    openAPIV3Schema:
      description: Certificate is a type to represent a Certificate from ACME
      properties:
        apiVersion:
          description: &#39;APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources&#39;
          type: string
        kind:
          description: &#39;Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds&#39;
          type: string
        // custom resource runtime 中的 metadata
        metadata:
          type: object
        // custom resource 使用時的 spec，定義 custom resoure 的 desired status
        spec:
          ...
        // custom controller 監測 custom resource 的 current status，這邊的資料完全視 controller 實作來產生，如果沒有實作 sync status，也可以沒有資料
        status:
          ...
      type: object
  // 這個是 CRD 物件的 version，可以定義多個不同 version 的 CRD，調用時需要註明版本
  version: v1alpha2
  versions:
  - name: v1alpha2
    served: true
    storage: true
// 這個是 CRD 物件的 status，描述 CRD 部署到 API server 的狀態，例如 CRD 儲存適用 configmap 的儲存空間，這邊顯示在 API server 上的儲存狀態。不要跟 custom resource 的 status 弄混了
status:
  acceptedNames:
    kind: &amp;quot;&amp;quot;
    plural: &amp;quot;&amp;quot;
  conditions: []
  storedVersions: []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;helm-values.yaml 與 01-namespace.yaml 很單純，前者是使用 helm 部署的可設定參數，預設只有 kubernetes resources，後者則是為之後的 cert-manager 元件新增一個 kubernetes namespace。&lt;/p&gt;
&lt;h1 id=&#34;小結-crd-內容-apiextensionsv1beta1&#34;&gt;小結 CRD 內容 (apiextensions/v1beta1)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CRD 顯示名稱，內容&lt;/li&gt;
&lt;li&gt;CRD spec 驗證
&lt;ul&gt;
&lt;li&gt;custom resource&lt;/li&gt;
&lt;li&gt;custom resource schema&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRD 自身部署狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;部署&#34;&gt;部署&lt;/h1&gt;
&lt;p&gt;部署相較定義本身就非常簡單，直接 kubectl apply 到 kubernetes 上&lt;/p&gt;
&lt;h1 id=&#34;使用-custom-resource&#34;&gt;使用 custom resource&lt;/h1&gt;
&lt;p&gt;有了 CRD，我們便可以使用 CRUD API，互動模式與其他 build-in kubernetes resources 相同，只是內容會照 CRD 上的定義調整&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get certificates.certmanager.k8s.io
kubectl get certificates
kubectl get certs --all-namespaces
kubectl get cert -n cert-manager

NAMESPACE          NAME                READY   SECRET              AGE
cert-manager       ingress-nginx-tls   True    ingress-nginx-tls   221d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊看到的內容可能會有些落差，因為我當初用的版本比較舊，但內容大同小異。&lt;/p&gt;
&lt;p&gt;底下的 describe 內容已經跟上面的 CRD 版本差太多，對不起來了。但我也懶得再佈一組，還要重做 dnsName 與 authotization challenge&lt;/p&gt;
&lt;p&gt;直接讓大家感受一下舊版的內容XD&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl describe cert ingress-nginx-tls

Name:         ingress-nginx-tls
Namespace:    cert-manager
API Version:  certmanager.k8s.io/v1alpha1
Kind:         Certificate
Metadata:
  Creation Timestamp:  2019-03-06T06:48:26Z
  Generation:          4
  Owner References:
    API Version:           extensions/v1beta1
    Block Owner Deletion:  true
    Controller:            true
    Kind:                  Ingress
    Name:                  ingress-nginx
  Self Link:               /apis/certmanager.k8s.io/v1alpha1/namespaces/default/certificates/ingress-nginx-tls
Spec:
  Acme:
    Config:
      Domains:
        chechiachang.com
      Http 01:
        Ingress:
        Ingress Class:  nginx
  Dns Names:
    chechiachang.com
  Issuer Ref:
    Kind:       ClusterIssuer
    Name:       letsencrypt-prod
  Secret Name:  ingress-nginx-tls
// 當前的 status，controller sync 上來
// controller 會比對 .spec 與 .status，判斷是否需要做事，ex. renew
Status:
  Acme:
    Order:
      URL:  https://acme-v02.api.letsencrypt.org/acme/order/*
  Conditions:
    Last Transition Time:  2019-09-02T03:52:03Z
    Message:               Certificate renewed successfully
    Reason:                CertRenewed
    Status:                True
    Type:                  Ready
    Last Transition Time:  2019-09-02T03:52:01Z
    Message:               Order validated
    Reason:                OrderValidated
    Status:                False
    Type:                  ValidateFailed
Events:                    &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;想要新增，可以回去看 &lt;a href=&#34;https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html#verifying-the-installation&#34;&gt;cert-manager tutorial&lt;/a&gt;，這個是新版的文件&lt;/p&gt;
&lt;p&gt;當然，不爽這個 cert resource 也可以幹掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl delete cert ingress-nginx-tls -n cert-manager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡介 CRD 與 CRD 內容&lt;/li&gt;
&lt;li&gt;操作 custom resource&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Custom Resources Basic</title>
      <link>https://chechia.net/post/kubernetes-custom-resources-basic/</link>
      <pubDate>Sun, 13 Oct 2019 17:28:12 +0800</pubDate>
      
      <guid>https://chechia.net/post/kubernetes-custom-resources-basic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;custom resources&lt;/li&gt;
&lt;li&gt;custom controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;簡介-custom-resources&#34;&gt;簡介 custom resources&lt;/h1&gt;
&lt;p&gt;Kubernetes 預先定義許多 resource ，這些 resource 是 &lt;a href=&#34;https://kubernetes.io/docs/reference/using-api/api-overview/&#34;&gt;kubernetes API&lt;/a&gt; 預先設置的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/&#34;&gt;API objects&lt;/a&gt;，例如 kubernetes pods resource 包含許多 pods 物件。&lt;/p&gt;
&lt;p&gt;Custom resoure 則是透過擴充 kubernetes API ，讓自定義的物件也可以在 kubernetes 上使用。上篇 cert-manager 就使用了許多 custom resource，這些 resource 在一般安裝的 kubernetes 上沒有安裝，需要安裝 custom resource difinition，向 kubernetes cluster 定義新的 custom resource。例如 certificates.certmanager.k8s.io 就是 cert-manager 自定義的資源，用來代表產生 x509 certificate 的內容。&lt;/p&gt;
&lt;p&gt;越來越多的 kubernetes core 方法，如今也使用 custom resources 來定義，讓 kubernetes 核心元件更加模組化。&lt;/p&gt;
&lt;p&gt;custom resource 可以在運行中的 kubernetes 集群中註冊 (registration) ，也可以動態註銷，custom resource 並不會影響集群本身的運作。只要向 kubernetes 註冊完 custom resource，就可以透過 API 與 kubectl 控制 custom resource，就像操作 Pod resource 一樣。&lt;/p&gt;
&lt;h1 id=&#34;custom-controllers&#34;&gt;Custom controllers&lt;/h1&gt;
&lt;p&gt;custom resource 一但註冊，就可以依據 resource 的 CRD (custom resource definition) 來操作，因次可以儲存客製化的資料內容。然而在很多情形，我們並不只要 custom resource 來讀寫，而是希望 custom resource 能執行定義的工作，如同 Pod resource 可以在 kubernetes 集群上控制 Pod，在 Pod resource 上描述的 desired state kubernetes 會透過定義在 Pod API 中的 sync 邏輯，來達到 current state 與 desired state 的平衡。&lt;/p&gt;
&lt;p&gt;我們希望 custom resource 也能做到上述的功能，提供 declarative API，讓使用者不需編寫完整的程式邏輯，只要透過控制 custom resource，就可以透過 controller 內定義的邏輯，來實現 desired state。使用者只需要專注在控制 custom resource 上的 desired state，讓 controller 處理細節實作。&lt;/p&gt;
&lt;p&gt;例如：我們在 cert-manager 中設定 certificates.certmanager.k8s.io 資源，來描述我們希望取得 x509 certificate 的 desired state，但我們在 certificates.certmanager 上面沒有寫『透過 Let&amp;rsquo;s Encrypt 取得 x509 certificate』的實現邏輯，仍然能透過 cert-manager 產生 x509 certiticate，因為 cert-manager 內部已經定義 certificates.certmanager.k8s.io 的 custom controller。&lt;/p&gt;
&lt;p&gt;基本的 custom resource 操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;註冊 custom resource definition，讓 kubernetes API 看得懂 custom resource
&lt;ul&gt;
&lt;li&gt;不然 API 會回覆 error: the server doesn&amp;rsquo;t have a resource type&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有 CRD 便可以 apply custom resource 到集群中&lt;/li&gt;
&lt;li&gt;部署 custom controller，監測 custom resource 的 desired state 內容，並實現達到 desired state 的業務邏輯
&lt;ul&gt;
&lt;li&gt;沒有 custom controller，custom resource 就只是可以 apply 與 update 的資料儲存結構，沒有 cert-manager 中 controller 的邏輯，也還是生不出 x509 certificate。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;kubectl get chechiachang
error: the server doesn&#39;t have a resource type &amp;quot;chechiachang&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;custom controller 也可以跟其他的 kubernetes resource 互動，例如 cert-manager 在產生 certificate 的時候，會把產生的 certificate 檔案放在 secret 中，cert-manager 會依據 order 中定義的 lifecycle ，持續檢查 certificate 的有效性，如果接近過期，則會觸發新的一輪 order。&lt;/p&gt;
&lt;p&gt;我們也可以寫一個操作 Configmap 與 Deployment Resource 的 custom controller，來進行 deploymnet 的 Image 更新。&lt;/p&gt;
&lt;h1 id=&#34;我需要-custom-resource-嗎&#34;&gt;我需要 custom resource 嗎&lt;/h1&gt;
&lt;p&gt;kubernetes 在&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#should-i-add-a-custom-resource-to-my-kubernetes-cluster&#34;&gt;should I add custom resource&lt;/a&gt; 有列表分析該不該使用 custom resource ，將你的 API 邏輯整合到 kubernetes API 上。幾個判斷參考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 是 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#declarative-apis&#34;&gt;declarative model&lt;/a&gt;，如果不是可能不適合跟 kubernetes API 整合，獨立成為一個自己運行的服務即可&lt;/li&gt;
&lt;li&gt;需要使用 kubernetes&lt;/li&gt;
&lt;li&gt;需要使用 kubectl 控制&lt;/li&gt;
&lt;li&gt;API 需要使用 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#common-features&#34;&gt;kubernetes 支援的功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;正哉開發全新功能，因為整合舊的服務到 kubernetes API 工程浩大&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;也許-configmapsecret-就可以解決&#34;&gt;也許 configmap/secret 就可以解決&lt;/h1&gt;
&lt;p&gt;如果只是需要將資料儲存在 kubernetes 上，有一個 build-int 的 kubernetes resource 很適合，就是 configmap。可以瘀考以下條件，判斷是否 configmap 搭配能監看 configmap 的 controller 就可以達成需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已經有完整的 config file，例如 mysql.cnf, nginx.conf&amp;hellip;&lt;/li&gt;
&lt;li&gt;主要用途是把檔案掛載到 Pod 中的 process 使用&lt;/li&gt;
&lt;li&gt;使用時的格式，是整個檔案放在 Pod 中，或是使用環境變數塞到 Pod 裡面，而不是透過 kubernetes API 存取 (ex 使用 kubectl)&lt;/li&gt;
&lt;li&gt;更新 configmpa 時更新 Pod，會比更新 custom resource 時更新 Pod 容易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用 CRD 或 Aggregated kubernetes API，大多符合下列條件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 kubernetes libraries 與客戶端 (ex kubectl) 操作 custom resource&lt;/li&gt;
&lt;li&gt;需要 top level 的 kubernetes 支援，例如可以 kubectl get cheachiachang&lt;/li&gt;
&lt;li&gt;自動化 kubernetes 物件&lt;/li&gt;
&lt;li&gt;需要用到 .spec, .status, .metadata，這些比較 desired state 與 currenty state 的功能&lt;/li&gt;
&lt;li&gt;需要抽象類別來管理一群 controlled resource&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;custom-resource-definition&#34;&gt;Custom Resource Definition&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions&#34;&gt;Custom Resoure Definition&lt;/a&gt; 讓使用者可以定義 custom resource，定義 custom resource 的格式包括名稱與 data schema，然後交給 kubernetes API 去處理 custom resource 的儲存。&lt;/p&gt;
&lt;p&gt;也就是說，透過 CRD 我們不用寫 custom resource 的 API，例如 cert-manager 不用寫 certificates.certmanager.k8s.io 的 API，而是向 kubernetes API server 註冊 CRD，讓 kubernetes API server 看得懂 custom source 的定義，並且直接使用 kubernetes API server，進行 custom resource 的 CRUD。&lt;/p&gt;
&lt;p&gt;我們可以透過 kubectl (API server) 操作 certificates.certmanager.k8s.io，這個請求也是送到 kubernetes API server。&lt;/p&gt;
&lt;h1 id=&#34;api-server-aggregation&#34;&gt;API server aggregation&lt;/h1&gt;
&lt;p&gt;能夠透過註冊 CRD ，就可以使用原來的 kubernetes API 來進行 CRUD ，是因為 kubernetes API 對於普通的 API 操作提供泛型 (generic) 介面，直接使用 CRUD 的邏輯。&lt;/p&gt;
&lt;p&gt;由於是 kubernetes Aggregated API ，所有 kubernetes 的 clients 都一起兼容新註冊的 custom resource，不用在 API 要定義，在冊戶端也要定義。註冊完的 custom resource definition，可以直接透過 kubectl 存取。&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;custom resource 簡介&lt;/li&gt;
&lt;li&gt;custom resource 使用的情境與條件&lt;/li&gt;
&lt;li&gt;custom resource definition 與 Aggregated API&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cert Manager Complete Workflow</title>
      <link>https://chechia.net/post/cert-manager-complete-workflow/</link>
      <pubDate>Sat, 12 Oct 2019 17:41:25 +0800</pubDate>
      
      <guid>https://chechia.net/post/cert-manager-complete-workflow/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;recap&#34;&gt;Recap&lt;/h1&gt;
&lt;p&gt;昨天我們實際使用 cert-manager，為 nginx ingress controller 產生 certificates，過程中我們做了幾件事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設置 Let&amp;rsquo;s Encript prod site 的 Issuer&lt;/li&gt;
&lt;li&gt;設置 certificates.certmanager.k8s.io 資源來定義 certificate 的取得方式&lt;/li&gt;
&lt;li&gt;或是在 ingress 中配置 tls，讓 cert-manager 自動透過 ingress-shim 產生 certifcates.cert-manager，並且產生 certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是使用 cert-manager 產生 certificate 的基本操作，剩下的是由 cert-manager 完成。實際上 cert-manager 在產生出 certificate 之前還做了很多事情，我們今天就詳細走過完整流程，藉此了解 cert-manager 配合 issuing certificate 的流程&lt;/p&gt;
&lt;p&gt;使用者設置 Issuer&lt;/p&gt;
&lt;p&gt;使用者設定 certificate -&amp;gt; cert-manager 根據 certificate -&amp;gt; 產生 certificate&lt;/p&gt;
&lt;h1 id=&#34;certificaterequests&#34;&gt;CertificateRequests&lt;/h1&gt;
&lt;p&gt;certificaterequests.certmanager 是 cert-manager 產生 certificate 過程中會使用的資源，不是設計來讓人類操作的資源。&lt;/p&gt;
&lt;p&gt;當 cert-manager 監測到 certificate 產生後，會產生 certificaterequests.certmanager.k8s.io 資源，來向 issuer request certificate，這個過程與使用其他客戶端 (ex. certbot) 來向 3rd party CA server request certificate 時的內容相同，只是這邊我們使用 kubernetes resource 來定義。&lt;/p&gt;
&lt;p&gt;包含的 certificate request，會以 pem encoded 的形式，再變成 base64 encoded 存放在 resource 中。這個 pem key 也會從到遠方的 CA sercer (Let&amp;rsquo;s Encrypt prod) 來 request certificate&lt;/p&gt;
&lt;p&gt;如果 issuance 成功，certificaterequest 資源應該會被 cert-manager 吃掉，不會被人類看到。&lt;/p&gt;
&lt;p&gt;一個 certificaterequests.certmanager 大概長這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: cert-manager.io/v1alpha2
kind: CertificateRequest
metadata:
  name: my-ca-cr
spec:
  csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FUR
  ..................................
  LQo=
  isCA: false
  duraton: 90d
  issuerRef:
    name: ca-issuer
    # We can reference ClusterIssuers by changing the kind here.
    # The default value is Issuer (i.e. a locally namespaced Issuer)
    kind: Issuer
    group: cert-manager.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個 certificaterequests.certmanager 會讓 cert-manager 嘗試向 Issuer (lets-encrypt-prod) request certificate。&lt;/p&gt;
&lt;h1 id=&#34;order&#34;&gt;Order&lt;/h1&gt;
&lt;p&gt;orders.certmanager.k8s.io 被 ACME 的 Issuer 使用，用來管理 signed TLD certificate 的 ACME order，這個 resource 也是 cert-manager 自行產生管理的 resource，不需要人類來更改。&lt;/p&gt;
&lt;p&gt;當一個 certificates.certmanager 產生，且需要使勇 ACME isser 時，certmanager 會產生 orders.certmanager ，來取得 certificate。&lt;/p&gt;
&lt;h1 id=&#34;challenges&#34;&gt;Challenges&lt;/h1&gt;
&lt;p&gt;challenges.certmanager 資源是 ACME Issuer 管理 issuing lifecycle 時，用來完成單一個 DNS name/identifier authorization 時所使用的。用來確定 issue certiticate 的客戶端真的是 DNS name 的擁有者。&lt;/p&gt;
&lt;p&gt;當 cert-manager 產生 order 時，order controller 接到 order ，就會為每一個需要 DNS certificate 的 DNSname ，產生 challenges.certmanager。&lt;/p&gt;
&lt;p&gt;這段也是 order controller 自動產生，並不需要使用者參與。&lt;/p&gt;
&lt;h1 id=&#34;acme-certificate-issuing&#34;&gt;ACME certificate issuing&lt;/h1&gt;
&lt;p&gt;user -&amp;gt; 設定好 issuers.certmanager&lt;/p&gt;
&lt;p&gt;user -&amp;gt; 產生 certificates.certmanager -&amp;gt; 選擇 Issuer -&amp;gt;&lt;/p&gt;
&lt;p&gt;cert-manager -&amp;gt; 產生 certificaterequest -&amp;gt;&lt;/p&gt;
&lt;p&gt;cert-manager 根據 certiticfates.certmanager 產生 orders.certmanager -&amp;gt;&lt;/p&gt;
&lt;p&gt;order controller 根據 order ，並且跟每一個 DNS name target，產生一個 challenges.certmanager&lt;/p&gt;
&lt;p&gt;challenges.certmanager 產生後，會開啟這個 DNS name challenge 的 lifecycle&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;challenges 狀態為 queued for processing，在佇列中等待，&lt;/li&gt;
&lt;li&gt;如果沒有別的 chellenges 在進行，challenges 狀態變成 scheduled，這樣可以避免多個 DNS challenge 同時發生，或是相同名稱的 DNS challenge 重複&lt;/li&gt;
&lt;li&gt;challenges 與遠端的 ACME server &amp;lsquo;synced&amp;rsquo; 當前的狀態，是否 valid
&lt;ul&gt;
&lt;li&gt;如果 ACME 回應這個 DNS name 的 challenge 還是有效的，則直接把 challenges 的狀態改成 valid，然後移出排程佇列。&lt;/li&gt;
&lt;li&gt;如果 challenges 狀態仍然為 pending，challenge controller 會依照設定 present 這個 challenge，使用 HTTP01 或是 DNS01，challenges 被標記為 presented&lt;/li&gt;
&lt;li&gt;challenges 先執行 self check，確定 challenge 狀態已經傳播給 dns servers，如果 self check 失敗，則會依照 interval retry&lt;/li&gt;
&lt;li&gt;ACME authorization 關聯到 challenge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cert-manager 處理 &amp;lsquo;scheduled&amp;rsquo; challenges.certmanager -&amp;gt; ACME challenge&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cert Manager How It Work</title>
      <link>https://chechia.net/post/cert-manager-how-it-work/</link>
      <pubDate>Fri, 11 Oct 2019 11:24:34 +0800</pubDate>
      
      <guid>https://chechia.net/post/cert-manager-how-it-work/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天我們來實際使用 cert-manager，為 nginx ingress controller 產生 certificates with ACME Issuer&lt;/p&gt;
&lt;h1 id=&#34;ca-terminology&#34;&gt;CA Terminology&lt;/h1&gt;
&lt;p&gt;先把實際執行 CA 簽發的名詞定義一下，以免跟 cert-manager 的資源搞混&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Certificate: 憑證，x509 certificate，cert-manager 自動管理的目標，透過 let&amp;rsquo;s encript 取得的 x509 certificates&lt;/li&gt;
&lt;li&gt;CA (Certificate Authority): issue signed certificate 的機構&lt;/li&gt;
&lt;li&gt;issue: 頒發，指 CA 產生 certificate 與 key (今天的範例格式是 .crt 與 .key)&lt;/li&gt;
&lt;li&gt;Sign vs self-signed: 簽核，自己簽核，使用信任的 CA issue certificate，或是使用自己產生的 CA self-sign，然後把 CA 加到可以被信任的 CA 清單中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s Encript CA issues signed certificates&lt;/p&gt;
&lt;p&gt;Kubernetes in-cluster CA issues self-signed certificates&lt;/p&gt;
&lt;p&gt;cert-manager 的 CRD 資源，使用來描述 cert-manager 如何執行上述操作，CRD 底下都會加上 ``*.certmanager.k8s.io` 方便辨識。&lt;/p&gt;
&lt;h1 id=&#34;設定-issuer&#34;&gt;設定 Issuer&lt;/h1&gt;
&lt;p&gt;Issuer 要怎麼翻成中文XD，憑證頒發機構？&lt;/p&gt;
&lt;p&gt;總之在開始簽發 certificates 前，要先定義 issuers.certmanager.k8s.io ，代表一個能簽發 certificate CA，例如 Let&amp;rsquo;s Encript，或是 kubernetes 內部也有內部使用的憑證簽發，放在 secrets 中。&lt;/p&gt;
&lt;p&gt;這些 Issuer 會讓 certificates.certmanager.k8s.i8o 使用，定義如何取得 certificate 時，選擇 Issuer。&lt;/p&gt;
&lt;p&gt;cert-manager 上可以定義單一 namespace 的 issuers.certmanager 與集群都可使用的 clusterissuers.certmanager&lt;/p&gt;
&lt;p&gt;cert-manager 有支援幾種的 issuer type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA: 使用 x509 keypair 產生certificate，存在 kubernetes secret&lt;/li&gt;
&lt;li&gt;Self signed: 自簽 certificate&lt;/li&gt;
&lt;li&gt;ACME: 從 ACME (ex. Let&amp;rsquo;s Encrypt) server 取得 ceritificate&lt;/li&gt;
&lt;li&gt;Vault: 從 Vault PKI backend 頒發 certificate&lt;/li&gt;
&lt;li&gt;Venafi: Venafi Cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;certificate&#34;&gt;Certificate&lt;/h1&gt;
&lt;p&gt;有了簽發憑證的單位，接下來要定義如何取得 certificate。certificates.certmanager.k8s.io 是 CRD，用來告訴 cert-manager 要如何取得 certificate&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.cert-manager.io/en/latest/reference/certificates.html#certificates&#34;&gt;certifcates.certmanager.k8s.io&lt;/a&gt; 提供了簡單範例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: acme-crt
spec:
  secretName: acme-crt-secret
  duration: 90d
  renewBefore: 30d
  dnsNames:
  - foo.example.com
  - bar.example.com
  acme:
    config:
    - http01:
        ingressClass: nginx
      domains:
      - foo.example.com
      - bar.example.com
  issuerRef:
    name: letsencrypt-prod
    # We can reference ClusterIssuers by changing the kind here.
    # The default value is Issuer (i.e. a locally namespaced Issuer)
    kind: Issuer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面這個 certificate.certmanger 告訴 cert-manager&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;針對 foo.example.com 與 bar.example.com 兩個 domainsc&lt;/li&gt;
&lt;li&gt;使用 letsencript-prd Issuer 去取得 certificate key pair&lt;/li&gt;
&lt;li&gt;成功後把 ceritifcate 與 key 存在 secret/acme-crt-secret 中(以 tls.key, tls.crt 的形式)&lt;/li&gt;
&lt;li&gt;與 certificate.certmanager 都放在相同 namespace 中，產生 certificate.certmanager 的時候要注意才不會找不到 secret&lt;/li&gt;
&lt;li&gt;這邊指定了 certificate 的有效期間與 renew 時間 (預設值)，有需要可以更改&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;配合-ingress-設置-tls&#34;&gt;配合 Ingress 設置 tls&lt;/h1&gt;
&lt;p&gt;有上述的設定，接下來可以請求 tls certificate&lt;/p&gt;
&lt;p&gt;記得我們上篇 Nginx Ingress Controller 提到的 ingreess 設定嗎？這邊準備了一個適合配合 nginx ingress 使用的 tls 設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: my-nginx-ingress
  annotations:
    kubernetes.io/ingress.class: &amp;quot;nginx&amp;quot;
    cert-manager.io/issuer: &amp;quot;letsencrypt-prod&amp;quot;

spec:
  tls:
  - hosts:
    - foo.example.com
    secretName: my-nginx-ingrss-tls
  rules:
  - host: foo.example.com
    http:
      paths:
      - path: /
        backend:
          serviceName: chechiachang-backend
          servicePort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個 ingress apply 後，就會根據 spec.tls 的 hosts 設定，自動產生一個 certificate.certmanager 資源，並在這個資源使用 letsencryp-prod。&lt;/p&gt;
&lt;p&gt;不用我們手動 apply 新的 ceritificate，這邊是 cert-manager 使用了 annotation 來觸發 &lt;a href=&#34;https://docs.cert-manager.io/en/latest/tasks/issuing-certificates/ingress-shim.html&#34;&gt;Ingress-shim&lt;/a&gt;，簡單來說，當 ingress 上有使用 cert-manager.io 的 annotation 時，cert-manager 就會根據 ingress 設定內容，抽出 spec.tls 與 isuer annotation，來產生同名的 certificates.certmanager，這個 certificateas.certmanager 會觸發接下的 certificate 頒發需求。&lt;/p&gt;
&lt;p&gt;只要部署 Issuer 與 Ingress 就可以自動產生 certificate。當然，希望手動 apply certificates.certmanager 也是行得通。&lt;/p&gt;
&lt;p&gt;把產生了 certificate.certmanager 拉出來看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl describe certificate my-nginx-ingress

 Name:         my-nginx-ingress
 Namespace:    default
 API Version:  cert-manager.io/v1alpha2
 Kind:         Certificate
 Metadata:
   Cluster Name:
   Creation Timestamp:  2019-10-10T17:58:37Z
   Generation:          0
   Owner References:
     API Version:           extensions/v1beta1
     Block Owner Deletion:  true
     Controller:            true
     Kind:                  Ingress
     Name:                  my-nginx-ingress
   Resource Version:        9295
 Spec:
   Dns Names:
     example.your-domain.com
   Issuer Ref:
     Kind:       Issuer
     Name:       letsencrypt-prod
   Secret Name:  my-nginx-ingress-tls
 Status:
   Acme:
     Order:
       URL:  https://acme-prod-v02.api.letsencrypt.org/acme/order/7374163/13665676
   Conditions:
     Last Transition Time:  2019-10-10T18:05:57Z
     Message:               Certificate issued successfully
     Reason:                CertIssued
     Status:                True
     Type:                  Ready
 Events:
   Type     Reason          Age                From          Message
   ----     ------          ----               ----          -------
   Normal   CreateOrder     1d                 cert-manager  Created new ACME order, attempting validation...
   Normal   DomainVerified  1d                 cert-manager  Domain &amp;quot;foo.example.com&amp;quot; verified with &amp;quot;http-01&amp;quot; validation
   Normal   IssueCert       1d                 cert-manager  Issuing certificate...
   Normal   CertObtained    1d                 cert-manager  Obtained certificate from ACME server
   Normal   CertIssued      1d                 cert-manager  Certificate issued Successfully
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把 certificate 從 secret 撈出來看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl describe secret my-nginx-ingress-tls

Name:         my-nginx-ingress-tls
Namespace:    default
Labels:       cert-manager.io/certificate-name=my-nginx-ingrsss-tls
Annotations:  cert-manager.io/alt-names=foo.example.com
              cert-manager.io/common-name=foo.example.com
              cert-manager.io/issuer-kind=Issuer
              cert-manager.io/issuer-name=letsencrypt-prod

Type:  kubernetes.io/tls

Data
====
tls.crt:  3566 bytes
tls.key:  1675 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如此便可以透過 ingress 設定 nginx 使用 https&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;了解 *.certmanager.k8s.io CRD 定義與意義&lt;/li&gt;
&lt;li&gt;設定 Issuer 與 certificate&lt;/li&gt;
&lt;li&gt;透過 ingress-shim 直接部署 ingress 來產生 certificate&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cert Manager Deployment on Kubernetes</title>
      <link>https://chechia.net/post/cert-manager-deployment/</link>
      <pubDate>Thu, 10 Oct 2019 16:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/cert-manager-deployment/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cert-manager Introduction&lt;/li&gt;
&lt;li&gt;Deploy cert-manager&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;簡介-cert-manager&#34;&gt;簡介 cert-manager&lt;/h1&gt;
&lt;p&gt;TLS certificate 管理很重要，但在 kubernetes 上管理 TLS certificates 很麻煩。&lt;/p&gt;
&lt;p&gt;以往我們使用 &lt;a href=&#34;https://letsencrypt.org/zh-tw/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 提供的免費自動化憑證頒發，搭配 &lt;a href=&#34;https://github.com/jetstack/kube-lego&#34;&gt;kube-lego&lt;/a&gt; 來自動處理 certificate issuing，然而隨著 kube-lego 已不再更新後，官方建議改使用 &lt;a href=&#34;https://github.com/jetstack/cert-manager/&#34;&gt;Cert-manager&lt;/a&gt; 來進行 kubernetes 上的憑證自動化管理。&lt;/p&gt;
&lt;p&gt;cert-manager 是 kubernetes 原生的憑證管理 controller。是的他的核心也是一個 controller，透過 kubernetes object 定義 desired state，監控集群上的實際狀態，然後根據 resource object 產生憑證。cert-manager 做幾件事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 kubernetes 上 使用 CRD (Customized Resource Definition) 來定義 certificate issuing 的 desired state&lt;/li&gt;
&lt;li&gt;向 let&amp;rsquo;s encrypt 取得公開的憑證&lt;/li&gt;
&lt;li&gt;在 kubernetes 上自動檢查憑證的有效期限，並自動在有效時限內 renew certificate。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安裝&#34;&gt;安裝&lt;/h1&gt;
&lt;p&gt;官方文件有提供 &lt;a href=&#34;https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html&#34;&gt;詳細步驟&lt;/a&gt; 可以直接使用 release 的 yaml 部屬，也可以透過 helm。&lt;/p&gt;
&lt;h3 id=&#34;使用-yaml-部屬&#34;&gt;使用 yaml 部屬&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# Create a namespace to run cert-manager in
kubectl create namespace cert-manager

# Disable resource validation on the cert-manager namespace
kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;開一個獨立的 namespace 來管理 cert-manager resources&lt;/p&gt;
&lt;p&gt;取消 namespcae 中的 kubernetes validating webhook。由於 cert-manager 本身就會使用 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/&#34;&gt;ValidatingWebhookConfiguration&lt;/a&gt; 來為 cert-manager 定義的 Issuer, Certificate resource 做 validating。然而這會造成 cert-manager 與 webhook 的循環依賴 (circling dependency)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install the CustomResourceDefinitions and cert-manager itself
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.1/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# Install the CustomResourceDefinitions and cert-manager itself
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.1/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個 yaml 裡面還有幾個元件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cluster Role-bindings&lt;/li&gt;
&lt;li&gt;CustomResourceDefinition
&lt;ul&gt;
&lt;li&gt;certificaterequests.certmanager.k8s.io&lt;/li&gt;
&lt;li&gt;certificates.certmanager.k8s.io&lt;/li&gt;
&lt;li&gt;challenges.certmanager.k8s.io&lt;/li&gt;
&lt;li&gt;clusterissuers.certmanager.k8s.io&lt;/li&gt;
&lt;li&gt;issuers.certmanager.k8s.io&lt;/li&gt;
&lt;li&gt;orders.certmanager.k8s.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些元件的細節，留待運作原理分析時再詳解。&lt;/p&gt;
&lt;h3 id=&#34;helm-deployment&#34;&gt;helm deployment&lt;/h3&gt;
&lt;p&gt;這邊也附上使用 helm 安裝的步驟&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

# Install the CustomResourceDefinition resources separately
kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.10/deploy/manifests/00-crds.yaml

# Create the namespace for cert-manager
kubectl create namespace cert-manager

# Label the cert-manager namespace to disable resource validation
kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

# Add the Jetstack Helm repository
helm repo add jetstack https://charts.jetstack.io

# Update your local Helm chart repository cache
helm repo update

# Install the cert-manager Helm chart
helm install \
  --name cert-manager \
  --namespace cert-manager \
  --version v0.10.1 \
  jetstack/cert-managerNAMESPACE=cert-manager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部屬完檢查一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pods --namespace cert-manager

NAME                                       READY   STATUS    RESTARTS   AGE
cert-manager-5c6866597-zw7kh               1/1     Running   0          2m
cert-manager-cainjector-577f6d9fd7-tr77l   1/1     Running   0          2m
cert-manager-webhook-787858fcdb-nlzsq      1/1     Running   0          2m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊部屬完，會獲得完整的 cert-manager 與 cert-manager CRD，但 certificate 的 desired state object 還沒部屬。也就是關於我們要如何 issue certificate 的相關描述，都還沒有 deploy， cert-manager 自然不會工作。關於 issuing resources configuration，我們下次再聊。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Nginx Ingress Controller</title>
      <link>https://chechia.net/post/kubernetes-nginx-ingress-controller/</link>
      <pubDate>Tue, 08 Oct 2019 08:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/kubernetes-nginx-ingress-controller/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊該了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Jenkin-x on Kubernetes&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nginx-ingress-controller&#34;&gt;Nginx Ingress Controller&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡介 nginx &amp;amp; Ingress Controller&lt;/li&gt;
&lt;li&gt;部屬並設定 nginx ingress controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;nginx-introduction&#34;&gt;Nginx Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/&#34;&gt;Nginx&lt;/a&gt; 是一款高效能、耐用、且功能強大的 load balancer 以及 web server，也是市占率最高的 web server 之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效能的 web server，遠勝傳統 apache server 的資源與效能&lt;/li&gt;
&lt;li&gt;大量的模組與擴充功能&lt;/li&gt;
&lt;li&gt;有充足的安全性功能與設定&lt;/li&gt;
&lt;li&gt;輕量&lt;/li&gt;
&lt;li&gt;容易水平擴展&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ingress--ingress-controller&#34;&gt;Ingress &amp;amp; Ingress Controller&lt;/h1&gt;
&lt;p&gt;這邊簡單講一下 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;kubernetes ingress&lt;/a&gt;。當我們在使用 kubernetes 時需要將外部流量 route 到集群內部，這邊使用 Ingress 這個 api resource，來定義外部到內部的設定，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service 連接&lt;/li&gt;
&lt;li&gt;load balance 設定&lt;/li&gt;
&lt;li&gt;SSL/TLS 終端&lt;/li&gt;
&lt;li&gt;虛擬主機設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一個簡單的 ingress 大概長這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: test-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /testpath
        backend:
          serviceName: test
          servicePort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了一般的 k8s 資源，nginx 主要的設定會落在 spec，以及依賴底下實作不同，額外設定的 annotation。&lt;/p&gt;
&lt;p&gt;這邊可以看到 spec.rule 定義了外部 http 流量，引導到 backend service 的路徑。&lt;/p&gt;
&lt;p&gt;annotations 下已經標註的 nginx.ingress 的 annotation，來快速增加額外的設定。&lt;/p&gt;
&lt;h1 id=&#34;ingress--ingress-controller-1&#34;&gt;Ingress &amp;amp; Ingress Controller&lt;/h1&gt;
&lt;p&gt;雖然已經指定 nginx 的 annotation，但這邊要注意，ingress resource 本身是不指定底層的實現 (ingress controller)，也就是說，底下是 nginx 也好，traefik 也行，只要能夠實現 ingress 裏頭設定的 routing rules 就可以。&lt;/p&gt;
&lt;p&gt;只設定好 ingress，集群上是不會有任何作用的，還需要在集群上安裝 ingress controller 的實作，實作安裝完了以後，會依據 ingress 的設定，在 controller 裏頭實現，不管是 routing、ssl/tls termination、load balancing 等等功能。如同許多 Kubernetes resource 的設計理念一樣，這邊也很優雅的用 ingress 與 ingress controller，拆分的需求設定與實作實現兩邊的職責。&lt;/p&gt;
&lt;p&gt;例如以 nginx ingress controller，安裝完後會依據 ingress 的設定，在 nginx pod 裡設定對應的 routing rules，如果有 ssl/tls 設定，也一併載入。&lt;/p&gt;
&lt;p&gt;Kubernetes 官方文件提供了&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/#additional-controllers&#34;&gt;許多不同的 controller&lt;/a&gt; 可以依照需求選擇。&lt;/p&gt;
&lt;p&gt;但如果不知道如何選擇，個人會推薦使用 nginx ingress controller，穩定、功能強大、設定又不至於太過複雜，基本的設定就能很好的支撐服務，不熟悉的大德們比較不容易被雷到。&lt;/p&gt;
&lt;p&gt;底下我們就要來開始使用 nginx ingress controller。&lt;/p&gt;
&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;
&lt;p&gt;我們這邊使用的 &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34;&gt;ingress-nginx&lt;/a&gt; 是 kubernetes org 內維護的專案，專案內容主要是再 k8s 上執行 nginx，抽象與實作的整合，並透過 configmap 來設定 nginx。針對 nginx ingress kubernetes 官方有提供&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/&#34;&gt;非常詳細的說明文件&lt;/a&gt; ，剛接觸 nginx 的大德可以透過這份文件，快速的操作 nginx 的設定，而不用直接寫 nginx.conf 的設定檔案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repo 版本是 nginx-0.26.1&lt;/li&gt;
&lt;li&gt;Image 版本是 quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;
&lt;p&gt;我們這邊用 helm 部屬，&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/nginx-ingress&#34;&gt;Nginx Ingress Controller Stable Chart&lt;/a&gt;，讓各位大德用最簡單的步驟，獲得一個功能完整的 nginx ingress controller。&lt;/p&gt;
&lt;p&gt;與前面幾個 helm chart 一樣，我們可以先取得 default values.yaml 設定檔，再進行更改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/helm/charts/master/stable/nginx-ingress/values.yaml
$ vim values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝時也可以使用 &amp;ndash;set 來變更&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/nginx-ingress#configuration&#34;&gt;安裝 chart 時的 parameters&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ helm install stable/nginx-ingress \
	--set controller.metrics.enabled=true \
	-f values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝完後，resource 很快就起來。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get all --selector app=nginx-ingress
NAME                                                 READY   STATUS    RESTARTS   AGE
pod/nginx-ingress-controller-7bbcbdcf7f-tx69n        1/1     Running   0          216d
pod/nginx-ingress-default-backend-544cfb69fc-rnn6h   1/1     Running   0          216d

NAME                                    TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                      AGE
service/nginx-ingress-controller        LoadBalancer   10.15.246.22   34.35.36.37    80:30782/TCP,443:31933/TCP   216d
service/nginx-ingress-default-backend   ClusterIP      10.15.243.19   &amp;lt;none&amp;gt;         80/TCP                       216d

NAME                                            READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/nginx-ingress-controller        1/1     1            1           216d
deployment.apps/nginx-ingress-default-backend   1/1     1            1           216d

NAME                                                       DESIRED   CURRENT   READY   AGE
replicaset.apps/nginx-ingress-controller-7bbcbdcf7f        1         1         1       216d
replicaset.apps/nginx-ingress-default-backend-544cfb69fc   1         1         1       216d

kubectl get configmap -l app=nginx-ingress
NAME                       DATA   AGE
nginx-ingress-controller   2      216d

kubectl get ingress
NAME            HOSTS                  ADDRESS       PORTS     AGE
ingress-nginx   api.chechiachang.com   34.35.36.37   80, 443   216d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;兩個 Pods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx ingress controller 是主要的 nginx pod，裡面跑的是 nginx&lt;/li&gt;
&lt;li&gt;Nginx default backend 跑的是 default backend，nginx 看不懂了 route request 都往這邊送。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx-ingress-contrller 是我們在 GCP 上，在集群外部的 GCP 上的對外接口。如果在不同平台上，依據預設 service load balancer 有不同實作。&lt;/li&gt;
&lt;li&gt;在 gcp 上，會需要時間來啟動 load balancer，等 load balancer 啟動完成，service 這邊就可以取得外部的 ip，接受 load balancer 來的流量&lt;/li&gt;
&lt;li&gt;另外一個 service 就是 default backend 的 service&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;踩雷&#34;&gt;踩雷&lt;/h1&gt;
&lt;p&gt;第一個雷點是 helm chart install 帶入的 &lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/nginx-ingress#configuration&#34;&gt;parameters&lt;/a&gt;，有些 parameter 是直接影響 deployment 的設定，如果沒注意到，安裝完後沒辦法透過 hot reload 來處理，只能幹掉重來。建議把這份表格都看過一次，再依照環境與需求補上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ helm install stable/nginx-ingress \
	--set controller.metrics.enabled=true \
	--set controller.service.externalTrafficPolicy=Local \
	-f values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊開了 prometheus metrics exporter，以及 source IP preservation。&lt;/p&gt;
&lt;h1 id=&#34;nginx-config&#34;&gt;Nginx Config&lt;/h1&gt;
&lt;p&gt;再安裝完後，外部的 load balancer 啟用後，就可以透過 GCP 的 external ip 連入 nginx，nginx 依照設定的 rule 向後端服務做集群內的 load balancing 與 routing。&lt;/p&gt;
&lt;p&gt;如果在使用過程中，有需要執行更改設定，或是 hot reload config，在 kubernetes 上要如何做呢? 我們下回分解。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Nginx Ingress Controller Config</title>
      <link>https://chechia.net/post/kubernetes-nginx-ingress-config/</link>
      <pubDate>Tue, 08 Oct 2019 08:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/kubernetes-nginx-ingress-config/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;p&gt;這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Cert-manager&lt;/li&gt;
&lt;li&gt;Jenkin-x on Kubernetes&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress Controller 運作原理&lt;/li&gt;
&lt;li&gt;設定 Nginx Ingress Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;運作原理&#34;&gt;運作原理&lt;/h1&gt;
&lt;p&gt;昨天講完 nginx ingress controller 部屬，今天來談談 controller 是如何運作的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx 使用 config file (nginx.conf) 做全域設定，為了讓 nginx 能隨 config file 更新，controller 要偵測 config file 變更，並且 reload nginx&lt;/li&gt;
&lt;li&gt;針對 upstream (後端 app 的 endpoint) 變更，使用 lua-nginx-module 來更新。因為 kubernetes 上，service 後的服務常常會動態的變更，scaling，但 endpint ip list 又需要更新到 nginx，所以使用 lua 額外處理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 kubernetes 上要如何做到上述兩件事呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般 controller 都使用同步 loop 來檢查 current state 是否與 desired state&lt;/li&gt;
&lt;li&gt;desired state 使用 k8s object 描述，例如 ingress, services, configmap 等等 object&lt;/li&gt;
&lt;li&gt;Nginx ingress controller 這邊使用的是 client-go 中的 Kubernetes Informer 的 &lt;a href=&#34;https://godoc.org/k8s.io/client-go/informers#SharedInformerFactory&#34;&gt;SharedInformer&lt;/a&gt;，可以根據 object 的更新執行 callback&lt;/li&gt;
&lt;li&gt;由於無法檢查每一次的 object 更動，是否對 config 產生影響，這邊直接每次更動都產生全新的 model&lt;/li&gt;
&lt;li&gt;如果新產生的 model 與現有相同，就跳過 reload&lt;/li&gt;
&lt;li&gt;如果 model 只影響 endpoint，使用 nginx 內部的 lua handler 產生新的 endpoint list，來避免因為 upstream 服務變更造成的頻繁 reload&lt;/li&gt;
&lt;li&gt;如果新 Model 影響不只 endpoint，則取代現有 model，然後觸發 reload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具體會觸發 reload 的事件，&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/how-it-works/#when-a-reload-is-required&#34;&gt;請見官方文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了監測 objects，build model，觸發 reload，之前 controller 還會將 ingress 送到 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook&#34;&gt;kubernetes validating admission webhook server&lt;/a&gt; 做驗證，避免描述 desired state 的 ingress 有 syntax error，導致整個 controller 爆炸。&lt;/p&gt;
&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;p&gt;要透過 controller 更改 nginx 設定，有以下三種方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改 configmap，對全域的 controller 設定&lt;/li&gt;
&lt;li&gt;更改 ingress 上的 annotation，這些 annotation 針對獨立 ingress 生效&lt;/li&gt;
&lt;li&gt;有更深入的客製化，是上述兩者達不到或尚未實作，可以使用 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/custom-template/&#34;&gt;Custom Template&lt;/a&gt; 來做到，把 nginx.tmpl mount 進 controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;configmap&#34;&gt;Configmap&lt;/h1&gt;
&lt;p&gt;由於把全域設定放到 configmap 上，nginx ingress controller 非常好調度與擴展，&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/&#34;&gt;controller 官方說明文件&lt;/a&gt; 除了列出目前已經支援的設定外，也直接附上 nginx 官方的文件說明連結，讓使用者查詢時方便比對。&lt;/p&gt;
&lt;p&gt;當需要更改需求，可以 google nginx 的關鍵字，找到 nginx 上設定的功能選項後，來 controller 的文件，找看看目前是否已經支援。有時候有需要對照 nginx 官方文件，來正確設定 controller。&lt;/p&gt;
&lt;h1 id=&#34;annotation&#34;&gt;Annotation&lt;/h1&gt;
&lt;p&gt;有很多 Nginx 的設定是根據 ingress 不同而有調整，例如針對這個 ingress 做白名單，設定 session，設定 ssl 等等，這些針對特定 ingress 所做的設定，可以直接寫在 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/&#34;&gt;ingress annotation&lt;/a&gt; 裡面。&lt;/p&gt;
&lt;p&gt;例如下面這個 Ingress&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: &#39;true&#39;
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.allow-http: &amp;quot;true&amp;quot;
    ingress.kubernetes.io/force-ssl-redirect: &amp;quot;true&amp;quot;
    nginx.ingress.kubernetes.io/whitelist-source-range: &amp;quot;34.35.36.37&amp;quot;
    nginx.ingress.kubernetes.io/proxy-body-size: &amp;quot;20m&amp;quot;
    ingress.kubernetes.io/proxy-body-size: &amp;quot;20m&amp;quot;
    # https://github.com/Shopify/ingress/blob/master/docs/user-guide/nginx-configuration/annotations.md#custom-nginx-upstream-hashing
    nginx.ingress.kubernetes.io/load-balance: &amp;quot;ip_hash&amp;quot;
    # https://kubernetes.github.io/ingress-nginx/examples/affinity/cookie/
    nginx.org/server-snippets: gzip on;
    nginx.ingress.kubernetes.io/affinity: &amp;quot;cookie&amp;quot;
    nginx.ingress.kubernetes.io/session-cookie-name: &amp;quot;route&amp;quot;
    nginx.ingress.kubernetes.io/session-cookie-hash: &amp;quot;sha1&amp;quot;
    nginx.ingress.kubernetes.io/session-cookie-expires: &amp;quot;3600&amp;quot;
    nginx.ingress.kubernetes.io/session-cookie-max-age: &amp;quot;3600&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;nginx.ingress.kubernetes.io
&lt;ul&gt;
&lt;li&gt;whitelist-source-range: 只允許白名單 ip&lt;/li&gt;
&lt;li&gt;load-balance: &amp;ldquo;ip_hash&amp;rdquo;: 更改預設 round_robin 的 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#load-balance&#34;&gt;load balance&lt;/a&gt;，為了做 session cookie&lt;/li&gt;
&lt;li&gt;affinity: &amp;ldquo;cookie&amp;rdquo;: 設定 upstream 的 &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#session-affinity&#34;&gt;session affinity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;session-cookie-name: &amp;ldquo;route&amp;rdquo;&lt;/li&gt;
&lt;li&gt;session-cookie-hash: &amp;ldquo;sha1&amp;rdquo;&lt;/li&gt;
&lt;li&gt;session-cookie-expires: &amp;ldquo;3600&amp;rdquo;&lt;/li&gt;
&lt;li&gt;session-cookie-max-age: &amp;ldquo;3600&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果後端 server 有 session 需求，希望相同 source ip 來的 request 能持續到相同的 endpoint。才做了以上設定。&lt;/p&gt;
&lt;h1 id=&#34;helm-configuration&#34;&gt;helm configuration&lt;/h1&gt;
&lt;p&gt;helm 的 configuration 也是重要的設定，這裡在安裝時決定了 nginx ingress controller 的 topology、replicas、resource、k8s runtime 設定如 healthz &amp;amp; readiness、其實都會影響 nginx 具體的設定。這部分就會有很多考量。有機會我們再來分享。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prometheus &amp; Kubernetes State Metrics Exporter</title>
      <link>https://chechia.net/post/prometheus-kube-state-metrics-exporter/</link>
      <pubDate>Mon, 07 Oct 2019 08:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/prometheus-kube-state-metrics-exporter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus / Grafana (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deployment-on-kubernetes/&#34;&gt;GKE 上自架 Prometheus / Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GKE 上自架 Grafana 與設定&lt;/li&gt;
&lt;li&gt;使用 exporter 監測 GKE 上的各項服務&lt;/li&gt;
&lt;li&gt;輸出 redis-ha 的監測數據&lt;/li&gt;
&lt;li&gt;Node Exporter 與 kube metrics exporter&lt;/li&gt;
&lt;li&gt;輸出 kafka 的監測數據&lt;/li&gt;
&lt;li&gt;自幹 exporter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果要透過 prometheus 來監控集群的運行狀況，有兩個 exporter 是必裝的，一個是把 node 狀態 export 出來的 node exporter，一個是把 kubernetes 集群狀態 export 出來的 kube state metrics exporter。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node Exporter 簡介&lt;/li&gt;
&lt;li&gt;kube metrics exporter 安裝與設定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;node-exporter&#34;&gt;Node Exporter&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;Node Exporter&lt;/a&gt; 是 prometheus 官方維護的一個子項目，主要在把類 unix 硬體 kernel 的 metrics 送出來。官方也支援 windows node 與 nvidia gpu metrics，可以說是功能強大。&lt;/p&gt;
&lt;p&gt;為了能夠監測 kubernetes node 的基礎設施狀態，通常都會使用 node exporter。&lt;/p&gt;
&lt;p&gt;node exporter 安裝，我們在安裝 prometheus helm chart 時就一並安裝了。這邊看一下設定與運行。&lt;/p&gt;
&lt;h1 id=&#34;collectors&#34;&gt;Collectors&lt;/h1&gt;
&lt;p&gt;Node exporter 把不同位置收集到的不同類型的 metrics ，做成各自獨立的 colletor，使用者可以根據求需求來啟用或是不啟用 collector，&lt;a href=&#34;https://github.com/prometheus/node_exporter#enabled-by-default&#34;&gt;完整的 collector 目錄&lt;/a&gt; 在這邊。&lt;/p&gt;
&lt;p&gt;如果有看我們第一部份的 ELK part，應該會覺得這裡的設定，跟 metricbeat 非常像，基本上這兩者做的事情是大同小異的，收集 metrics 來源都是同樣的類 unix 系統，只是往後送的目標不一樣 (雖然現在兩者都可以兼容混搭了)。如果有接觸過其他平台的 metrics collector，也會發現其實大家做的都差不多。&lt;/p&gt;
&lt;h1 id=&#34;textfile-collector&#34;&gt;Textfile Collector&lt;/h1&gt;
&lt;p&gt;Prometheus 除了有 scrape 機制，讓 prometheus 去 exporter 撈資料外，還有另外一個機制，叫做 &lt;a href=&#34;https://github.com/prometheus/pushgateway&#34;&gt;Pushgateway&lt;/a&gt;，這個我們在部屬 prometheus 時也部屬了一個。這邊簡單說明一下。&lt;/p&gt;
&lt;p&gt;經常性執行的服務(redis, kafka,&amp;hellip;)會一直運行，prometheus 透過這些服務的 metrics 取得 runtime metrics，作為監控資料。可是有一些 job 是暫時性的任務，例如果一個 batch job，這些服務不會有一直運行的 runtime metrics，也不會有 exporter。但這時又希望監控這些 job 的狀態，就可以使用 Pushgateway。&lt;/p&gt;
&lt;p&gt;Pushgateway 的作用機制，就是指定收集的目標資料夾，需要監測的 batch job，只要把希望監測的資料，寫到該資料夾。Pushgateway 會依據寫入的資料，轉成 time series metrics，並且 export 出來。&lt;/p&gt;
&lt;p&gt;這種去 tail 指定目錄檔案，然後把 metrics 後送的機制，是否跟 filebeat 有一點類似? 只是 filebeat 一般取得資料後，會主動推送到 ELK 上，prometheus pushgateway 會暴露出 metrics 後，讓 prometheus server 來 scrape。&lt;/p&gt;
&lt;p&gt;Pushgateway 也會在收集資料時打上需要的 label，方面後段處理資料。&lt;/p&gt;
&lt;h1 id=&#34;kubernetes-state-metrics-exporter&#34;&gt;Kubernetes State Metrics (Exporter)&lt;/h1&gt;
&lt;p&gt;Node Exporter 將 kubernetes 集群底下的 Node 的硬體狀態，例如 cpu, memory, storage,&amp;hellip; expose 出來，然而我們在維運 kubernetes 還需要從 api server 獲得集群內部的資料，例如說 pod state, container state, endpoints, service, &amp;hellip;等，這邊可以使用 kube-state-metrics 來處理。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics&#34;&gt;kube-state-metrics&lt;/a&gt; 是 kubernetes 官方維護的專案，做的事情就是向 api server 詢問 kubernetes 的 state，例如 pod state, deployment state，然後跟 prometheus exporter 一，開放一個 http endpoint，讓需要的服務來 scrape metrics。&lt;/p&gt;
&lt;p&gt;工作雲裡也很單純，kubernetes api server 可以查詢 pod 當下的狀態，kube-state-metrics 則會把當下的狀態依照時間序，做成 time series 的 metrics，例如這個 pod 什麼時候是活著，什麼時候因為故障而 error。&lt;/p&gt;
&lt;p&gt;kube-state-metrics 預設的輸出格式是 plaintext，直接符合 Prometheus client endpoint 的格式&lt;/p&gt;
&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;
&lt;p&gt;如果依照第一篇安裝 prometheus helm 的步驟，現在應該已經安裝完 kube-state-metrics 了。如果沒有安裝，也可以依照官方說明的基本範例安裝。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:kubernetes/kube-state-metrics.git

cd kube-state-metrics

kubectl apply -f examples/standard/*.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝完可以看到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get pods --selector &#39;app=prometheus,component=kube-state-metrics&#39;

NAME                                             READY   STATUS    RESTARTS   AGE
prometheus-kube-state-metrics-85f6d75f8b-7vlkp   1/1     Running   0          201d

$ kubectl get svc --selector &#39;app=prometheus,component=kube-state-metrics&#39;

NAME                            TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
prometheus-kube-state-metrics   ClusterIP   None         &amp;lt;none&amp;gt;        80/TCP    201d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們可以透過 service 打到 pod 的 /metrics 來取得 metrics。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl exec -it busybox sh

curl prometheus-kube-state-metrics:8080
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Kube Metrics Server&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Kube Metrics&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
    	&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://chechia.net/metrics&#39;&amp;gt;metrics&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    	&amp;lt;li&amp;gt;&amp;lt;a href=&#39;https://chechia.net/healthz&#39;&amp;gt;healthz&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

curl prometheus-kube-state-metrics:8081

&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Kube-State-Metrics Metrics Server&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Kube-State-Metrics Metrics&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
    	&amp;lt;li&amp;gt;
			&amp;lt;a href=&#39;https://chechia.net/metrics&#39;&amp;gt;metrics&amp;lt;/a&amp;gt;
		&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊有兩套 metrics，一個是 kube-state-metrics 自己自我監測的 metrics，在 8081，另外一個才是 kube metrics，在 8080，兩個都要收，記得不要收錯了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl prometheus-kube-state-metrics:8080/metrics

打下去就可以看到超多 metrics 。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics/tree/master/docs&#34;&gt;Metrics 的清單與說明文件&lt;/a&gt;，有用到的 metrics 使用前都可以來查一下定義解釋。&lt;/p&gt;
&lt;p&gt;理論上不用每個 metrics 都 expose 出來，有需要可以把不會用到的 metrics 關一關，可以節省 kube-state-metrics 的 cpu 消耗。&lt;/p&gt;
&lt;h1 id=&#34;resource-recommendation&#34;&gt;Resource Recommendation&lt;/h1&gt;
&lt;p&gt;kube-state-metrics 很貼心的還附上&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics#scaling-kube-state-metrics&#34;&gt;建議的資源分配&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;As a general rule, you should allocate

200MiB memory
0.1 cores
For clusters of more than 100 nodes, allocate at least

2MiB memory per node
0.001 cores per node
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;scaling&#34;&gt;Scaling&lt;/h1&gt;
&lt;p&gt;kube-state-metrics 還有提供 horizontal scaling 的解決方案，如果你的集群很大，node 數量已經讓 kube-state-metrics 無法負荷，也可以使用 sharding 的機制，把 metrics 的工作散布到多個 kube-state-metrics，再讓 prometheus 去收集統整。這部分我覺得很有趣，但還沒實作過，我把&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics#horizontal-scaling-sharding&#34;&gt;文件&lt;/a&gt; 放在這邊，有緣大德有時做過請來討論分享。&lt;/p&gt;
&lt;h1 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h1&gt;
&lt;p&gt;metrics 抓出來，當然要開一下 dashboard，這邊使用的是這個&lt;a href=&#34;https://grafana.com/grafana/dashboards/7249&#34;&gt;kubernetes cluster&lt;/a&gt;，支援&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node exporter&lt;/li&gt;
&lt;li&gt;kube state metrics&lt;/li&gt;
&lt;li&gt;nginx ingress controller&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三個願望一次滿足~&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;跑 kubernetes 務必使用這兩個 exporter&lt;/li&gt;
&lt;li&gt;kube-state-metrics 整理得很舒服，有時間可以多看看這個專案&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Prometheus Exporter Library &amp; Redis Exporter</title>
      <link>https://chechia.net/post/prometheus-exporter-library-redis-exporter/</link>
      <pubDate>Sun, 06 Oct 2019 08:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/prometheus-exporter-library-redis-exporter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus / Grafana (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deployment-on-kubernetes/&#34;&gt;GKE 上自架 Prometheus / Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GKE 上自架 Grafana 與設定&lt;/li&gt;
&lt;li&gt;使用 exporter 監測 GKE 上的各項服務&lt;/li&gt;
&lt;li&gt;輸出 redis-ha 的監測數據&lt;/li&gt;
&lt;li&gt;自幹 exporter&lt;/li&gt;
&lt;li&gt;輸出 kafka 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 kubernetes 的監測數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Exporter 工作原理簡介&lt;/li&gt;
&lt;li&gt;Prometheus exporter library&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;exporter-workflow&#34;&gt;Exporter workflow&lt;/h1&gt;
&lt;p&gt;上次講到 exporter 可以從服務端把運行資料抽出來，並開成 http endpoint，讓 prometheus 來 scrape metrics。那 exporter 本身是如何取得服務內部的 metrics 呢? 我們今天就稍微看一下。&lt;/p&gt;
&lt;h1 id=&#34;redis-exporter&#34;&gt;Redis Exporter&lt;/h1&gt;
&lt;p&gt;我們今天以 &lt;a href=&#34;https://github.com/oliver006/redis_exporter&#34;&gt;Redis Exporter&lt;/a&gt; 為例，研究一下外部的 exporter 是如何取得 redis 內部的 metrcs。&lt;/p&gt;
&lt;p&gt;Redis exporter 是用 golang 寫的一個小程式，總共算算才 1000 行，而且很多都是對 redis 內部 metrics 的清單，以及轉化成 prometheus metrics 的 tool functions，主要的邏輯非常簡單。我們簡單看一下源碼。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/oliver006/redis_exporter/blob/master/exporter.go#L386&#34;&gt;Collect&lt;/a&gt; 是主要的收集邏輯，就是執行 scrapeRedisHost(ch) ，然後把收集到的資訊，使用 &lt;a href=&#34;https://github.com/prometheus/client_golang&#34;&gt;Prometheus Go Client Library&lt;/a&gt; 的工具將資料註冊成 prometheus metrics&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func (e *Exporter) Collect(ch chan&amp;lt;- prometheus.Metric) {
	e.Lock()
	defer e.Unlock()
	e.totalScrapes.Inc()

	if e.redisAddr != &amp;quot;&amp;quot; {
		start := time.Now().UnixNano()
		var up float64 = 1

    // 從 host scrape 資料，然後塞進 channel streaming 出來。
		if err := e.scrapeRedisHost(ch); err != nil {
			up = 0
			e.registerConstMetricGauge(ch, &amp;quot;exporter_last_scrape_error&amp;quot;, 1.0, fmt.Sprintf(&amp;quot;%s&amp;quot;, err))
		} else {
			e.registerConstMetricGauge(ch, &amp;quot;exporter_last_scrape_error&amp;quot;, 0, &amp;quot;&amp;quot;)
		}

		e.registerConstMetricGauge(ch, &amp;quot;up&amp;quot;, up)
		e.registerConstMetricGauge(ch, &amp;quot;exporter_last_scrape_duration_seconds&amp;quot;, float64(time.Now().UnixNano()-start)/1000000000)
	}

	ch &amp;lt;- e.totalScrapes
	ch &amp;lt;- e.scrapeDuration
	ch &amp;lt;- e.targetScrapeRequestErrors
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;scrapeRedisHost 內部的主要邏輯，又集中在&lt;a href=&#34;https://github.com/oliver006/redis_exporter/blob/master/exporter.go#L1144&#34;&gt;執行 Info&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  // 執行 info 
	infoAll, err := redis.String(doRedisCmd(c, &amp;quot;INFO&amp;quot;, &amp;quot;ALL&amp;quot;))
	if err != nil {
		infoAll, err = redis.String(doRedisCmd(c, &amp;quot;INFO&amp;quot;))
		if err != nil {
			log.Errorf(&amp;quot;Redis INFO err: %s&amp;quot;, err)
			return err
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是說當我們在 redis-cli 連入 redis 時，可以執行 Info command，取得 redis 內部的資訊，包含節點設店與狀態，集群設定，資料的統計數據等等。然後 exporter 這邊維護持續去向 redis 更新 info ，並且把 info data 轉化成 time series 的 metrcs，再透過 &lt;a href=&#34;https://github.com/prometheus/client_golang/tree/master/prometheus/promhttp&#34;&gt;Prometheus Client promhttp&lt;/a&gt; 提供的 http endpoint library，變成 http endpoint。&lt;/p&gt;
&lt;p&gt;首先看一下 &lt;a href=&#34;https://redis.io/commands/info&#34;&gt;redis info command 的文件&lt;/a&gt;，這邊有說明 info 的 option ，以及 option 各自提供的資料，包括 server 狀態，賀戶端連線狀況，系統資源，複本狀態等等。我們也可以自己透過 info 取得資料。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get po | grep redis

redis-2-redis-ha-server-0                                3/3     Running     0          11d
redis-2-redis-ha-server-1                                3/3     Running     0          11d
redis-2-redis-ha-server-2                                3/3     Running     0          11d

$ kubectl exec -it redis-2-redis-ha-server-0  sh
$ redis-cli -h haproxy-service  -a REDIS_PASSWORD
$ haproxy-service:6379&amp;gt;

$ haproxy-service:6379&amp;gt; info server
# Server
redis_version:5.0.5
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:4d072dc1c62d5672
redis_mode:standalone
os:Linux 4.14.127+ x86_64
arch_bits:64
multiplexing_api:epoll
atomicvar_api:atomic-builtin
gcc_version:8.3.0
process_id:1
run_id:63a97460b7c3745577931dad406df9609c4e2464
tcp_port:6379
uptime_in_seconds:976082
uptime_in_days:11
...

$ haproxy-service:6379&amp;gt; info clients
# Clients
connected_clients:100
client_recent_max_input_buffer:2
client_recent_max_output_buffer:0
blocked_clients:1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Redis exporter 收集這些數據，透過 prometheus client library 把資料轉成 time series prometheus metrics。然後透過 library 放在 http enpoint 上。&lt;/p&gt;
&lt;p&gt;配合上次說過的 redis overview dashboard，可以直接在 Grafana 上使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1222339/19412031/897549c6-92da-11e6-84a0-b091f9deb81d.png&#34; alt=&#34;Redis Overvies library&#34;&gt;&lt;/p&gt;
&lt;p&gt;這邊 dashboard 顯示幾個重要的 metrics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uptime&lt;/li&gt;
&lt;li&gt;Memory Usage，要設定用量太高自動報警&lt;/li&gt;
&lt;li&gt;Command 的執行狀況，回應時間&lt;/li&gt;
&lt;li&gt;訊息的流量，以及超出 time-to-live 的資料清除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;都是需要好好加上 alert 的核心 metrics&lt;/p&gt;
&lt;h1 id=&#34;貢獻-exporter&#34;&gt;貢獻 exporter&lt;/h1&gt;
&lt;p&gt;其他服務的 exporter 工作原理也相似，如果服務本身有內部的 metrics，可以透過 client command 或是 API 取得，exporter 的工作就只是轉成 time series data。&lt;/p&gt;
&lt;p&gt;如果有比較特殊的 metrics 沒有匯出，例如說自家的 metrics ，但又希望能放到 prometheus 上監測，例如每秒收到多少 request count，回應速度，錯誤訊息的統計&amp;hellip;&amp;hellip;等，這點也可以使用 client library 自幹 exporter 然後 expose http endpoint，這樣在 prometheus 上也可以看到自家產品的 metrics，非常好用。有機會我們來聊自幹 exporter。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prometheus Deployment on Kubernetes</title>
      <link>https://chechia.net/post/prometheus-deployment-on-kubernetes/</link>
      <pubDate>Fri, 04 Oct 2019 16:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/prometheus-deployment-on-kubernetes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus / Grafana (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deployment-on-kubernetes/&#34;&gt;GKE 上自架 Prometheus / Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deploy-grafana/&#34;&gt;GKE 上自架 Grafana 與設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 exporter 監測 GKE 上的各項服務&lt;/li&gt;
&lt;li&gt;輸出 kubernetes 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 redis-ha 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 kafka 的監測數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus Introduction&lt;/li&gt;
&lt;li&gt;Deploy Prometheus&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;prometheus-introduction&#34;&gt;Prometheus Introduction&lt;/h1&gt;
&lt;p&gt;生產環境與非生產環境，其中的一指標就是有沒有足夠完整的服務監測系統，這句話可以看出服務監測對於產品化是多麼重要。而監控資料 (metrics) 的收集與可視化工具其實非常多，例如上周介紹的 ELK Stack，這次我們要來介紹另外一個很多人使用的 prometheus。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;Promethues 在官網上提到&lt;/a&gt; 是一個 Monitoring system and time series database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以收集高維度的資料&lt;/li&gt;
&lt;li&gt;使用自己的 PromQL 做有效且精簡的資料查詢&lt;/li&gt;
&lt;li&gt;內建資料瀏覽器，並且與 Grafana 高度整合&lt;/li&gt;
&lt;li&gt;支援 sharding 與 federation，來達到水平擴展&lt;/li&gt;
&lt;li&gt;有許多隨插即用的整合 exporter，例如 redis-exporter, kafka-exporter，kubernetes-exporter ，都可以直接取得資料&lt;/li&gt;
&lt;li&gt;支援 alert，使用 PromQL 以及多功能的告警，可以設定精準的告警條件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;與-elk-做比較&#34;&gt;與 ELK 做比較&lt;/h1&gt;
&lt;p&gt;基本上 Prometheus 跟 ELK 比，其實是很奇怪的一件事，但這也是最常被問的一個問題。兩者在本質上是完全不同的系統。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus 是 based on time series database 的資料收集系統&lt;/li&gt;
&lt;li&gt;ELK 是基於全文搜索引擎的資料查詢系統&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的，他們都能做 metrics 收集，在有限的尺度下，能達到一樣的效果。但這樣說的意思就等於是在說 mesos DC/OS 與 kubenetes 都能跑 container cluster 一樣，底下是完全不一樣的東西。&lt;/p&gt;
&lt;p&gt;兩者的差異使用上差非常多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;metrics 結構: ELK 借助全文搜索引擎，基本上送什麼資料近來都可以查找。Prometheus metrics 拉進來是 time series 的 key-value pairs。&lt;/li&gt;
&lt;li&gt;維護同樣的 metrics，prometheus 的使用的儲存空間遠小於 elasticsearch&lt;/li&gt;
&lt;li&gt;prometheus 針對 time based 的搜尋做了很多優化，效能很高&lt;/li&gt;
&lt;li&gt;Prometheus 對於記憶體與 cpu 的消耗也少很多&lt;/li&gt;
&lt;li&gt;Elasticsearch 資源上很貴，是因為在處理大量 text log 的時候，他能夠用後段的 pipeline 處理內容，再進行交叉比對，可以從 text 裡面提取很多未事先定義的資料&lt;/li&gt;
&lt;li&gt;Elasticsearch 的維護工作也比較複雜困難&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要收集服務運行資料，可以直接選 prometheus。如果有收集 log 進行交叉比對，可以考慮 elk。&lt;/p&gt;
&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;
&lt;p&gt;我們這邊用 helm 部屬，之所以用 helm ，因為這是我想到最簡單的方法，能讓輕鬆擁有一套功能完整的 prometheus。所以我們先用。&lt;/p&gt;
&lt;p&gt;沒用過 helm 的大德可以參考 &lt;a href=&#34;https://helm.sh/docs/using_helm/#quickstart&#34;&gt;Helm Quickstart&lt;/a&gt;，先把 helm cli 與 kubernetes 上的 helm tiller 都設定好&lt;/p&gt;
&lt;h1 id=&#34;deploy-prometheus&#34;&gt;Deploy Prometheus&lt;/h1&gt;
&lt;p&gt;我把我的寶藏都放在這了&lt;a href=&#34;https://github.com/chechiachang/prometheus-kubernetes&#34;&gt;https://github.com/chechiachang/prometheus-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載下來的 .sh ，跑之前養成習慣貓一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat install.sh

#!/bin/bash
HELM_NAME=prometheus-1

helm upgrade --install ${HELM_NAME} stable/prometheus \
  --namespace default \
  --values values-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/prometheus&#34;&gt;Prometheus Stable Chart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;values.yaml 很長，但其實各個元件設定是重複的,設定好各自的 image,
replicas, service, topology 等等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alertmanager:
  enabled: true

kubeStateMetrics:
  enabled: true

nodeExporter:
  enabled: true

server:
  enabled: true

pushgateway:
  enabled: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;底下有更多 runtime 的設定檔&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定義好 global 的 scrape 間距，越短 metrics 維度就越精準&lt;/li&gt;
&lt;li&gt;PersistenVolume 強謝建議開起來，維持歷史的資料
&lt;ul&gt;
&lt;li&gt;加上 storage usage 的 self monitoring（之後會講) 才不會滿出來 server 掛掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;server 的 scrapeConfigs 是 server 去收集的 job 設定。稍後再來細講。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;server:
  global:
    ## How frequently to scrape targets by default
    ##
    scrape_interval: 10s
    ## How long until a scrape request times out
    ##
    scrape_timeout: 10s
    ## How frequently to evaluate rules
    ##
    evaluation_interval: 10s
  persistentVolume:
    ## If true, Prometheus server will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Prometheus server data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Prometheus server data Persistent Volume annotations
    ##
    annotations: {}

    ## Prometheus server data Persistent Volume existing claim name
    ## Requires server.persistentVolume.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: &amp;quot;&amp;quot;

    ## Prometheus server data Persistent Volume mount root path
    ##
    mountPath: /data

    ## Prometheus server data Persistent Volume size
    ##
    size: 80Gi

alertmanagerFiles:

serverFiles:

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部屬完看一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pods --selector=&#39;app=prometheus&#39;

NAME                                             READY   STATUS    RESTARTS   AGE
prometheus-alertmanager-694d6694c6-dvkwd         2/2     Running   0          8d
prometheus-kube-state-metrics-85f6d75f8b-7vlkp   1/1     Running   0          8d
prometheus-node-exporter-2mpjc                   1/1     Running   0          8d
prometheus-node-exporter-kg7fj                   1/1     Running   0          51d
prometheus-node-exporter-snnn5                   1/1     Running   0          8d
prometheus-pushgateway-5cdfb4979c-dnmjn          1/1     Running   0          8d
prometheus-server-59b8b8ccb4-bplkx               2/2     Running   0          8d

kubectl get services --selector=&#39;app=prometheus&#39;

NAME                            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
prometheus-alertmanager         ClusterIP   10.15.241.66   &amp;lt;none&amp;gt;        80/TCP     197d
prometheus-kube-state-metrics   ClusterIP   None           &amp;lt;none&amp;gt;        80/TCP     197d
prometheus-node-exporter        ClusterIP   None           &amp;lt;none&amp;gt;        9100/TCP   197d
prometheus-pushgateway          ClusterIP   10.15.254.0    &amp;lt;none&amp;gt;        9091/TCP   197d
prometheus-server               ClusterIP   10.15.245.10   &amp;lt;none&amp;gt;        80/TCP     197d

kubectl get endpoints --selector=&#39;app=prometheus&#39;

NAME                            ENDPOINTS                                             AGE
prometheus-alertmanager         10.12.6.220:9093                                      197d
prometheus-kube-state-metrics   10.12.6.222:8080                                      197d
prometheus-node-exporter        10.140.0.30:9100,10.140.0.9:9100,10.140.15.212:9100   197d
prometheus-pushgateway          10.12.6.211:9091                                      197d
prometheus-server               10.12.3.14:9090                                       197d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;簡單說明一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prometheus-server 是主要的 api-server 以及 time series database&lt;/li&gt;
&lt;li&gt;alertmanager 負責告警工作&lt;/li&gt;
&lt;li&gt;pushgateway 提供 client 端主動推送 metrics 給 server 的 endpoint&lt;/li&gt;
&lt;li&gt;kube-state-metrics 是開來收集 cluster wide 的 metrics, 像是 pods running counts, deployment ready count, total pods number 等等 metrics&lt;/li&gt;
&lt;li&gt;node-exporter 是 daemonsets, 把每一個 node 的 metrics, 像是 memory, cpu, disk&amp;hellip;等資料,收集出來&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要服務存取就是透過 prometheus-server&lt;/p&gt;
&lt;h1 id=&#34;access-prometheus-server&#34;&gt;Access Prometheus server&lt;/h1&gt;
&lt;p&gt;除了直接 exec -it 進去 prometheus-server 以外，由於 prometheus 本身有提供 web portal, 所以我們這邊透過 port forwarding 打到本機上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PROMETHEUS_POD_NAME=$(kc get po -n default --selector=&#39;app=prometheus,component=server&#39; -o=jsonpath=&#39;{.items[0].metadata.name}&#39;)

kubectl --namespace default port-forward ${PROMETHEUS_POD_NAME} 9090
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;透過 browser 就可以連入操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:9090
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以透過 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/querying/api/&#34;&gt;HTTP API&lt;/a&gt; 用程式接入控制&lt;/p&gt;
&lt;h1 id=&#34;prometheus-web&#34;&gt;Prometheus Web&lt;/h1&gt;
&lt;p&gt;Prometheus 本慎提供的 UI 其實功能就很強大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以查到 (已經匯入存在) 的 metrics&lt;/li&gt;
&lt;li&gt;可以在上面執行 PromQL 查詢語法&lt;/li&gt;
&lt;li&gt;查詢運行的 status&lt;/li&gt;
&lt;li&gt;查詢目前所有收集的 targets 的狀態,有收集器掛了也可以在這邊看到&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;輕鬆自架 prometheus&lt;/li&gt;
&lt;li&gt;Prometheus 頁面有精簡，但是功能完整的 graph 製圖&lt;/li&gt;
&lt;li&gt;但大家通常會使用 Grafana 搭配使用, 用過都說讚, 我們明天繼續&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Prometheus Deploy Grafana</title>
      <link>https://chechia.net/post/prometheus-deploy-grafana/</link>
      <pubDate>Fri, 04 Oct 2019 08:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/prometheus-deploy-grafana/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus / Grafana (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deployment-on-kubernetes/&#34;&gt;GKE 上自架 Prometheus / Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GKE 上自架 Grafana 與設定&lt;/li&gt;
&lt;li&gt;使用 exporter 監測 GKE 上的各項服務&lt;/li&gt;
&lt;li&gt;輸出 kubernetes 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 redis-ha 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 kafka 的監測數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Grafana Introduction&lt;/li&gt;
&lt;li&gt;Deploy Grafana&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;grafana-introduction&#34;&gt;Grafana Introduction&lt;/h1&gt;
&lt;p&gt;上偏我們簡單介紹了 Prometheus，prometheus 的 Web Portol 已經附上簡單的 Query 與 Graph 工具，但一般我們在使用時，還是會搭配 Grafana 來使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grafana.com/grafana/&#34;&gt;Grafana 在官網上提到&lt;/a&gt; 是一個 Analytics system，可以協助了解運行資料，建立完整的 dashboard。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支援許多圖表，直線圖，長條圖，區域分析，基本上需要的都有&lt;/li&gt;
&lt;li&gt;在圖表上定義 alter，並且主動告警，整合其他通訊軟體&lt;/li&gt;
&lt;li&gt;對後端 data source 的整合，可以同時使用 ELK, prometheus, influxdb 等 30 多種的資料來源&lt;/li&gt;
&lt;li&gt;有許多公開的 plugin 與 dashboard 可以匯入使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之功能強大，至於用起來的感覺，個人是非常推薦。如果有大得想要試玩看看，可以直接到 &lt;a href=&#34;https://play.grafana.org/d/000000029/prometheus-demo-dashboard?orgId=1&amp;amp;refresh=5m&#34;&gt;Grafana Live Demo&lt;/a&gt; 上面試玩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般使用都會圍繞 dashboard 為核心，透過單一畫面，一覽目前使用者需要讀取的資料&lt;/li&gt;
&lt;li&gt;左上角的下拉選單，可以選擇不同的 dashboards&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;與-kibana-做比較&#34;&gt;與 Kibana 做比較&lt;/h1&gt;
&lt;p&gt;雖然大部分使用上，我們都會使用 ELK 一套，而 Prometheus + Grafana 另一套。但其實兩邊的 data source 都可以互接。例如 grafana 可以吃 elasticsearch 的 data source，而 kibana 有 prometheus module。&lt;/p&gt;
&lt;p&gt;我們這邊基於兩款前端分析工具，稍微做個比較，底層的 data source 差異這邊先不提。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是開源: 兩者的開源社群都非常強大&lt;/li&gt;
&lt;li&gt;兩者內建的 dashboard 都非常完整，而且不斷推出新功能&lt;/li&gt;
&lt;li&gt;Log vs Metrics:
&lt;ul&gt;
&lt;li&gt;Kibana 的 metrics 也是像 log 一樣的 key value pairs，能夠 explore 未定義的 log&lt;/li&gt;
&lt;li&gt;Grafana 的 UI 專注於呈現 time series 的 metrics，並沒有提供 data 的欄位搜尋，而是使用語法 Query 來取得數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data source:
&lt;ul&gt;
&lt;li&gt;Grafana 可以收集各種不同的後端資料來源&lt;/li&gt;
&lt;li&gt;ELK 主要核心還是 ELK stack，用其他 Module 輔助其他資料源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;deploy-grafana&#34;&gt;Deploy Grafana&lt;/h1&gt;
&lt;p&gt;我把我的寶藏都放在這了&lt;a href=&#34;https://github.com/chechiachang/prometheus-kubernetes&#34;&gt;https://github.com/chechiachang/prometheus-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載下來的 .sh ，跑之前養成習慣貓一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd grafana

cat install.sh

#!/bin/bash
HELM_NAME=grafana-1

helm upgrade --install grafana stable/grafana \
  --namespace default \
  --values values-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;
&lt;p&gt;我們這邊用 helm 部屬，&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/grafana&#34;&gt;Grafana Stable Chart&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;簡單看一下設定檔&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim values-staging.yaml

replicas: 1

deploymentStrategy: RollingUpdate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Grafana 是支援 &lt;a href=&#34;https://grafana.com/docs/tutorials/ha_setup/&#34;&gt;Grafana HA&lt;/a&gt; ，其實也非常簡單，就是把 grafana 本身的 dashboard database 從每個 grafana 一台 SQLite，變成外部統一的 MySQL，統一讀取後端資料，前端就可水平擴展。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

image:
  repository: grafana/grafana
  tag: 6.0.0
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一些 Pod 的基本配置， health check 使用內建的 api，有需要也可以直接打 api&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;securityContext:
  runAsUser: 472
  fsGroup: 472


extraConfigmapMounts: []
  # - name: certs-configmap
  #   mountPath: /etc/grafana/ssl/
  #   configMap: certs-configmap
  #   readOnly: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有要開外部 ingress，需要 ssl 的話可以從這邊掛進去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: LoadBalancer
  port: 80
  targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
  annotations: {}
  labels: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: &amp;quot;true&amp;quot;
  labels: {}
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊可以開 service load balancer, 以及 ingress，看實際使用的需求&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;persistence:
  enabled: true
  initChownData: true
  # storageClassName: default
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  # annotations: {}
  # subPath: &amp;quot;&amp;quot;
  # existingClaim:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Persistent Volume 作為本地儲存建議都開起來，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Administrator credentials when not using an existing secret (see below)
adminUser: admin
# adminPassword: strongpassword

# Use an existing secret for the admin user.
admin:
  existingSecret: &amp;quot;&amp;quot;
  userKey: admin-user
  passwordKey: admin-password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;帳號密碼建議使用 secret 掛進去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;datasources: {}
#  datasources.yaml:
#    apiVersion: 1
#    datasources:
#    - name: Prometheus
#      type: prometheus
#      url: http://prometheus-prometheus-server
#      access: proxy
#      isDefault: true

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/&amp;lt;provider_name&amp;gt;
##
dashboardProviders: {}
#  dashboardproviders.yaml:
#    apiVersion: 1
#    providers:
#    - name: &#39;default&#39;
#      orgId: 1
#      folder: &#39;&#39;
#      type: file
#      disableDeletion: false
#      editable: true
#      options:
#        path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards: {}
  # default:
  #   some-dashboard:
  #     json: |
  #       $RAW_JSON
  #   custom-dashboard:
  #     file: dashboards/custom-dashboard.json
  #   prometheus-stats:
  #     gnetId: 2
  #     revision: 2
  #     datasource: Prometheus
  #   local-dashboard:
  #     url: https://example.com/repository/test.json
  #   local-dashboard-base64:
  #     url: https://example.com/repository/test-b64.json
  #     b64content: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Data source, Dashboard 想要直接載入，可以在這邊設定，或是 grafana 起來後，透過 Web UI 進去新增也可以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Grafana&#39;s primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後是 grafana.ini 核心 runtime 設定，更多設定可以參考&lt;a href=&#34;http://docs.grafana.org/installation/configuration/&#34;&gt;官方文件&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;
&lt;p&gt;部屬完看一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get po --selector=&#39;app=grafana&#39;


&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;access&#34;&gt;Access&lt;/h1&gt;
&lt;p&gt;如果沒有透過 service load balancer 打出來，一樣可以使用 kubectl 做 port forwarding，權限就是 context 的權限，沒有 cluster context 的使用者就會進步來&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRAFANA_POD_NAME=$(kc get po -n default --selector=&#39;app=grafana&#39; -o=jsonpath=&#39;{.items[0].metadata.name}&#39;)
kubectl --namespace default port-forward ${GRAFANA_POD_NAME} 3000

http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由於我們透過 service load balancer，gcp 會在外部幫忙架一個 load balancer，
可以直接透過 load balancer ip 存取，如果想設定 dns，指向這個 ip 後記得去調整 grafana 的 server hostname。&lt;/p&gt;
&lt;p&gt;使用 secret 的密碼登入，username: grafana，這個是系統管理員&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get secret --namespace default grafana -o jsonpath=&amp;quot;{.data.admin-password}&amp;quot; | base64 --decode ; echo
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;configuration-1&#34;&gt;Configuration&lt;/h1&gt;
&lt;p&gt;近來畫面後先到左邊的&lt;a href=&#34;https://play.grafana.org/plugins&#34;&gt;Configuration&lt;/a&gt; 調整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;產生新的 user org 與 user，把 admin 權限控制在需要的人手上&lt;/li&gt;
&lt;li&gt;把 prometheus data source 加進來，就可以直接看到 prometheus 裡面的資料。&lt;/li&gt;
&lt;li&gt;切換到非管理員的 user 繼續操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;import-dashboard&#34;&gt;Import Dashboard&lt;/h3&gt;
&lt;p&gt;Grafana 網站上已經有&lt;a href=&#34;https://grafana.com/grafana/dashboards&#34;&gt;超多設置好的 Dashboard&lt;/a&gt; 可以直接 import，大部分的服務都已經有別人幫我們把視覺畫圖表拉好，使用社群主流的 exporter 的話，參數直接接好。我們匯入後再進行簡單的客製化調整即可。&lt;/p&gt;
&lt;p&gt;我們鐵人賽有用到的服務，都已經有 dashboard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes Cluster: 6417
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/dashboards/6417&#34;&gt;https://grafana.com/dashboards/6417&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka Exporter Overview: 7589
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/dashboards/7589&#34;&gt;https://grafana.com/dashboards/7589&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prometheus Redis: 763
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/dashboards/763&#34;&gt;https://grafana.com/dashboards/763&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes Deployment Statefulset Daemonset metrics: 8588
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/dashboards/8588&#34;&gt;https://grafana.com/dashboards/8588&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haproxy Metrics Servers: 367
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/dashboards/367&#34;&gt;https://grafana.com/dashboards/367&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to grafana lab to find more dashboards&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;export-dashboard&#34;&gt;Export Dashboard&lt;/h3&gt;
&lt;p&gt;dashboard 會依照登入使用者的需求做調整，每個腳色需要看到的圖表都不同，基本上讓各個腳色都能一眼看到所需的表格即可&lt;/p&gt;
&lt;p&gt;自己的調整過的 dashboard 也可以匯出分享&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;p&gt;到這邊就可以正常使用 grafana了，資料來源的 exporter 我們會搭配前幾周分享過的服務，一起來講&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prometheus Deploy Grafana</title>
      <link>https://chechia.net/post/prometheus-scrape/</link>
      <pubDate>Fri, 04 Oct 2019 08:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/prometheus-scrape/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus / Grafana (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deployment-on-kubernetes/&#34;&gt;GKE 上自架 Prometheus / Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GKE 上自架 Grafana 與設定&lt;/li&gt;
&lt;li&gt;使用 exporter 監測 GKE 上的各項服務&lt;/li&gt;
&lt;li&gt;輸出 kubernetes 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 redis-ha 的監測數據&lt;/li&gt;
&lt;li&gt;輸出 kafka 的監測數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus scrape&lt;/li&gt;
&lt;li&gt;scrape_configs&lt;/li&gt;
&lt;li&gt;Node exporter&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;scrape&#34;&gt;Scrape&lt;/h1&gt;
&lt;p&gt;Prometheus 收集 metrics 的方式，是從被監測的目標的 http endpoints 收集 (scrape) metrics，目標服務有提供 export metrics 的 endpoint 的話，稱作 exporter。例如 kafka-exporter 就會收集 kafka 運行的 metrics，變成 http endpoint instance，prometheus 從 instance 上面收集資料。&lt;/p&gt;
&lt;p&gt;Promethesu 自己也是也提供 metrics endpoint，並且自己透過 scrape 自己的 metrics endpoint 來取得 self-monitoring 的 metrics。把自己當作外部服務監測。下面的設定就是直接透過 http://localhost:9090/metrics 取得。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: &#39;codelab-monitor&#39;

# A scrape configuration containing exactly one endpoint to scrape:
# Here it&#39;s Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=&amp;lt;job_name&amp;gt;` to any timeseries scraped from this config.
  - job_name: &#39;prometheus&#39;

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: [&#39;localhost:9090&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;透過 Grafana -&amp;gt; explore 就可以看到 Prometheus 的 metrics&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;static/img/prometheus-self-metrics.jpg&#34; alt=&#34;Prometheus Self Metrics&#34;&gt;&lt;/p&gt;
&lt;p&gt;而使用 metrics 時最好先查到說明文件，確定 metrics 的定義與計算方法，才可以有效的製圖。關於 &lt;a href=&#34;https://wiki.lnd.bz/display/LFTC/Prometheus&#34;&gt;Prometheus Exporter 的 metrics 說明&lt;/a&gt; 可以到這裡來找。&lt;/p&gt;
&lt;h1 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h1&gt;
&lt;p&gt;收集到 metrics 之後就可以在 prometheus 中 query，但一般使用不會一直跑進來下 query，而是會直接搭配 dashboard 製圖呈現，讓資料一覽無遺。&lt;/p&gt;
&lt;p&gt;例如 prometheus 自身的 metrics 也已經有搭配好的 &lt;a href=&#34;https://grafana.com/grafana/dashboards/3662&#34;&gt;Prometheus overview dashboard&lt;/a&gt; 可以使用。&lt;/p&gt;
&lt;p&gt;使用方法非常簡單，直接透過 Grafana import dashboard，裡面就把重要的 prometheus metrics 都放在 dashboard 上了。不能更方便了。&lt;/p&gt;
&lt;h1 id=&#34;exporters&#34;&gt;Exporters&lt;/h1&gt;
&lt;p&gt;Prometheus 支援超級多 exporter，包含 prometheus 自身直接維護的 exporter，還有非常多外部服務友也開源的 exporter 可以使用，&lt;a href=&#34;https://prometheus.io/docs/instrumenting/exporters/#exporters-and-integrations&#34;&gt;清單可以到這裡看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有希望自己公司的服務，也使用 prometheus&lt;/p&gt;
&lt;h1 id=&#34;node-exporter&#34;&gt;Node Exporter&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;prometheus/node_exporter&lt;/a&gt; 是 Prometheus 直接維護的 project，主要用途就是將 node / vm 的運行 metrics export 出來。有點類似 ELK 的 metricbeat。&lt;/p&gt;
&lt;p&gt;我們這邊是在 kubernetes 上執行，所以直接做成 daemonsets 在 k8s 上跑，部屬方面在 deploy prometheus-server 的 helm chart 中，就已經附帶整合，部屬到每一台 node 上。&lt;/p&gt;
&lt;p&gt;如果是在 kubernetes 外的環境，例如說 on premise server，或是 gcp instance，希望自己部屬 node exporter 的話，可以參考&lt;a href=&#34;https://prometheus.io/docs/guides/node-exporter/&#34;&gt;這篇教學文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我們這邊可以看一下 config，以及 job 定義。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim values-staging.yaml

  # Enable nodeExporter
  nodeExporter:
    create: true

  prometheus.yml:
    rule_files:
      - /etc/config/rules
      - /etc/config/alerts

    scrape_configs:

    # Add kubernetes node job
    - job_name: &#39;kubernetes-nodes&#39;

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS &amp;amp; bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery &amp;amp; scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # &amp;lt;kubernetes_sd_config&amp;gt;.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kubernetes_sd_config: 可以透過 kubernetes API 來取得 scrape target，以這邊的設定，是使用 node role 去集群取得 node，並且每一台 node 都當成一個 target，這樣就不用把所有 node 都手動加到 job 的 instance list 裡面。&lt;/p&gt;
&lt;p&gt;從 node role 取得的 instance 會使用 ip 標註或是 hostname 標註。node role 有提供 node 範圍的 meta labels，例如 __meta_kubernetes_node_name, _&lt;em&gt;meta_kubernetes_node_address&lt;/em&gt; 等等，方便查找整理資料。&lt;/p&gt;
&lt;p&gt;relabel_configs: 針對資料做額外標記，方便之後在 grafana 上面依據需求 query。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redis Ha Sentinel</title>
      <link>https://chechia.net/post/redis-ha-sentinel/</link>
      <pubDate>Sun, 29 Sep 2019 17:14:38 +0800</pubDate>
      
      <guid>https://chechia.net/post/redis-ha-sentinel/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 GKE 上部署 Redis HA
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-deployment/&#34;&gt;使用 helm 部署 redis-ha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-sentinel/&#34;&gt;Redis HA with sentinel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Redis HA with HAproxy&lt;/li&gt;
&lt;li&gt;集群內部的 HA 設定，網路設定&lt;/li&gt;
&lt;li&gt;應用端的基本範例，效能調校&lt;/li&gt;
&lt;li&gt;在 GKE 上維運 redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;redis-sentinel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;redis sentinel 與 redis 使用相容的 api，直接使用 redis-cli 透過 26479 port 連入，可以連到 sentinel，透過 sentinel 可以取得 redis master 的狀態與連線設定。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-cli -h redis-redis-ha -p 26479
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上篇我們的 redis-ha 安裝完變這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get po | grep redis

NAME                                                     READY   STATUS      RESTARTS   AGE
redis-1-redis-ha-server-0                                3/3     Running     0          3d4h
redis-1-redis-ha-server-1                                3/3     Running     0          3d5h
redis-1-redis-ha-server-2                                3/3     Running     0          3d4h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有三個 Pod，裡面都是一個 redis, sentinel, 跟 exporter，這篇文章會專注講 sentinel 的功能與機制&lt;/p&gt;
&lt;h1 id=&#34;redis-sentinel&#34;&gt;Redis Sentinel&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://redis.io/topics/sentinel&#34;&gt;redis-sentinel&lt;/a&gt; 為 Redis 提供高可用服務，實務上可以透過 sentinel 在錯誤發生時，自動進行 failover。除此之外 sentinel 也提供監測，通知，與 redis 的設定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitoring: 持續檢測 master 與 slave instances 的狀態&lt;/li&gt;
&lt;li&gt;Notification: 有事件發生可以發出通知&lt;/li&gt;
&lt;li&gt;Automatic failover: 如果 master 失效自動啟動 failover 程序，將一個 slave 指排為 master，並設定其他 slave 使用新的 master&lt;/li&gt;
&lt;li&gt;Configuration provider: 為客戶端提供 service discovery，客戶可以通過 sentinel 取得 master 的連線資料。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;distributed&#34;&gt;Distributed&lt;/h1&gt;
&lt;p&gt;Sentinel 本身是一個分散式系統，如我們的範例所示，三個 Pod 立面個含有一個 sentinel，組成 3 個 instace 的 sentinel cluster。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;錯誤檢測是由多個 sentinel 判定，要有多個 sentinel 都接收 master 已失效的訊息，才會判定成失效。這樣可以降低 false positive 的機率。&lt;/li&gt;
&lt;li&gt;分散讓 sentinel 本身也具備高可用性，可以承受一定程度的錯誤。用來 fail over 的系統，不能因為自身的單點錯誤(single point failure) 而倒是整個 redis 失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;fundamental&#34;&gt;Fundamental&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一個耐用的 sentinel 需要至少三個 instance&lt;/li&gt;
&lt;li&gt;最好把 instance 分散在多個獨立的隔離區域，意思是說，三個不會放在同一台機器上，或是放在同一個區域內，因為一個區域網路故障就全死。&lt;/li&gt;
&lt;li&gt;app 使用 sentinel 的話，客戶端要支援&lt;/li&gt;
&lt;li&gt;有時常測試的 HA 環境，才是有效的 HA&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;h2 id=&#34;sentinel-specific-configuration-options&#34;&gt;Sentinel specific configuration options&lt;/h2&gt;
&lt;p&gt;在上篇我們跳過 sentinel 的設定，這邊說明一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sentinel:
  port: 26379
  quorum: 2
  config:
    ## Additional sentinel conf options can be added below. Only options that
    ## are expressed in the format simialar to &#39;sentinel xxx mymaster xxx&#39; will
    ## be properly templated.
    ## For available options see http://download.redis.io/redis-stable/sentinel.conf
    down-after-milliseconds: 10000
    ## Failover timeout value in milliseconds
    failover-timeout: 180000
    parallel-syncs: 5

  ## Custom sentinel.conf files used to override default settings. If this file is
  ## specified then the sentinel.config above will be ignored.
  # customConfig: |-
      # Define configuration here

  resources: {}
  #  requests:
  #    memory: 200Mi
  #    cpu: 100m
  #  limits:
  #    memory: 200Mi
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;quorum&#34;&gt;Quorum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;quorum 是每次確定 master 失效時，需要達成共識的 sentinel 數量。&lt;/li&gt;
&lt;li&gt;Quorum 使用在錯誤檢測，確定錯誤真的發生後，sentinel 會以多數決(majority) 的方式選出 sentinel leader，讓 leader 處理 failover。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以我們的例子為例，總共三個，確認 master 死掉只要兩個 sentinel 達成共識即可啟動 failover 程序。可以直接測試一下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl logs -f redis-1-redis-ha-server-0

kubectl delete po redis-1-redis-ha-server-1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log 一個 Pod ，然後直接把另一個 Pod 幹掉 這樣會有 1/3 的機率砍到 master，砍中的話可以看到 redis failover ，選出新的 master 的過程。&lt;/p&gt;
&lt;p&gt;這邊要注意，由於我們的 sentinel 與 redis 是放在同樣一個 Pod，幹掉的同時也殺了一個 sentinel，只剩 2 個，剛好達成共識。如果 quorum 是三，就要等第三個 sentinel 回來才能取得 quorum。&lt;/p&gt;
&lt;p&gt;sentinel 與 redis 的配置位置，之後的 topology 會討論。&lt;/p&gt;
&lt;h3 id=&#34;configurations&#34;&gt;Configurations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;down-after-milliseconds: 超過多少時間沒回應 ping 或正確回應，才覺得 master 壞了&lt;/li&gt;
&lt;li&gt;parallel-syncs: failover 時，要重新與新 master sync 的 slave 數量。數量越多 sync 時間就越久，數量少就有較多 slave 沒 sync 資料，可能會讓 client read 到舊的資料
&lt;ul&gt;
&lt;li&gt;雖然 sync 是 non-blocking ，但在 sync 大筆資料時，slave 可能會沒有回應。設定為 1 的話，最多只會有一個 slave 下線 sync。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些參數也可以透過 redis-cli 直接連入更改，但我們是在 kubernetes 上跑，臨時的更改不易保存，所以盡可能把這些configurations 放在 configmap 裡面。&lt;/p&gt;
&lt;h1 id=&#34;sentinel-command&#34;&gt;Sentinel command&lt;/h1&gt;
&lt;p&gt;6379 port 連入 redis，26379 連入 redis sentinel。都是使用 redis-cli，兩者兼容的 protocol。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 使用 kubectl 連入，多個 container 要明確指出連入的 container
kubectl exec -it redis-1-redis-ha-server-0 --container redis sh

redis-cli -h redis-redis-ha -p 26479

# 近來先 ping 一下
$ ping
PONG

# 列出所有 master 的資訊，以及設定資訊
sentinel master
redis-2-redis-ha:26379&amp;gt; sentinel masters
1)  1) &amp;quot;name&amp;quot;
    2) &amp;quot;mymaster&amp;quot;
    3) &amp;quot;ip&amp;quot;
    4) &amp;quot;10.15.242.245&amp;quot;
    5) &amp;quot;port&amp;quot;
    6) &amp;quot;6379&amp;quot;
    7) &amp;quot;runid&amp;quot;
    8) &amp;quot;63a97460b7c3745577931dad406df9609c4e2464&amp;quot;
    9) &amp;quot;flags&amp;quot;
   10) &amp;quot;master&amp;quot;
   11) &amp;quot;link-pending-commands&amp;quot;
   12) &amp;quot;0&amp;quot;
   13) &amp;quot;link-refcount&amp;quot;
   14) &amp;quot;1&amp;quot;
   15) &amp;quot;last-ping-sent&amp;quot;
   16) &amp;quot;0&amp;quot;
   17) &amp;quot;last-ok-ping-reply&amp;quot;
   18) &amp;quot;479&amp;quot;
   19) &amp;quot;last-ping-reply&amp;quot;
   20) &amp;quot;479&amp;quot;
   21) &amp;quot;down-after-milliseconds&amp;quot;
   22) &amp;quot;5000&amp;quot;
   23) &amp;quot;info-refresh&amp;quot;
   24) &amp;quot;5756&amp;quot;
   25) &amp;quot;role-reported&amp;quot;
   26) &amp;quot;master&amp;quot;
   27) &amp;quot;role-reported-time&amp;quot;
   28) &amp;quot;348144787&amp;quot;
   29) &amp;quot;config-epoch&amp;quot;
   30) &amp;quot;13&amp;quot;
   31) &amp;quot;num-slaves&amp;quot;
   32) &amp;quot;2&amp;quot;
   33) &amp;quot;num-other-sentinels&amp;quot;
   34) &amp;quot;2&amp;quot;
   35) &amp;quot;quorum&amp;quot;
   36) &amp;quot;2&amp;quot;
   37) &amp;quot;failover-timeout&amp;quot;
   38) &amp;quot;180000&amp;quot;
   39) &amp;quot;parallel-syncs&amp;quot;
   40) &amp;quot;5&amp;quot;

# 取得集群中的 master 訊息，目前有一個 master
$ sentinel master mymaster

# 取得集群中的 slaves 訊息，目前有兩個 slave
$ sentinel slaves mymaster

# 取得集群中的 master 訊息
$ sentinel sentinels mymaster

# 檢查 sentinel 的 quorum
$ sentinel ckquorum mymaster

OK 3 usable Sentinels. Quorum and failover authorization can be reached

# 強迫觸發一次 failover
sentinel failover mymaster
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;sentinel-connection&#34;&gt;Sentinel Connection&lt;/h1&gt;
&lt;p&gt;有支援的客戶端設定，以&lt;a href=&#34;https://github.com/FZambia/sentinel/blob/master/sentinel.go&#34;&gt;Golang FZambia/sentinel&lt;/a&gt; 為例，透過 sentinel 取得 redis-pool。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 使用獨立的 pod service 連入 sentinel，協助彼此識別
sntnl := &amp;amp;sentinel.Sentinel{
	Addrs:      []string{&amp;quot;redis-2-redis-ha-announce-0:26379&amp;quot;, &amp;quot;redis-2-redis-ha-announce-0:26379&amp;quot;, &amp;quot;redis-2-redis-ha-announce-0:26379&amp;quot;},
	MasterName: &amp;quot;mymaster&amp;quot;,
	Dial: func(addr string) (redis.Conn, error) {
		timeout := 500 * time.Millisecond
		c, err := redis.DialTimeout(&amp;quot;tcp&amp;quot;, addr, timeout, timeout, timeout)
		if err != nil {
			return nil, err
		}
		return c, nil
	},
}

# 產生 connection pool
return &amp;amp;redis.Pool{
	MaxIdle:     3,
	MaxActive:   64,
	Wait:        true,
	IdleTimeout: 240 * time.Second,
	Dial: func() (redis.Conn, error) {

    # 透過 sentinel 取得 master address，如果 master 死了，再執行可以拿到新的 master
		masterAddr, err := sntnl.MasterAddr()
		if err != nil {
			return nil, err
		}
		c, err := redis.Dial(&amp;quot;tcp&amp;quot;, masterAddr)
		if err != nil {
			return nil, err
		}
		return c, nil
	},
	TestOnBorrow: func(c redis.Conn, t time.Time) error {
		if !sentinel.TestRole(c, &amp;quot;master&amp;quot;) {
			return errors.New(&amp;quot;Role check failed&amp;quot;)
		} else {
			return nil
		}
	},
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊要注意，客戶端 (golang) 處理 connection 的 exception，要記得重新執行 sntnl.MasterAddr() 來取得 failover 後新指派的 master。&lt;/p&gt;
&lt;h1 id=&#34;client-測試&#34;&gt;Client 測試&lt;/h1&gt;
&lt;p&gt;寫一個 golang redis 的 client 跑起來。這個部分我們在 &lt;a href=&#34;https://chechia.net/post/kafka-basic-usage/&#34;&gt;kafka的章節&lt;/a&gt;做過類似的事情，可以簡單湊一個玩玩。&lt;/p&gt;
&lt;h1 id=&#34;延伸問題&#34;&gt;延伸問題&lt;/h1&gt;
&lt;p&gt;使用上面的 golang 範例，確實是能透過 sentinel 取得 master，再向 master 取得連線。但這邊有兩個問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客戶端需要支援 sentinel&lt;/li&gt;
&lt;li&gt;客戶端要感知 sentinel 的位址連線，才能知道所有 sentinel 的位置，設定又產生耦合
&lt;ul&gt;
&lt;li&gt;不能彈性的調度 sentinel，如果需要增加或是減少 sentinel，客戶端需要重新設定&lt;/li&gt;
&lt;li&gt;雖然 sentinel 有 HA，可是客戶端對 sentinel 的設定沒有 HA，萬一已知的所有 sentinel 掛了就全掛&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有沒有更優雅的方式使用 sentinel，我們下篇會討論使用 HAProxy 來完成&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redis Ha Deployment</title>
      <link>https://chechia.net/post/redis-ha-deployment/</link>
      <pubDate>Sat, 28 Sep 2019 15:14:23 +0800</pubDate>
      
      <guid>https://chechia.net/post/redis-ha-deployment/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 GKE 上部署 Redis HA
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-deployment/&#34;&gt;使用 helm 部署 redis-ha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Redis HA with sentinel&lt;/li&gt;
&lt;li&gt;Redis HA with HAproxy&lt;/li&gt;
&lt;li&gt;集群內部的 HA 設定，網路設定&lt;/li&gt;
&lt;li&gt;應用端的基本範例，效能調校&lt;/li&gt;
&lt;li&gt;在 GKE 上維運 redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;今天的文會比較短，因為我早上在綠島已經水肺潛水潛了三趟，有點累哈哈&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;redis-introduction&#34;&gt;Redis introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; 是常用的 in-memory 的資料儲存庫，可作為資料庫，快取，message broker 使用，都非常好用。Redis 官方支援 high availability，使用的是 &lt;a href=&#34;https://redis.io/topics/sentinel&#34;&gt;redis-sentinel&lt;/a&gt;
，今天我們就來部署一個有完整 sentinel 的 redis-ha。&lt;/p&gt;
&lt;p&gt;Redis 另外提供了一個 solution &lt;a href=&#34;https://redis.io/topics/cluster-tutorial&#34;&gt;Redis cluster (multiple writer solution)&lt;/a&gt;，作為增加資料輸出帶寬，與增加資料耐用度的分散式解決方案，與 redis sentinel  所處理的 ha 問題是不相同的。有機會我們也來談。&lt;/p&gt;
&lt;h1 id=&#34;deploy&#34;&gt;Deploy&lt;/h1&gt;
&lt;p&gt;我把我的寶藏都在這了&lt;a href=&#34;https://github.com/chechiachang/go-redis-ha&#34;&gt;https://github.com/chechiachang/go-redis-ha&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載下來的 .sh ，跑之前養成習慣貓一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat install.sh

#!/bin/bash
HELM_NAME=redis-1

# Stable: chart version: redis-ha-3.6.1	app version: 5.0.5
helm upgrade --install ${HELM_NAME} stable/redis-ha --version 3.6.1 -f values-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;
&lt;p&gt;我們這邊用 helm 部屬，之所以用 helm ，因為這是我想到最簡單的方法，能讓輕鬆擁有一套功能完整的 kafka。所以我們先用。&lt;/p&gt;
&lt;p&gt;沒用過 helm 的大德可以參考 &lt;a href=&#34;https://helm.sh/docs/using_helm/#quickstart&#34;&gt;Helm Quickstart&lt;/a&gt;，先把 helm cli 與 kubernetes 上的 helm tiller 都設定好&lt;/p&gt;
&lt;h3 id=&#34;redis-ha&#34;&gt;Redis-ha&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/redis-ha&#34;&gt;helm chart github&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;
&lt;p&gt;這邊是用 upgrade &amp;ndash;install，已安裝就 upgrade，沒安裝就 install，之後可以用這個指令升版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;values-staging&#34;&gt;values-staging&lt;/h3&gt;
&lt;p&gt;完整的 values.yaml 在 &lt;a href=&#34;https://github.com/helm/charts/blob/master/stable/redis-ha/values.yaml&#34;&gt;helm chart github&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image:
  repository: redis
  tag: 5.0.5-alpine
  pullPolicy: IfNotPresent

## replicas number for each component
replicas: 3

servers:
  serviceType: ClusterIP  # [ClusterIP|LoadBalancer]
  annotations: {}

auth: true

## Redis password
## Defaults to a random 10-character alphanumeric string if not set and auth is true
## ref: https://github.com/kubernetes/charts/blob/master/stable/redis-ha/templates/redis-auth-secret.yaml
##
#redisPassword:

## Use existing secret containing key `authKey` (ignores redisPassword)
existingSecret: redis-credentials

## Defines the key holding the redis password in existing secret.
authKey: auth
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊有準備 secret/redis-credentials 裡面的 key[auth] 存放 redis 密碼，要連入的 pod 需要掛載 secret 並把 auth 匯入。&lt;/p&gt;
&lt;h3 id=&#34;version&#34;&gt;Version&lt;/h3&gt;
&lt;p&gt;這邊使用的版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chart version:    redis-ha-3.6.1&lt;/li&gt;
&lt;li&gt;app version:      5.0.5&lt;/li&gt;
&lt;li&gt;Redis Image:      redis:5.0.5-alpine&lt;/li&gt;
&lt;li&gt;Redis exporter:   oliver006/redis_exporter:v0.31.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安裝完變這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get po | grep redis

NAME                                                     READY   STATUS      RESTARTS   AGE
redis-1-redis-ha-server-0                                3/3     Running     0          3d4h
redis-1-redis-ha-server-1                                3/3     Running     0          3d5h
redis-1-redis-ha-server-2                                3/3     Running     0          3d4h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;describe pod 可以看到裡面有三個 container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis: 主要的 redis&lt;/li&gt;
&lt;li&gt;sentinel: 維護 redis 可用性的服務，會監測 redis 狀態，並把連線指派到新的 master&lt;/li&gt;
&lt;li&gt;redis-exporter: 把 redis 的運行資料(metrics) 送出到 promethues&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;networking&#34;&gt;Networking&lt;/h1&gt;
&lt;p&gt;Service&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME                        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                       AGE    SELECTOR
redis-redis-ha              ClusterIP   None           &amp;lt;none&amp;gt;        6379/TCP,26379/TCP,9121/TCP   46m    app=redis-ha,release=redis
redis-redis-ha-announce-0   ClusterIP   10.3.243.81    &amp;lt;none&amp;gt;        6379/TCP,26379/TCP            46m    app=redis-ha,release=redis,statefulset.kubernetes.io/pod-name=redis-redis-ha-server-0
redis-redis-ha-announce-1   ClusterIP   10.3.250.151   &amp;lt;none&amp;gt;        6379/TCP,26379/TCP            46m    app=redis-ha,release=redis,statefulset.kubernetes.io/pod-name=redis-redis-ha-server-1
redis-redis-ha-announce-2   ClusterIP   10.3.242.59    &amp;lt;none&amp;gt;        6379/TCP,26379/TCP            46m    app=redis-ha,release=redis,statefulset.kubernetes.io/pod-name=redis-redis-ha-server-2
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;nslookup redis-redis-ha

Name:      redis-redis-ha
Address 1: 10.0.0.42 redis-redis-ha-server-1.redis-redis-ha.default.svc.cluster.local
Address 2: 10.0.1.13 redis-redis-ha-server-2.redis-redis-ha.default.svc.cluster.local
Address 3: 10.0.2.8 redis-redis-ha-server-0.redis-redis-ha.default.svc.cluster.local

Name:      redis-redis-ha-server-1.redis-redis-ha.default.svc.cluster.local
Address 1: 10.0.0.43 redis-redis-ha-server-1.redis-redis-ha.default.svc.cluster.local
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;連線&#34;&gt;連線&lt;/h1&gt;
&lt;p&gt;所有連線透過 redis-redis-ha service 連入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-cli -h redis-redis-ha -p 6479 -a &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或是直接指定 redis instance 連入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-cli -h redis-redis-ha-announce-0 -p 6479 -a &amp;lt;password&amp;gt;
redis-cli -h redis-redis-ha-announce-1 -p 6479 -a &amp;lt;password&amp;gt;
redis-cli -h redis-redis-ha-announce-2 -p 6479 -a &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但上面兩者會有問題，redis 只有 master 是 writable，連入 slave 會變成 readonly，如果沒有任何 probe 機智，那就是每次連線時有 2/3 機率會連到 readonly 的 redis slave 。所以連線前要先找到正確的 master&lt;/p&gt;
&lt;h1 id=&#34;sentinel&#34;&gt;Sentinel&lt;/h1&gt;
&lt;p&gt;Sentinel 是 redis 官方提供的 HA solution，主要負責監控 redis 的狀態，並控制 redis master 的 failover 機制，一但超過 threshold，sentinel 就會把 master failover 到其他 slave 上。並把 master 連線指向新 master。&lt;/p&gt;
&lt;p&gt;redis sentinel 與 redis 使用相容的 api，直接使用 redis-cli 透過 26479 port 連入，可以連到 sentinel，透過 sentinel 可以取得 redis master 的狀態與連線設定。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-cli -h redis-redis-ha -p 26479
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;app-端支援-sentinel&#34;&gt;App 端支援 sentinel&lt;/h1&gt;
&lt;p&gt;需要有支援 sentinel 的 redis client library，例如: python redis-py 有支援 sentinel 的設定。&lt;/p&gt;
&lt;p&gt;這邊就會比較麻煩，因為不是所有的語言對 redis-sentinel 的支援性都夠好，或是沒辦法設定到妮旺使用的情境上。&lt;/p&gt;
&lt;p&gt;如果你找得到支援性良好的套件，恭喜你。不然就像我們公司，與我們的需求有衝突，只好自己 fork library。&lt;/p&gt;
&lt;p&gt;所以說直接使用有支援 redis-sentinel 可能會遇到一些問題。那也沒有更好的解決方法？我們下次說明使用 HAproxy 的高可用方案。&lt;/p&gt;
&lt;h1 id=&#34;benchmark&#34;&gt;Benchmark&lt;/h1&gt;
&lt;p&gt;部署完後，可以跑一下 benchmark，看看在 kubernetes 上運行的效能有沒有符合需求。&lt;/p&gt;
&lt;p&gt;Run a redis pod with sleep command
NOTE: CPU usage (rapidly) increasing during benchmark
DON&amp;rsquo;T DO THIS on PRODUCTION&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl run test-redis --image redis:5.0.5-alpine --command sleep 36000
kubectl exec -it test-redis-xxxxxxxxx-xxxxx sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Benchmark&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-benchmark --help
redis-benchmark \
  -h haproxy-service.local \
  -p 6379 \
  -c 100 \
  -d 30 \
  -n 1000000

====== MSET (10 keys) ======
100000 requests completed in 2.32 seconds
50 parallel clients
3 bytes payload
keep alive: 1

85.37% &amp;lt;= 1 milliseconds
98.06% &amp;lt;= 2 milliseconds
99.18% &amp;lt;= 3 milliseconds
99.62% &amp;lt;= 4 milliseconds
99.93% &amp;lt;= 5 milliseconds
100.00% &amp;lt;= 5 milliseconds
43066.32 requests per second
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kafka HA Continued</title>
      <link>https://chechia.net/post/kafka-ha-continued/</link>
      <pubDate>Thu, 26 Sep 2019 22:50:32 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-ha-continued/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continuerd&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Kafka&amp;rsquo;s quorum set&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;kafka-的-quorum-set&#34;&gt;Kafka 的 quorum set&lt;/h1&gt;
&lt;p&gt;這篇跟上篇其實再講 quorum，應該連在一起，但礙於篇幅（以及我個人的時間ＱＱ）拆成了兩篇。各位有需要可以回顧一下。&lt;/p&gt;
&lt;h3 id=&#34;replicated-log-commit-decision&#34;&gt;Replicated log commit decision&lt;/h3&gt;
&lt;p&gt;上篇提到了兩個維持 replicated log 的 model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有更新進來，leader 等待所有 follower 都 ack，才 commit。&lt;/li&gt;
&lt;li&gt;有更新進來，leader 取得所有 node (2n+1) 中的多數 node 回應(n+1)，就 commit。而 leader election 時，必須比對 node 上的 log，決定誰是 electable leader(有最完整 log 的 follower)，這樣稱為共識(Quorum)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者的好處是，所有 node 都有完整的 log 後，leader 才會 commit，回覆給客戶 commit  的資訊，所以每個 follower 都是 leader electable 人人都可以當 leader，leader 一故障就選擇新的 leader 即可。壞處就是 leader 在等待所有 follow ack 的時間會非常久，而且時間複雜度可能會隨 cluster size scale，或是變成要等最慢的 node 回應(worst case)。這樣在 node 數量多的時候非常不經濟。&lt;/p&gt;
&lt;p&gt;後者的好處是，n+1 node ack 後就 commit，leader commit 的速度是由前段班的回應速度決定。leader 出現故障，仍能維持多數 node 的資料正確。&lt;/p&gt;
&lt;h3 id=&#34;leader-election-decision&#34;&gt;Leader election decision&lt;/h3&gt;
&lt;p&gt;Leader Election 的問題也是類似，如果選擇 leader 時，所有的 follower 都比對過 log，這樣花的時間會很久。要知道，這是個分散式的架構，沒有中心化的 controller，也就是 follower 彼此需要交互比對。而且時間隨 follower 數量 scale。 造成topic partition 沒有 leader 的時間(downtime)太長。&lt;/p&gt;
&lt;p&gt;如果使用 majority，也就是當 leader 死掉，產生新的 leader election 時，只詢問 n+1 個 follower ，然後從選出 log 最完整的人當 leader， 這樣過程中每個 follower 彼此比對，確認，然後才選出 leader，確認 leader 的結果，所花的時間會大幅縮短。&lt;/p&gt;
&lt;p&gt;當然，這麼做產生的 tradeoff，就是萬一取得多數決的 n+1 個 follower 裡面，沒有最完整的 log ，那從裡頭選出來的 leader 自然也沒有完整 log，選出來的 leader 就會遺失資料。&lt;/p&gt;
&lt;h3 id=&#34;一個完整的-quorum-機制&#34;&gt;一個完整的 Quorum 機制&lt;/h3&gt;
&lt;p&gt;這不是 kafka 的機制，但我們順帶聊聊。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commit decision 使用多數決(majority)&lt;/li&gt;
&lt;li&gt;leader election 也使用多數決&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總共有 2n+1 replicas，leader 取得 n+1 ack 才能 commit message。然後 leader election 時，從至少 n+1 個 follower 中取得多數決才能選出 leader。有過半的完整log，加上取得過半數的人確認，兩者產生 overlap。這樣的共識就確保有完整的 log 的 follower 一定會出現在 leader election 中，確保選出來的 leader 有完整 log。&lt;/p&gt;
&lt;p&gt;好處如前面描述，整體效能由前段班的速度決定。&lt;/p&gt;
&lt;p&gt;壞處是，很容易就沒有足夠的 electable leader。要容忍 1 個錯誤，需要 3 個完整備份，要容忍 2 個錯誤需要 5 個備份。在實務上，只靠依賴夠多的 redundency 容錯非常的不實際：每一次寫入需要 5 倍寫入跟硬碟空間，但整體效能只有 1/5。資料量大就直接ＧＧ。所以 quorum 才會只存在分散式集群(ex. zookeeper)，而不會直接用在儲存系統。&lt;/p&gt;
&lt;h3 id=&#34;kafkas-approach&#34;&gt;Kafka&amp;rsquo;s approach&lt;/h3&gt;
&lt;p&gt;Kafka 不使用 majority vote，而是去動態維護一套 in-sync replicas(ISR) ，這些 ISR 會跟上 leader 的進度，而只有這些 ISR 才能是 leader eligible。一個 update 只有在所有 ISR 都 ack 後才會 commit。&lt;/p&gt;
&lt;p&gt;ISR 的狀態不放在 kafka 而放在 zookeeper 上，也就是目前哪些 node 是 ISR 的記錄存在 zookeeper。這件事對維持 kafka 節點上，leader 能夠分散在各個 kafka node 上(leader rebalance)是很重要的。&lt;/p&gt;
&lt;p&gt;kafka&amp;rsquo;s approach 與 majority vote，在等待 message commit ack 上所花的成本是一樣的。 然而在 leader election 上，kafka 的 ISR 確保了更多個 eligiable leader 的數量，持續維持在合理的數量，而不會要維持大量個 redundency。ISR 放在外部，更方便 kafka 做 leader rebalance，增加穩定度。&lt;/p&gt;
&lt;h1 id=&#34;unclean-leader-election&#34;&gt;Unclean leader election&lt;/h1&gt;
&lt;p&gt;如果 leaders 都死光了會怎樣？&lt;/p&gt;
&lt;p&gt;只要有一個 replica in-sync，Kafka 就保證資料的完整性。然而所有可用的 leaders 都死了，這個就無法保證。&lt;/p&gt;
&lt;p&gt;如果這個情形發生了，kafka 會做以下處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等 ISR 中有人完全回復過來，然後選這個 node 作為 leader(有資料遺失的風險)&lt;/li&gt;
&lt;li&gt;直接選擇第一個回覆的 node (不一定在 ISR 中)，先回覆的就指派為 leader&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者犧牲 availability （回覆前沒有 leader 可作讀寫）來確保資料是來自 ISR，雖然錯誤中無法讀寫(downtime)，但可以確定錯誤前跟錯誤後的資料都來自 ISR&lt;/p&gt;
&lt;p&gt;後者犧牲 consistency （來自非 ISR 的 leader 可能導致資料不正確），然而卻能更快的從錯誤中回覆，減少 downtime&lt;/p&gt;
&lt;p&gt;0.11.0.0  後的 kafka 預設是選擇前者，也就是 consistency over availability，當然這可以在設定更改。&lt;/p&gt;
&lt;h1 id=&#34;availability-and-durability-guarantees&#34;&gt;Availability and Durability Guarantees&lt;/h1&gt;
&lt;p&gt;近一步考慮 client 的影響。&lt;/p&gt;
&lt;p&gt;Producer 在寫入時可以選擇 message 需要多少 acknowledge，0, 1 or all，ack=all 指的是 message 收到所有 in-sync replicas 的 ack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 2 replicas 中有 1 個故障，這時寫入只要收到 1 個 ISR 的 ack，就達成 ack=all&lt;/li&gt;
&lt;li&gt;但如果不幸剩下一個 replicas 也死了 (0/0 ack)，寫入的資料就會遺失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些使用情境，會希望資料的耐用度(Durability)優先於可用性(Availability)，可以透過以下兩個方式設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;禁用 unclean leader election，效果是如果所有的 replicas 都失效，則整個 partition 都失效，直到前一個 leader 回復正常。&lt;/li&gt;
&lt;li&gt;指定可接受的最少 ISR，如果 partition 中的 ISR 低於這個數量，就停止寫入這個 partition，直到 ISR 的數量回覆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣雖然犧牲了可用性，卻可以最大程度地確保資料的可靠性。&lt;/p&gt;
&lt;h1 id=&#34;複本管理&#34;&gt;複本管理&lt;/h1&gt;
&lt;p&gt;上面的討論都只是再說一個 topic，實務中 kafka 中會有大量的 topic ，乘上 partition number 與 replication factor，成千上萬的複本分散在集群中，kafka 會試圖分散 replicas 到集群中，並讓 leader 的數量平均在 node 上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka HA Topology</title>
      <link>https://chechia.net/post/kafka-ha-topology/</link>
      <pubDate>Wed, 25 Sep 2019 22:50:32 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-ha-topology/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continuerd&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Zookeeper Multi-server setup&lt;/li&gt;
&lt;li&gt;Kafka Multi-broker setup&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;zookeeper-multi-server&#34;&gt;Zookeeper Multi-Server&lt;/h1&gt;
&lt;p&gt;為了維持 zookeeper 有效運作，cluster 必須維持 majority (多數)，也就是至少一半的機器在線。如果總共 3 台，便可以忍受 1 台故障仍保有 majority。如果是 5 台就可以容忍 2 台故障。一般來說都建議使用基數數量。&lt;a href=&#34;https://zookeeper.apache.org/doc/r3.4.12/zookeeperAdmin.html#sc_zkMulitServerSetup&#34;&gt;Zookeeper Multi Server Setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;普遍情況，3 台 zookeeper 已經是 production ready 的狀態，但如果為了更高的可用性，以方便進行單節點停機維護，可以增加節點數量。&lt;/p&gt;
&lt;h3 id=&#34;topology&#34;&gt;Topology&lt;/h3&gt;
&lt;p&gt;需要將 zookeeper 放在不同的機器上，不同的網路環境，甚至是不同的雲平台區域上，以承受不同程度的故障。例如單台機器故障，或是區域性的網路故障。&lt;/p&gt;
&lt;p&gt;我們這邊會使用 Kubernetes PodAntiAffinity，要求 scheduler 在部屬時，必須將 zookeeper 分散到不同的機器上。設定如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim values-staging.yaml

zookeeper:
  enabled: true

  resources: ~

  env:
    ZK_HEAP_SIZE: &amp;quot;1G&amp;quot;

  persistence:
    enabled: false

  image:
    PullPolicy: &amp;quot;IfNotPresent&amp;quot;

  url: &amp;quot;&amp;quot;
  port: 2181

  ## Pod scheduling preferences (by default keep pods within a release on separate nodes).
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## By default we don&#39;t set affinity:
  affinity: # Criteria by which pod label-values influence scheduling for zookeeper pods.
   podAntiAffinity:
     requiredDuringSchedulingIgnoredDuringExecution:
       - topologyKey: &amp;quot;kubernetes.io/hostname&amp;quot;
         labelSelector:
           matchLabels:
             release: zookeeper
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution，如果 topologyKey 已經有指定 label 的 pod 存在，則無法部署，需要數到其他台機器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pods --output wide | grep zookeeper

NAME                  READY   STATUS      RESTARTS   AGE     IP              NODE                                    
kafka-0-zookeeper-0   1/1     Running     0          42d     10.8.12.4       gke-chechiachang-pool-1-e06e6d00-pc98   
kafka-0-zookeeper-1   1/1     Running     0          42d     10.8.4.4        gke-chechiachang-pool-1-e06e6d00-c29q   
kafka-0-zookeeper-2   1/1     Running     0          42d     10.8.3.6        gke-chechiachang-pool-1-e06e6d00-krwc   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果是 zookeeper 都分配到不同的機器上。&lt;/p&gt;
&lt;h3 id=&#34;guarantees&#34;&gt;Guarantees&lt;/h3&gt;
&lt;p&gt;Zookeeper 對於資料一致性，有這些保障 &lt;a href=&#34;https://zookeeper.apache.org/doc/r3.5.5/zookeeperProgrammers.html#ch_zkGuarantees&#34;&gt;Consistency Guarantees&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;順序一致性：資料更新的順序，與發送的順序一致&lt;/li&gt;
&lt;li&gt;原子性：資料更新只有成功或失敗，沒有部份效果&lt;/li&gt;
&lt;li&gt;系統一致性：可戶端連到 server 看到的東西都是一樣，無關連入哪個 server&lt;/li&gt;
&lt;li&gt;可靠性：
&lt;ul&gt;
&lt;li&gt;客戶端的更新請求，一但收到 server 回覆更新成功，便會持續保存狀態。某些錯誤會造成客戶端收不到回覆， 可能是網路問題，或是 server 內部問題，這邊就無法確定 server 上的狀態，是否被更新了，或是請求已經遺失了。&lt;/li&gt;
&lt;li&gt;從客戶讀取到的資料都是以確認的資料，不會因為 server 故障回滾(Roll back)而回到舊的狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;kafka-的設定&#34;&gt;Kafka 的設定&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;## The StatefulSet installs 3 pods by default
replicas: 3

resources:
   limits:
     cpu: 200m
     memory: 4096Mi
   requests:
     cpu: 100m
     memory: 1024Mi
kafkaHeapOptions: &amp;quot;-Xmx4G -Xms1G&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;設定 broker 的數量，以及 Pod 提供的 resource，並且透過 heapOption 把記憶體設定塞進 JVM&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;affinity:
 affinity:
   podAntiAffinity:
     requiredDuringSchedulingIgnoredDuringExecution:
     - labelSelector:
         matchExpressions:
         - key: app
           operator: In
           values:
           - kafka
       topologyKey: &amp;quot;kubernetes.io/hostname&amp;quot;
   podAffinity:
     preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 50
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
                - zookeeper
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊下了兩個 affinity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;podAntiAffinity 盡量讓 kafka-broker 分散到不同機器上&lt;/li&gt;
&lt;li&gt;podAffinity 讓 broker prefer 跟 zookeeper 放在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分散的理由同上，不希望一台機器死了，就讓多個 broker 跟著死&lt;/p&gt;
&lt;p&gt;要和 zookeeper 放在一起，就要看需求與實際環境調整&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configurationOverrides:
  &amp;quot;default.replication.factor&amp;quot;: 3
  &amp;quot;offsets.topic.replication.factor&amp;quot;: 2 # Increased from 1 to 2 for higher output
  &amp;quot;offsets.topic.num.partitions&amp;quot;: 3
  &amp;quot;confluent.support.metrics.enable&amp;quot;: false  # Disables confluent metric submission
  &amp;quot;auto.leader.rebalance.enable&amp;quot;: true
  &amp;quot;auto.create.topics.enable&amp;quot;: true
  &amp;quot;message.max.bytes&amp;quot;: &amp;quot;16000000&amp;quot; # Extend global topic max message bytes to 16 Mb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊再把 broker 運行的設定參數塞進去，參數的用途大多與複本與高可用機制有關下面都會提到。&lt;/p&gt;
&lt;h1 id=&#34;kafka-的複本機制&#34;&gt;Kafka 的複本機制&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#replication&#34;&gt;kafka 的副本機制&lt;/a&gt; 預設將各個 topic partition 的 log 分散到 server 上，如果其中一台 server 故障，資料仍然可用。&lt;/p&gt;
&lt;p&gt;兩個重要的設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;num.partitions=N&lt;/li&gt;
&lt;li&gt;default.replication.factor=M&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kafka 預設使用複本，所有機制與設計都圍繞著複本。如果（因為某些原因）不希望使用複本，可將 replication factor 設為 1。&lt;/p&gt;
&lt;p&gt;replication 的單位是 topic partition，正常狀況下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個 partition 會有一個 leader，以及零個或以上個 follower&lt;/li&gt;
&lt;li&gt;leader + follower 總數是 replication factor&lt;/li&gt;
&lt;li&gt;所有讀寫都是對 leader 讀寫&lt;/li&gt;
&lt;li&gt;leader 的 log 會同步到 follower 上，leader 與 follower 狀態是一樣的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;election--load-balance&#34;&gt;Election &amp;amp; Load balance&lt;/h3&gt;
&lt;p&gt;通常一個 topic 會有多個 partition，也就是說，每個 topic 會有多個 partition leader，分散負載&lt;/p&gt;
&lt;p&gt;通常 topic partition 的總數會比 broker 的數量多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以上一篇範例，我們有三個 kafka-0-broker 各自是一個 Pod&lt;/li&gt;
&lt;li&gt;有 topic: ticker 跟預設的 &lt;code&gt;__consumer_offset__&lt;/code&gt;，乘上 partition number 的設定值(N)，會有 2N 個 partitions&lt;/li&gt;
&lt;li&gt;partitiion 會有各自的複本，kafka 會盡量將相同 topic 的複本分散到不同 broker 上&lt;/li&gt;
&lt;li&gt;kafka 也會盡量維持 partition 的 leader 分散在不同的 broker 上，這個部分 kafka 會透過算法做 leader election，也可手動使用腳本做 &lt;a href=&#34;https://kafka.apache.org/documentation/#basic_ops_leader_balancing&#34;&gt;Balancing leadership&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總之，topic 的 partition 與 leader 會分散到 broker 上，維持 partition 的可用性。&lt;/p&gt;
&lt;h3 id=&#34;sync&#34;&gt;sync&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;node 要能夠維持 zookeeper 的 session (zookeeper 有 heartbeat 機制)&lt;/li&gt;
&lt;li&gt;follower 不能落後 leader 太多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kafka 能保障資料不會遺失，只要至少一個 node 是在 sync 的狀態。例如本來有三個 partition，其中兩個 partition 不同步，只要其中一個 partition 是同步，便能作為 leader 持續提供正確的 message。&lt;/p&gt;
&lt;h1 id=&#34;replicated-logs&#34;&gt;Replicated Logs&lt;/h1&gt;
&lt;p&gt;kafka 透過 &lt;a href=&#34;https://kafka.apache.org/documentation/#design_replicatedlog&#34;&gt;replicated log&lt;/a&gt; 維持分散式的 partition&lt;/p&gt;
&lt;p&gt;複本間要維持共識(consensus)的最簡單機制，就是單一 leader 決定，其他 follower 跟隨。然而萬一 leader 死了，選出的新 leader 卻還沒跟上原先 leader 的資料。這時便使用 replicated log，來確保新的 leader 就算原先沒跟上，也能透過 replicated log 隨後跟上且不遺失資料。維持 log 一直都同步的前提，就是 leader 要一直確認 followers 的 log 都有跟上，這個其實就是變相的多 leader，效能消耗較大。&lt;/p&gt;
&lt;p&gt;另一個維持 log 機制，如果希望 follower 彼此的 log 應該先進行比對，讓資料交接過程有 overlap，這個過程稱為 Quorum。一個常用的方式是多數決(majority)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果總共有 2n+1 的 node，leader 要向 n+1 個 follower 取得共識，才確定這個 log 已經 commit 了&lt;/li&gt;
&lt;li&gt;leader 總是維持 n+1 follower 的 log 有跟上，因此可以容忍最多 n 個 node 死了，集群整體能有 n+1 的 node 維持著正確的 commited log&lt;/li&gt;
&lt;li&gt;不用向所有 node 確認才 commit ，節省了一半的 ack&lt;/li&gt;
&lt;li&gt;majarity 的另一個好處是，n+1 共識的速度是由前 1/2 快的 node 決定的。由於只要先取得 n+1 就可以 commit，速度快的 node 會先回應，讓整體速度提升。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka Operation Scripts</title>
      <link>https://chechia.net/post/kafka-operation-scripts/</link>
      <pubDate>Wed, 25 Sep 2019 22:50:32 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-operation-scripts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continuerd&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;從 Zookeeper 獲取資訊&lt;/li&gt;
&lt;li&gt;取得並處理 topic&lt;/li&gt;
&lt;li&gt;benchmark kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;zookeeper&#34;&gt;zookeeper&lt;/h1&gt;
&lt;p&gt;zookeeper 是 kafka 的分散式協調系統，在 kafka 上多個節點間需要協調的內容，例如：彼此節點的ID，位置與當前狀態，或是跨節點 topic 的設定與狀態。取名叫做 zookeeper 就是在協調混亂的分散式系統，,裡面各種不同種類的服務都要協調，象個動物園管理員。&lt;a href=&#34;https://zookeeper.apache.org/doc/r3.3.3/zookeeperAdmin.html&#34;&gt;Zookeeper 的官方文件&lt;/a&gt; 有更詳細的說明。&lt;/p&gt;
&lt;p&gt;Kafka 的節點資訊，與當前狀態，是放在 zookeeper 上，我們可以透過以下指令取得&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 首先先取得 zkCli 的 cli，這個只有連進任何一台 zookeeper 內部都有
kubectl exec -it kafka-0-zookeeper-0 --container kafka-broker bash

# 由於是在 Pod 內部，直接 localhost 詢問本地
/usr/bin/zkCli.sh -server localhost:2181

Connecting to localhost:2181
2019-09-25 15:02:36,089 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT
2019-09-25 15:02:36,096 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=kafka-0-zookeeper-0.kafka-0-zookeeper-headless.default.svc.cluster.local
2019-09-25 15:02:36,096 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_131
2019-09-25 15:02:36,100 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation
2019-09-25 15:02:36,100 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/java-8-openjdk-amd64/jre
2019-09-25 15:02:36,100 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/usr/bin/../build/classes:/usr/bin/../build/lib/*.jar:/usr/bin/../share/zookeeper/zookeeper-3.4.10.jar:/usr/bin/../share/zookeeper/slf4j-log4j12-1.6.1.jar:/usr/bin/../share/zookeeper/slf4j-api-1.6.1.jar:/usr/bin/../share/zookeeper/netty-3.10.5.Final.jar:/usr/bin/../share/zookeeper/log4j-1.2.16.jar:/usr/bin/../share/zookeeper/jline-0.9.94.jar:/usr/bin/../src/java/lib/*.jar:/usr/bin/../etc/zookeeper:
2019-09-25 15:02:36,100 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib
2019-09-25 15:02:36,100 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp
2019-09-25 15:02:36,100 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&amp;lt;NA&amp;gt;
2019-09-25 15:02:36,101 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux
2019-09-25 15:02:36,101 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64
2019-09-25 15:02:36,101 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=4.14.127+
2019-09-25 15:02:36,101 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=zookeeper
2019-09-25 15:02:36,102 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/home/zookeeper
2019-09-25 15:02:36,102 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/
2019-09-25 15:02:36,105 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@42110406
Welcome to ZooKeeper!
2019-09-25 15:02:36,160 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error)
JLine support is enabled
2019-09-25 15:02:36,374 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/127.0.0.1:2181, initiating session
2019-09-25 15:02:36,393 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x16d67baf1310001, negotiated timeout = 30000

WATCHER::

WatchedEvent state:SyncConnected type:None path:null
[zk: localhost:2181(CONNECTED) 0]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取得 kafka broker 資料&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# List root Nodes
$ ls /

[cluster, controller, controller_epoch, brokers, zookeeper, admin, isr_change_notification, consumers, log_dir_event_notification, latest_producer_id_block, config]

# Brokers 的資料節點
$ ls /brokers
[ids, topics, seqid]

# List /brokers/ids 得到三個 kafka broker
$ ls /brokers/ids
[0, 1, 2]

# 列出所有 topic 名稱
ls /brokers/topics
[ticker]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ticker 是上篇範利用到的 topic&lt;/p&gt;
&lt;p&gt;簡單來說，zookeeper 存放這些狀態與 topic 的 metadata&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;儲存核心的狀態與資料，特別是 broker 萬一掛掉，也還需要維持的資料&lt;/li&gt;
&lt;li&gt;協調工作，例如協助 broker 處理 quorum，紀錄 partition master 等&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 離開 zkCli
quit
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;kafka&#34;&gt;Kafka&lt;/h1&gt;
&lt;p&gt;這邊一樣先連線進去一台 broker，取得 kafka binary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl exec -it kafka-0-0 --container kafka-broker bash

 ls /usr/bin/ | grep kafka
kafka-acls
kafka-broker-api-versions
kafka-configs
kafka-console-consumer
kafka-console-producer
kafka-consumer-groups
kafka-consumer-perf-test
kafka-delegation-tokens
kafka-delete-records
kafka-dump-log
kafka-log-dirs
kafka-mirror-maker
kafka-preferred-replica-election
kafka-producer-perf-test
kafka-reassign-partitions
kafka-replica-verification
kafka-run-class
kafka-server-start
kafka-server-stop
kafka-streams-application-reset
kafka-topics
kafka-verifiable-consumer
kafka-verifiable-producer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很多工具，我們這邊只會看其中幾個&lt;/p&gt;
&lt;h3 id=&#34;topic-資訊&#34;&gt;topic 資訊&lt;/h3&gt;
&lt;p&gt;Topic 的資訊，跟 zookeeper 要&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# List topics
/usr/bin/kafka-topics --list --zookeeper kafka-0-zookeeper

ticker
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;操作-message&#34;&gt;操作 message&lt;/h3&gt;
&lt;p&gt;從 topic 取得 message&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This will create a new console-consumer and start consuming message to stdout
/usr/bin/kafka-console-consumer \
--bootstrap-server localhost:9092 \
--topic engine_topic_soundwave_USD \
--timeout 0 \
--from-beginning
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果 ticker 那個 example pod 還在執行，這邊就會收到 ticker 的每秒 message&lt;/p&gt;
&lt;p&gt;如果沒有，也可以開啟另一個 broker 的連線&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl exec -it kafka-0-1 --container kafka-broker bash

# 使用 producer 的 console 連入，topic 把 message 塞進去
/usr/bin/kafka-console-producer \
--broker-list localhost:9092\
 --topic ticker

tick [enter]
tick [enter]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kafka-console-consumer 那個 terminal 就會收到 message&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tick
tick
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當然也可以使用 consumer group&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Use consumer to check ticker topics
/usr/bin/kafka-console-consumer \
--bootstrap-server localhost:9092 \
--topic ticker \
--group test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有做過上面的操作產生 consumer group，就可以透過 consumer API，取得 consumer group 狀態&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Check consumer group
/usr/bin/kafka-consumer-groups \
--bootstrap-server localhost:9092 \
--group ticker \
--describe

Consumer group &#39;test&#39; has no active members.

TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID     HOST            CLIENT-ID
ticker          0          23              23              0               -               -               -
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;topic-設定操作&#34;&gt;Topic 設定操作&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#topicconfigs&#34;&gt;Topic 設定文件&lt;/a&gt; 在此&lt;/p&gt;
&lt;p&gt;這邊透過 kafka-configs 從 zookeeper 取得 topic 設定，這邊的 max.message.bytes，是這個 topic 每個 message 的最大上限。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/kafka-configs --zookeeper kafka-0-zookeeper:2181 --describe max.message.bytes --entity-type topics

Configs for topic &#39;__consumer_offsets&#39; are segment.bytes=104857600,cleanup.policy=compact,compression.type=producer
Configs for topic &#39;ticker&#39; are
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;__consumer__offsets&lt;/code&gt; 是系統的 topic ，紀錄目前 consumer 讀取的位置。&lt;/p&gt;
&lt;p&gt;ticker 沒有設定，就是 producer 當初產生 topic 時沒有指定，使用 default 值&lt;/p&gt;
&lt;p&gt;由於我們公司的使用情境常常會超過，所以可以檢查 producer app 那端送出的 message 大小，在比較這邊的設定。當然現在 ticker 的範例，只有一個 0-60 的數值，並不會超過。這個可以在 helm install 的時候，使用 value.yaml 傳入時更改。&lt;/p&gt;
&lt;p&gt;不喜歡這個值，可以更改，這邊增加到 16MB&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TOPIC=ticker

/usr/bin/kafka-configs \
  --zookeeper kafka-3-zookeeper:2181 \
  --entity-type topics \
  --alter \
  --entity-name ${TOPIC} \
  --add-config max.message.bytes=16000000

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;benchmark&#34;&gt;Benchmark&lt;/h1&gt;
&lt;p&gt;使用內建工具跑 benchmark&lt;/p&gt;
&lt;p&gt;Producer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/kafka-producer-perf-test \
  --num-records 100 \
  --record-size 100 \
  --topic performance-test \
  --throughput 100 \
  --producer-props bootstrap.servers=kafka:9092 max.in.flight.requests.per.connection=5 batch.size=100 compression.type=none

100 records sent, 99.108028 records/sec (0.01 MB/sec), 26.09 ms avg latency, 334.00 ms max latency, 5 ms 50th, 70 ms 95th, 334 ms 99th, 334 ms 99.9th.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Consumer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/kafka-consumer-perf-test \
  --messages 100 \
  --broker-list=kafka:9092 \
  --topic performance-test \
  --group performance-test \
  --num-fetch-threads 1
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kafka-basic-usage</title>
      <link>https://chechia.net/post/kafka-basic-usage/</link>
      <pubDate>Tue, 24 Sep 2019 21:59:49 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-basic-usage/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;kafka utility scripts, topic operation, kafka benchmark&lt;/li&gt;
&lt;li&gt;集群內部的 HA topology&lt;/li&gt;
&lt;li&gt;集群內部的 HA 設定，網路設定&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在 Kubernetes 中連線 kafka&lt;/li&gt;
&lt;li&gt;使用 golang library 連線到 Kafka&lt;/li&gt;
&lt;li&gt;透過 kafka script 操作 kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;kubernetes-中連線-kafka&#34;&gt;kubernetes 中連線 kafka&lt;/h1&gt;
&lt;p&gt;先看一看 kafka pods&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get pods --selector=&#39;app=kafka&#39;

NAME        READY   STATUS    RESTARTS   AGE
kafka-1-0   1/1     Running   1          26d
kafka-1-1   1/1     Running   0          26d
kafka-1-2   1/1     Running   0          26d

$ kubectl get pods -l &#39;app=zookeeper&#39;

NAME                  READY   STATUS    RESTARTS   AGE
kafka-1-zookeeper-0   1/1     Running   0          26d
kafka-1-zookeeper-1   1/1     Running   0          26d
kafka-1-zookeeper-2   1/1     Running   0          26d

$ kubectl get pods -l &#39;app=kafka-exporter&#39;

NAME                               READY   STATUS    RESTARTS   AGE
kafka-1-exporter-88786d84b-z954z   1/1     Running   5          26d
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;kubectl describe pods kafka-1-0

Name:           kafka-1-0
Namespace:      default
Priority:       0
Node:           gke-chechiachang-pool-1-e4622744-wcq0/10.140.15.212
Labels:         app=kafka
                controller-revision-hash=kafka-1-69986d7477
                release=kafka-1
                statefulset.kubernetes.io/pod-name=kafka-1-0
Annotations:    kubernetes.io/limit-ranger: LimitRanger plugin set: cpu request for container kafka-broker
Status:         Running
IP:             10.12.6.178
Controlled By:  StatefulSet/kafka-1
Containers:
  kafka-broker:
    Image:         confluentinc/cp-kafka:5.0.1
    Port:          9092/TCP
    Host Port:     0/TCP
    Command:
      sh
      -exc
      unset KAFKA_PORT &amp;amp;&amp;amp; \
      export KAFKA_BROKER_ID=${POD_NAME##*-} &amp;amp;&amp;amp; \
      export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092 &amp;amp;&amp;amp; \
      exec /etc/confluent/docker/run

    Requests:
      cpu:      100m
    Liveness:   exec [sh -ec /usr/bin/jps | /bin/grep -q SupportedKafka] delay=30s timeout=5s period=10s #success=1 #failure=3
    Readiness:  tcp-socket :kafka delay=30s timeout=5s period=10s #success=1 #failure=3
    Environment:
      POD_IP:                                   (v1:status.podIP)
      POD_NAME:                                kafka-1-0 (v1:metadata.name)
      POD_NAMESPACE:                           default (v1:metadata.namespace)
      KAFKA_HEAP_OPTS:                         -Xmx4G -Xms1G
      KAFKA_ZOOKEEPER_CONNECT:                 kafka-1-zookeeper:2181
      KAFKA_LOG_DIRS:                          /opt/kafka/data/logs
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE:  false
      KAFKA_DEFAULT_REPLICATION_FACTOR:        3
      KAFKA_MESSAGE_MAX_BYTES:                 16000000
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:  1
      KAFKA_JMX_PORT:                          5555
    Mounts:
      /opt/kafka/data from datadir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-2tm8c (ro)
Conditions:
Volumes:
  datadir:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  datadir-kafka-1-0
    ReadOnly:   false
  default-token-2tm8c:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-2tm8c
    Optional:    false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;講幾個重點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這邊跑起來的是 kafka-broker，接收 producer 與 consumer 來的 request&lt;/li&gt;
&lt;li&gt;這邊用的是 statefulsets，不是完全無狀態的 kafka broker，而把 message 記在 datadir 上，降低故障重啟時可能遺失資料的風險。&lt;/li&gt;
&lt;li&gt;啟動時，把 kubernetes 指定的 pod name 塞進環境變數，然後作為當前 broker 的 ID&lt;/li&gt;
&lt;li&gt;沒有設定 Pod antiAffinity，所以有可能會啟三個 kafka 結果三個跑在同一台 node 上，這樣 node 故障就全死，沒有HA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service--endpoints&#34;&gt;Service &amp;amp; Endpoints&lt;/h3&gt;
&lt;p&gt;看一下 service 與 endpoints
zookeeper 與 exporter 我們這邊先掠過不談，到專章講高可用性與服務監測時，再來討論。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get service -l &#39;app=kafka&#39;

NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
kafka-1            ClusterIP   10.15.242.178   &amp;lt;none&amp;gt;        9092/TCP   26d
kafka-1-headless   ClusterIP   None            &amp;lt;none&amp;gt;        9092/TCP   26d

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;兩個 services&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個是 cluster-ip service，有 single cluster IP 與 load-balance，DNS 會過 kube-proxy。&lt;/li&gt;
&lt;li&gt;一個是 headless service，DNS 沒有過 kube-proxy，而是由 endpoint controller 直接 address record，指向把符合 service selector 的 pod。適合做 service discovery，不會依賴於 kubernetes 的實現。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#headless-services&#34;&gt;詳細說明在官方文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡單來說，kafka broker 會做 auto service discovery，我們可以使用 headless service。&lt;/p&gt;
&lt;p&gt;客戶端(consumer &amp;amp; producer) 連入時，則使用 cluster-ip service，做 load balancing。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get endpoints -l &#39;app=kafka&#39;

NAME                            ENDPOINTS                                                          AGE
kafka-1                         10.12.1.14:9092,10.12.5.133:9092,10.12.6.178:9092                  26d
kafka-1-headless                10.12.1.14:9092,10.12.5.133:9092,10.12.6.178:9092                  26d
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;golang-example&#34;&gt;Golang Example&lt;/h1&gt;
&lt;p&gt;附上簡單的 Golang 客戶端，&lt;a href=&#34;https://github.com/chechiachang/kafka-on-kubernetes&#34;&gt;完整 Github Repository 在這邊&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;context&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/segmentio/kafka-go&amp;quot; // 使用的套件
)

func main() {
	topic := &amp;quot;ticker&amp;quot; // 指定 message 要使用的 topic
	partition := 0 // 指定 partition，由於底下連線指定連線到 partition 的 leader，所以需要指定 partition
	kafkaURL := &amp;quot;kafka-0:9092&amp;quot; // 指定 kafkaURL，也可以透過 os.GetEnv() 從環境變數裡拿到。

  // producer 對指定 topic, partition 的 leader 產生連線
	producerConn, _ := kafka.DialLeader(context.Background(), &amp;quot;tcp&amp;quot;, kafkaURL, topic, partition)
  // 程式結束最後把 connection 關掉。不關會造成 broker 累積大量 connection，需要等待 broker 端 timeout 才會釋放。
	defer producerConn.Close()

	//producerConn.SetWriteDeadline(time.Now().Add(10 * time.Second))
  // 使用 go routine 跑一個 subprocess for loop，一直產生 message 到 kafka topic，這邊的範例是每秒推一個秒數。
	go func() {
		for {
			producerConn.WriteMessages(
				kafka.Message{
					Value: []byte(strconv.Itoa(time.Now().Second())),
				},
			)
			time.Sleep(1 * time.Second)
		}
	}()

	// make a new reader that consumes from topic-A, partition 0
	r := kafka.NewReader(kafka.ReaderConfig{
		Brokers:   []string{kafkaURL},
		Topic:     topic,
		Partition: 0,
		MinBytes:  10e2, // 1KB
		MaxBytes:  10e3, // 10KB
	})
	defer r.Close()
	//r.SetOffset(42)

  // 印出 reader 收到的 message
	for {
		m, err := r.ReadMessage(context.Background())
		if err != nil {
			break
		}
		fmt.Printf(&amp;quot;%v message at offset %d: %s = %s\n&amp;quot;, time.Now(), m.Offset, string(m.Key), string(m.Value))
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊可以使用 Dockerfile 包成一個 container image，然後丟上 kubernetes&lt;/p&gt;
&lt;p&gt;我稍晚補一下 docker image 跟 deployment 方便大家操作好了。&lt;/p&gt;
&lt;p&gt;或是攋人測試，直接 kubectl run 一個 golang base image 讓它 sleep，然後在連進去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl run DEPLOYMENT_NAME --image=golang:1.13.0-alpine3.10 sleep 3600

kubectl exec -it POD_NAME sh
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# 裡面沒有 Git 跟 vim 裝一下
apk add git vim

go get github.com/chechiachang/kafka-on-kubernetes

cd src/github.com/chechiachang/kafka-on-kubernetes/
vim main.go

go build .
./kafka-on-kubernetes

2019-09-24 14:20:46.872554693 +0000 UTC m=+9.154112787 message at offset 1:  = 46
2019-09-24 14:20:47.872563087 +0000 UTC m=+9.154121166 message at offset 2:  = 47
2019-09-24 14:20:48.872568848 +0000 UTC m=+9.154126926 message at offset 3:  = 48
2019-09-24 14:20:49.872574499 +0000 UTC m=+9.154132576 message at offset 4:  = 49
2019-09-24 14:20:50.872579957 +0000 UTC m=+9.154138032 message at offset 5:  = 50
2019-09-24 14:20:51.872588823 +0000 UTC m=+9.154146892 message at offset 6:  = 51
2019-09-24 14:20:52.872594672 +0000 UTC m=+9.154152748 message at offset 7:  = 52
2019-09-24 14:20:53.872599986 +0000 UTC m=+9.154158060 message at offset 8:  = 53
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣就連上了，完成一個最簡單的使用範例。&lt;/p&gt;
&lt;p&gt;這個例子太過簡單，上一篇講的 consumer group, partitions, offset 什麼設定全都沒用上。實務上這些都需要好好思考，並且依據需求做調整設定。&lt;/p&gt;
&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;
&lt;p&gt;把測試用的 deployment 幹掉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl delete deployment DEPLOYMENT_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡述 kafka 在 kubernetes 上運行的狀況，連線方法&lt;/li&gt;
&lt;li&gt;Demo 一個小程式&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka-introduction</title>
      <link>https://chechia.net/post/kafka-introduction/</link>
      <pubDate>Mon, 23 Sep 2019 21:59:49 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-introduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continuerd&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;寫了部屬，本想談一下 kafka 的高可用性配置，看到大德的留言，才想到應該要先跟各位介紹一下 kafka，跟 kafka 的用途。也感謝大德路過發問，我也會順代調整內容。今天就說明何為 kafka，以及在什麼樣的狀況使用。&lt;/p&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡介 kafka&lt;/li&gt;
&lt;li&gt;基本元件&lt;/li&gt;
&lt;li&gt;Kafka 的工作流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;簡介-kafka&#34;&gt;簡介 Kafka&lt;/h1&gt;
&lt;p&gt;Kafka 是分散式的 streaming platform，可以 subscribe &amp;amp; publish 訊息，可以當作是一個功能強大的 message queue 系統，由於分散式的架構，讓 kafka 有很大程度的 fault tolerance。&lt;a href=&#34;https://kafka.apache.org/documentation/#gettingStarted&#34;&gt;原版的說明在這邊&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這邊有幾個東西要解釋。&lt;/p&gt;
&lt;h1 id=&#34;message-queue-system&#34;&gt;Message Queue System&lt;/h1&gt;
&lt;p&gt;當一個系統開始運作時，裡頭會有很多變數，這些變數其實就是在一定的範圍(scope）內，做訊息(message)的傳遞。例如在 app 寫了一個 function ，傳入一個變數的值給 function。&lt;/p&gt;
&lt;p&gt;在複雜的系統中，服務元件彼此也會有傳遞訊息的需求。例如我原本有一個 api-server，其中一段程式碼是效能瓶頸，我把它切出來獨立成一個 worker 的元件，讓它可以在更高效能地方執行，甚至 horizontal scaling。這種情境，辨可能歲需要把一部分的 message 從 api-server 傳到 worker，worker 把吃效能的工作做完，再把結果回傳給 api-server。這時就會需要一個穩定的 message queue system，來穩定，且高效能的傳遞這些 message。&lt;/p&gt;
&lt;p&gt;Message Queue System 實做很多，ActiveMQ, RabbitMQ, &amp;hellip; 等，一些 database 做 message queue 在某些應用場景下也十分適合，例如 Redis 是 in-memory key-value database，內部也實做 pubsub，能夠在某些環境穩定的傳送 message。&lt;/p&gt;
&lt;h1 id=&#34;request-response-vs-publish-subscribe&#34;&gt;Request-Response vs Publish-Subscribe&lt;/h1&gt;
&lt;p&gt;訊息的傳送有很多方式，例如 Http request-response 很適合 server 在無狀態(stateless) 下接受來自客戶端的訊息，每次傳送都重新建立新的 http connection，這樣做有很多好處也很多壞處。其中明顯的壞處是網路資源的浪費，以及訊息的不夠即時，指定特定收件人時發件人會造成額外負擔等。&lt;/p&gt;
&lt;p&gt;使用 Pub-sub pattern的好處，是 publisher 不需要額外處理『這個訊息要送給誰』的工作，而是讓 subscriber 來訂閱需要的訊息類別，一有新的 event 送到該訊息類別，直接透過 broker 推播給 subscriber。不僅即時，節省效能，而且訂閱的彈性很大。&lt;/p&gt;
&lt;h1 id=&#34;kafka-producer--consumer-api&#34;&gt;Kafka producer &amp;amp; Consumer API&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://kafka.apache.org/23/images/kafka-apis.png&#34; alt=&#34;kafka diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kafka 作為 client 與 server 兩邊的溝通平台，提供了許多 API 葛不同角色使用。Producer 產生 message 到特定 topic 上，consumer 訂閱特定 topics，kafak 把符合條件的訊息推播給 consumer。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producer API: 讓 app publish 一連的訊息&lt;/li&gt;
&lt;li&gt;Consumer API: 讓 app subscribe 許多特定 topic，並處理訊息串流(stream)&lt;/li&gt;
&lt;li&gt;Stream API: 讓 app 作為串流中介處理(stream processor)&lt;/li&gt;
&lt;li&gt;Connect API: 與 producer 與 consumer 可以對外部服務連結&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;topics--logs&#34;&gt;Topics &amp;amp; Logs&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://kafka.apache.org/23/images/log_anatomy.png&#34; alt=&#34;kafka-topics&#34;&gt;&lt;/p&gt;
&lt;p&gt;Topic 是 kafka 為訊息串流提供的抽象，topic 是訊息傳送到 kafka 時賦予的類別(category)，作為 publish 與 consume 的判斷依據。&lt;/p&gt;
&lt;h1 id=&#34;partition&#34;&gt;Partition&lt;/h1&gt;
&lt;p&gt;訊息依據 topic 分類存放，並可以依據 replication factor 設定，在 kafka 中存放多個訊息分割(partition)。partition 可以想成是 message queue 的平行化 (parallel)，併發處理訊息可以大幅提昇訊息接收與發送的速度，並且多個副本也提高資料的可用性。&lt;/p&gt;
&lt;p&gt;由於訊息發送跟接收過程可能因為網路與環境而不穩定，這些相同 topic 的 partition 不一定會完全一樣。但 kafka 確保了以下幾點。&lt;/p&gt;
&lt;h1 id=&#34;guarantees&#34;&gt;Guarantees&lt;/h1&gt;
&lt;p&gt;良好配置的 kafka 有以下保證&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;訊息在系統中送出跟被收到的時間不一定，但kafak中，從相同 producer 送出的訊息，送到 topic partition 會維持送出的順序&lt;/li&gt;
&lt;li&gt;Consumer 看見的訊息是與 kafka 中的存放順序一致&lt;/li&gt;
&lt;li&gt;有 replication factor 為 N 的 topic ，可以容忍(fault-tolerance) N-1 個 kafka-server 壞掉，而不影響資料。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然，這邊的前提是有良好配置。錯誤的配置可能會導致訊息不穩定，效能低落，甚至遺失。&lt;/p&gt;
&lt;h1 id=&#34;producer&#34;&gt;Producer&lt;/h1&gt;
&lt;p&gt;Producer 負責把訊息推向一個 topic，並指定訊息應該放在 topic 的哪個 partition。&lt;/p&gt;
&lt;h1 id=&#34;consumer&#34;&gt;Consumer&lt;/h1&gt;
&lt;p&gt;Consumer 會自行標記，形成 consumer group，透過 consumer group 來保障訊息傳遞的次序，容錯，以及擴展的效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kafka.apache.org/23/images/consumer-groups.png&#34; alt=&#34;consumer group&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consumer 透過 consumer group 共享一個 group.id。&lt;/li&gt;
&lt;li&gt;Consumer group 去所有 partitions 裡拿訊息，所有 partitions 的訊息分配到 consumer group 中的 consumer。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;app 在接收訊息時，設置正確的化，在一個 consumer group 中，可以容忍 consumer 失效，仍能確保訊息一指定的次序送達。在需要大流量時，也可調整 consumer 的數量提高負載。&lt;/p&gt;
&lt;h1 id=&#34;用例&#34;&gt;用例&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#uses&#34;&gt;kafka 的使用例子&lt;/a&gt;非常的多，使用範圍非常廣泛。&lt;/p&gt;
&lt;p&gt;基本上是訊息傳遞的使用例子，kafka 大多能勝任。&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;p&gt;這邊只提了 kafka 的基本概念，基本元件，以及 consumer group 機制，為我們底下要談的 configuration 與 topology 鋪路。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka Helm Configuration</title>
      <link>https://chechia.net/post/kafka-helm-configuration/</link>
      <pubDate>Mon, 23 Sep 2019 21:55:29 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-helm-configuration/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continuerd&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka Deployment on Kubernetes</title>
      <link>https://chechia.net/post/kafka-deployment-on-kubernetes/</link>
      <pubDate>Sun, 22 Sep 2019 09:58:41 +0800</pubDate>
      
      <guid>https://chechia.net/post/kafka-deployment-on-kubernetes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continuerd&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;碎念&#34;&gt;碎念&lt;/h1&gt;
&lt;p&gt;30 天每天一文真的蠻逼人的，每一篇都是新寫，還要盡可能顧及文章品質，下班趕文章，各位大德寫看看就知道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這邊調整了當初想寫的文章，內容應該都會帶到
&lt;ul&gt;
&lt;li&gt;elk&lt;/li&gt;
&lt;li&gt;kafka-ha&lt;/li&gt;
&lt;li&gt;reids-ha&lt;/li&gt;
&lt;li&gt;prometheus&lt;/li&gt;
&lt;li&gt;kubernetes on gcp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但不會再一篇 10000 字了，逼死我吧&amp;hellip;&lt;/li&gt;
&lt;li&gt;寫不完的部份 30 天候會在IT邦幫忙，或是&lt;a href=&#34;https:/chechia.net&#34;&gt;我的 Github Page https://chechia.net/&lt;/a&gt;補完&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡介 kafka&lt;/li&gt;
&lt;li&gt;部屬 kafka 到 kubernetes 上&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;簡介-kafka&#34;&gt;簡介 kafka&lt;/h1&gt;
&lt;p&gt;Kafka 是分散式的 streaming platform，可以 subscribe &amp;amp; publish 訊息，可以當作是一個功能強大的 message queue 系統，由於分散式的架構，讓 kafka 有很大程度的 fault tolerance。&lt;/p&gt;
&lt;p&gt;我們今天就來部屬一個 kafka。&lt;/p&gt;
&lt;h1 id=&#34;deploy&#34;&gt;Deploy&lt;/h1&gt;
&lt;p&gt;我把我的寶藏都在這了&lt;a href=&#34;https://github.com/chechiachang/kafka-on-kubernetes&#34;&gt;https://github.com/chechiachang/kafka-on-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下載下來的 .sh ，跑之前養成習慣貓一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat install.sh


#!/bin/bash
#
# https://github.com/helm/charts/tree/master/incubator/kafka

#HELM_NAME=kafka
HELM_NAME=kafka-1

helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator

# Stable: chart version: kafka-0.16.2	app version: 5.0.1
helm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm&#34;&gt;Helm&lt;/h3&gt;
&lt;p&gt;我們這邊用 helm 部屬，之所以用 helm ，因為這是我想到最簡單的方法，能讓輕鬆擁有一套功能完整的 kafka。所以我們先用。&lt;/p&gt;
&lt;p&gt;沒用過 helm 的大德可以參考 &lt;a href=&#34;https://helm.sh/docs/using_helm/#quickstart&#34;&gt;Helm Quickstart&lt;/a&gt;，先把 helm cli 與 kubernetes 上的 helm tiller 都設定好&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm init
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;helm-chart&#34;&gt;Helm Chart&lt;/h3&gt;
&lt;p&gt;一個 helm chart 可以當成一個獨立的專案，不同的 chart 可以在 kubernetes 上協助部屬不同的項目。&lt;/p&gt;
&lt;p&gt;這邊使用了還在 incubator 的chart，雖然是 prod ready，不過使用上還是要注意。&lt;/p&gt;
&lt;p&gt;使用前先把 incubator 的 helm repo 加進來&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;
&lt;p&gt;這邊是用 upgrade &amp;ndash;install，已安裝就 upgrade，沒安裝就 install，之後可以用這個指令升版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;helm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;version&#34;&gt;Version&lt;/h3&gt;
&lt;p&gt;這邊使用的版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chart version:    kafka-0.16.2&lt;/li&gt;
&lt;li&gt;app version:      5.0.1&lt;/li&gt;
&lt;li&gt;kafka Image:      confluentinc/cp-kafka:5.0.1&lt;/li&gt;
&lt;li&gt;zookeeper Image:  gcr.io/google_samples/k8szk:v3&lt;/li&gt;
&lt;li&gt;kafka exporter:   danielqsj/kafka-exporter:v1.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;values-staging&#34;&gt;values-staging&lt;/h3&gt;
&lt;p&gt;透過 helm chart，把啟動參數帶進去，這邊我們看幾個比較重要的，細節之後的文章在一起討論。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/chechiachang/kafka-on-kubernetes/blob/master/values-staging.yaml&#34;&gt;https://github.com/chechiachang/kafka-on-kubernetes/blob/master/values-staging.yaml&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;replicas: 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝三個 kafka，topology 的東西也是敬待下篇XD&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## The kafka image repository
image: &amp;quot;confluentinc/cp-kafka&amp;quot;

## The kafka image tag

底層執行的 kafka 是 conluent kafka

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configure-resource-requests-and-limits&#34;&gt;Configure resource requests and limits&lt;/h2&gt;
&lt;h2 id=&#34;ref-httpkubernetesiodocsuser-guidecompute-resources&#34;&gt;ref: &lt;a href=&#34;http://kubernetes.io/docs/user-guide/compute-resources/&#34;&gt;http://kubernetes.io/docs/user-guide/compute-resources/&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;resources: {}&lt;/p&gt;
&lt;h1 id=&#34;limits&#34;&gt;limits:&lt;/h1&gt;
&lt;h1 id=&#34;cpu-200m&#34;&gt;cpu: 200m&lt;/h1&gt;
&lt;h1 id=&#34;memory-4096mi&#34;&gt;memory: 4096Mi&lt;/h1&gt;
&lt;h1 id=&#34;requests&#34;&gt;requests:&lt;/h1&gt;
&lt;h1 id=&#34;cpu-100m&#34;&gt;cpu: 100m&lt;/h1&gt;
&lt;h1 id=&#34;memory-1024mi&#34;&gt;memory: 1024Mi&lt;/h1&gt;
&lt;p&gt;kafkaHeapOptions: &amp;ldquo;-Xmx4G -Xms1G&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
這邊可以調整在 kubernetes 上面的 limit 跟 request

* Deploy 會先去跟 node 問夠不夠，夠的話要求 node 保留這些資源給 Pod
* Runtime 超過 limit，Pod 會被 kubernetes 幹掉，不過我們是 JVM，外部 resource 爆掉前，應該會先因 heap 滿而死。一個施主自盡的感覺。
* CPU 蠻省的，吃比較多是 memory。但也要看你的使用情境

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;prometheus&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
對我們有上 promethues，基本上就是 kafka-exporter 把 kafka metrics 倒出去 prometheus，這個也是詳見下回分解。

# 跑起來了

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$ kubectl get po | grep kafka&lt;/p&gt;
&lt;p&gt;NAME                                                     READY   STATUS      RESTARTS   AGE
kafka-1-0                                                1/1     Running     0          224d
kafka-1-1                                                1/1     Running     0          224d
kafka-1-2                                                1/1     Running     0          224d
kafka-1-exporter-88786d84b-z954z                         1/1     Running     0          224d
kafka-1-zookeeper-0                                      1/1     Running     0          224d
kafka-1-zookeeper-1                                      1/1     Running     0          224d
kafka-1-zookeeper-2                                      1/1     Running     0          224d&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Logstash on GKE</title>
      <link>https://chechia.net/post/logstash-on-gke/</link>
      <pubDate>Sat, 21 Sep 2019 15:22:23 +0800</pubDate>
      
      <guid>https://chechia.net/post/logstash-on-gke/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作為範例的 ELK 的版本是當前的 stable release 7.3.1。&lt;/p&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡介 logstash&lt;/li&gt;
&lt;li&gt;將 logstash 部屬到 kubernetes 上&lt;/li&gt;
&lt;li&gt;設定 logstash pipeline 處理 nginx access log&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;介紹-logstash&#34;&gt;介紹 Logstash&lt;/h1&gt;
&lt;p&gt;Logstash 是開元的資料處理引擎，可以動態的將輸入的資料做大量的處裡。原先的目的是處理 log ，但目前以不限於處理 log ，各種 ELK beat 或是其他來源的不同監測數據，都能處理。&lt;/p&gt;
&lt;p&gt;Logastash 內部的功能也大多模組化，因此可以組裝不同的 plugin，來快速處理不同來源資料。&lt;/p&gt;
&lt;p&gt;基本上常見的資料來源，logstash 都能夠處理，並且有寫好的 plugin 可以直接使用，細節請見&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/introduction.html&#34;&gt;logstash 官方文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.elastic.co/guide/en/logstash/current/static/images/logstash.png&#34; alt=&#34;官方架構圖&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;後送資料庫與最終儲存庫&#34;&gt;後送資料庫與最終儲存庫&lt;/h1&gt;
&lt;p&gt;在開始架設 logstash 要先考慮 pipeline 處理過後送的資料庫，&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/introduction.html#_choose_your_stash&#34;&gt;可使用的資料庫非常多&lt;/a&gt;，這邊會展示的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stack 標準配備送到 Elasticsearch
&lt;ul&gt;
&lt;li&gt;存放會時常查詢的熱資料，只存放一段時間前的資料&lt;/li&gt;
&lt;li&gt;太舊的資料自動 Rollout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最終 archieving 的資料庫，這邊使用 GCP 的 Big Query
&lt;ul&gt;
&lt;li&gt;存放查找次數少，但非常大量的歷史紀錄。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elasticsearch 在前幾篇已經架設好，&lt;a href=&#34;https://cloud.google.com/bigquery/docs/?hl=zh-tw&#34;&gt;GCP Big Query&lt;/a&gt; 的設定也事先開好。&lt;/p&gt;
&lt;h1 id=&#34;部屬-logstash&#34;&gt;部屬 Logstash&lt;/h1&gt;
&lt;p&gt;kubernetes resource 的 yaml 請參考 &lt;a href=&#34;https://github.com/chechiachang/elk-kubernetes/tree/master/logstash&#34;&gt;我的 github elk-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f config-configmap.yaml
kubectl apply -f pipelines-configmap.yam

kubectl apply -f deployment.yaml

kubectl apply -f service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;放上去的 resource&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config-configmap:
&lt;ul&gt;
&lt;li&gt;Logstash 服務本身啟動的設定參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pipelines-configmap:
&lt;ul&gt;
&lt;li&gt;Logstash 的 pipelines 設定檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lostagh Deployment
&lt;ul&gt;
&lt;li&gt;Logastash 的服務 instance&lt;/li&gt;
&lt;li&gt;可以動態 scaling，也就是會有複數 Logstash instance 做負載均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logstash service
&lt;ul&gt;
&lt;li&gt;可透過 kubernetes 內部的 kube-dns 服務&lt;/li&gt;
&lt;li&gt;集群內的 filebeat 可以直接透過 logstash.default.svc.chechiachang-cluster.local 的 dns 連線 logstash&lt;/li&gt;
&lt;li&gt;集群內的網路，直接使用 http（當然使用 https 也是可以，相關步驟請見前幾篇文章）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡單講一下 kubernetes service 的負載均衡，關於 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;kubernetes service 細節這篇附上文件&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get services

NAME              TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)    AGE
logstash          ClusterIP      10.15.254.47    &amp;lt;none&amp;gt;          5044/TCP   182d

$ kubectl get endpoints

NAME              ENDPOINTS                                                          AGE
logstash          10.12.0.132:5044,10.12.10.162:5044,10.12.9.167:5044 + 12 more...   182d
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在 Kubernetes 內部每個 Pod 都能看到 logstash, logstash.default.svc.chechiachang-cluster.local 這兩個 dns&lt;/li&gt;
&lt;li&gt;DNS 直接指向複數的 logstash endpoints， 每一個 ip 都是 kubernetes 內部配置的一個 Pod 的 IP，開啟 5044 的 logstash port&lt;/li&gt;
&lt;li&gt;Service 的 load balance 機制視 service 設定，細節可以看&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies&#34;&gt;這邊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講到最白，就是 filebeat LOGSTASH URL 設定為 http://logstash 就會打到其中一台 logstash&lt;/p&gt;
&lt;p&gt;更改 filebeat configmap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl edit configmap filebeat-configmap

# Disable output to elasticsearch
output.elasticsearch:
  enabled: false

# Output to logstash
output.logstash:
  hosts: [&amp;quot;logstash:5044&amp;quot;]
  protocol: &amp;quot;http&amp;quot;
  username: &amp;quot;elastic&amp;quot;
  password: 

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;設定-logstash&#34;&gt;設定 logstash&lt;/h1&gt;
&lt;p&gt;這邊要先說，logstash 也支援 &lt;a href=&#34;https://www.elastic.co/guide/en/logstash/7.3/configuring-centralized-pipelines.html&#34;&gt;centralized configuration&lt;/a&gt;，如果你的 logstash 不是跑在 Kubernetes 上，沒辦法配置一套 configmap 就應用到全部的 instance，記的一定要使用。&lt;/p&gt;
&lt;p&gt;Logastash 的運行設定 logstash.yml，這邊我們沒有做設定，都是預設值，有需求可以自行更改&lt;/p&gt;
&lt;p&gt;當然之後要調整 batch size 或是 queue, cache 等等效能調校，也是來這邊改，改完 configmap ，rolling update logstash 就可以。&lt;/p&gt;
&lt;p&gt;這邊主要是來講 pipeline 設定。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl describe configmap pipelines-configmap

apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipelines
  namespace: elk
  labels:
    k8s-app: logstash
data:
  # Nginx Template
  # https://www.elastic.co/guide/en/logstash/7.3/logstash-config-for-filebeat-modules.html#parsing-nginx
  nginx.conf: |
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Configmap 裡面只有一個 pipeline，就是 &lt;code&gt;nginx.conf&lt;/code&gt;，我們這邊就只有一條，這邊一段一段看&lt;/p&gt;
&lt;h3 id=&#34;input&#34;&gt;Input&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;input {
  beats {
    # The lisening port of logstash
    port =&amp;gt; 5044
    host =&amp;gt; &amp;quot;0.0.0.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;設定 Input 來源，是 beat 從 5044 進來&lt;/p&gt;
&lt;h3 id=&#34;filter&#34;&gt;Filter&lt;/h3&gt;
&lt;p&gt;接下來一大段是 filter，每個 filter 中間的 block 都是一個 plugin，logstash 支援非常多有趣的 plugin ，處理不同來源的工作，&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/7.3/filter-plugins.html&#34;&gt;細節請看這篇&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter {

  # Ignore data from other source in case filebeat input is incorrectly configured.
  if [kubernetes][container][name] == &amp;quot;nginx-ingress-controller&amp;quot; {

    # Parse message with grok
    # Use grok debugger in kibana -&amp;gt; dev_tools -&amp;gt; grok_debugger
    grok {
      match =&amp;gt; { &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;%{IPORHOST:[nginx][access][remote_ip]} - \[%{IPORHOST:[nginx][access][remote_ip_list]}\] - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \&amp;quot;%{WORD:[nginx][access][method]} %{DATA:[nginx][access][request_url]} HTTP/%{NUMBER:[nginx][access][http_version]}\&amp;quot; %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \&amp;quot;%{DATA:[nginx][access][referrer]}\&amp;quot; \&amp;quot;%{DATA:[nginx][access][agent]}\&amp;quot; %{NUMBER:[nginx][access][request_length]} %{NUMBER:[nginx][access][request_time]} \[%{DATA:[nginx][access][proxy_upstream_name]}\] %{DATA:[nginx][access][upstream_addr]} %{NUMBER:[nginx][access][upstream_response_length]} %{NUMBER:[nginx][access][upstream_response_time]} %{NUMBER:[nginx][access][upstream_status]} %{DATA:[nginx][access][req_id]}&amp;quot; }
    }

    # Match url parameters if has params
    grok {
      match =&amp;gt; { &amp;quot;[nginx][access][request_url]&amp;quot; =&amp;gt; &amp;quot;%{DATA:[nginx][access][url]}\?%{DATA:[nginx][access][url_params]}&amp;quot; }
    }

    # Remove and add fields
    mutate {
      remove_field =&amp;gt; &amp;quot;[nginx][access][request_url]&amp;quot;
      add_field =&amp;gt; { &amp;quot;read_timestamp&amp;quot; =&amp;gt; &amp;quot;%{@timestamp}&amp;quot; }
      # Add fileset.module:nginx to fit nginx dashboard
      add_field =&amp;gt; { &amp;quot;[fileset][module]&amp;quot; =&amp;gt; &amp;quot;nginx&amp;quot;}
      add_field =&amp;gt; { &amp;quot;[fileset][name]&amp;quot; =&amp;gt; &amp;quot;access&amp;quot;}
    }

    # Parse date string into timestamp
    date {
      match =&amp;gt; [ &amp;quot;[nginx][access][time]&amp;quot;, &amp;quot;dd/MMM/YYYY:H:m:s Z&amp;quot; ]
      remove_field =&amp;gt; &amp;quot;[nginx][access][time]&amp;quot;
    }

    # Split url_parameters with &amp;amp;
    # /api?uuid=123&amp;amp;query=456 
    # become 
    # nginx.access.url_params.uuid=123 nginx.access.url_params.query=456
    kv {
      source =&amp;gt; &amp;quot;[nginx][access][url_params]&amp;quot;
      field_split =&amp;gt; &amp;quot;&amp;amp;&amp;quot;
    }

    # Parse useragent
    useragent {
      source =&amp;gt; &amp;quot;[nginx][access][agent]&amp;quot;
      target =&amp;gt; &amp;quot;[nginx][access][user_agent]&amp;quot;
      remove_field =&amp;gt; &amp;quot;[nginx][access][agent]&amp;quot;
    }

    # Search remote_ip with GeoIP database, output geoip information for map drawing
    geoip {
      source =&amp;gt; &amp;quot;[nginx][access][remote_ip]&amp;quot;
      target =&amp;gt; &amp;quot;[nginx][access][geoip]&amp;quot;
      #fields =&amp;gt; [&amp;quot;country_name&amp;quot;,&amp;quot;city_name&amp;quot;,&amp;quot;real_region_name&amp;quot;,&amp;quot;latitude&amp;quot;,&amp;quot;longitude&amp;quot;,&amp;quot;ip&amp;quot;,&amp;quot;location&amp;quot;]
    }

    # ==============
    # Remove message to reduce data
    # ==============
    if [nginx][access][url] {
      mutate {
        # source:/var/lib/docker/containers/6e608bfc0a437c038a1dbdf2e3d28619648b58a1d1ac58635f8178fc5f871109/6e608bfc0a437c038a1dbdf2e3d28619648b58a1d1ac58635f8178fc5f871109-json.log
        remove_field =&amp;gt; &amp;quot;[source]&amp;quot;
        # Origin message
        remove_field =&amp;gt; &amp;quot;[message]&amp;quot;
        #add_field =&amp;gt; { &amp;quot;[nginx][access][message]&amp;quot; =&amp;gt; &amp;quot;[message]&amp;quot;}
        remove_field =&amp;gt; &amp;quot;[nginx][access][message]&amp;quot;
        # url_params:client_id=1d5ffd378296c154d3e32e5890d6f4eb&amp;amp;timestamp=1546849955&amp;amp;nonce=9a52e3e6283f2a9263e5301b6724e2c0d723def860c4724c9121470152a42318
        remove_field =&amp;gt; &amp;quot;[nginx][access][url_params]&amp;quot;
      }
    }

  } # nginx-ingress-controller

} # filter
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;grok&#34;&gt;Grok&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/7.3/plugins-filters-grok.html&#34;&gt;Grok 本身的文件&lt;/a&gt;又是一大段，個人建議各路大德，如果要使用，請直接搜尋人家配置好的設定，不要自己寫&lt;/p&gt;
&lt;p&gt;真的要寫的話要善用工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kibana Grok Debugger &lt;code&gt;YOUR_KIBANA_HOST/app/kibana#/dev_tools/grokdebugger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或是不知名大德貢獻&lt;a href=&#34;https://grokdebug.herokuapp.com/&#34;&gt;線上 Debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;grok {
  match =&amp;gt; { &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;%{IPORHOST:[nginx][access][remote_ip]} - \[%{IPORHOST:[nginx][access][remote_ip_list]}\] - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \&amp;quot;%{WORD:[nginx][access][method]} %{DATA:[nginx][access][request_url]} HTTP/%{NUMBER:[nginx][access][http_version]}\&amp;quot; %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \&amp;quot;%{DATA:[nginx][access][referrer]}\&amp;quot; \&amp;quot;%{DATA:[nginx][access][agent]}\&amp;quot; %{NUMBER:[nginx][access][request_length]} %{NUMBER:[nginx][access][request_time]} \[%{DATA:[nginx][access][proxy_upstream_name]}\] %{DATA:[nginx][access][upstream_addr]} %{NUMBER:[nginx][access][upstream_response_length]} %{NUMBER:[nginx][access][upstream_response_time]} %{NUMBER:[nginx][access][upstream_status]} %{DATA:[nginx][access][req_id]}&amp;quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其實就是 nginx 的 access log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.2.3.4 - [1.2.3.4] - - [21/Sep/2019:07:21:21 +0000] &amp;quot;GET /v1/core/api/list?type=queued&amp;amp;timestamp=1569050481&amp;amp;nonce=d1e80e00381e0ba6e42d4601912befcf03fbf291748e77b178230c19cd1fdbe2 HTTP/1.1&amp;quot; 200 3 &amp;quot;-&amp;quot; &amp;quot;python-requests/2.18.4&amp;quot; 425 0.031 [default-chechiachang-server-80] 10.12.10.124:8003 3 0.031 200 f43db228afe66da67b2c7417d0ad2c04
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;預設的 log 送件來，格式是 text，經過 pattern matching 後變成 json-like format，也就是可以從資料結構取得 &lt;code&gt;.nginx.access.remote_ip&lt;/code&gt; 這樣的欄位，讓原本的 access log 從 text 變成可以查找的內容。&lt;/p&gt;
&lt;p&gt;原本的 text 送進 elasticsearch 當然也可以查找，但就會在 text 裡面做全文檢索，功能很侷限，效率很差。&lt;/p&gt;
&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;
&lt;p&gt;logstash 支援的 output 以及設定&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/7.3/output-plugins.html&#34;&gt;在這邊&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output {
  elasticsearch {
    hosts =&amp;gt; [&amp;quot;https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}&amp;quot;]
    user =&amp;gt; &amp;quot;${ELASTICSEARCH_USERNAME}&amp;quot;
    password =&amp;gt; &amp;quot;${ELASTICSEARCH_PASSWORD}&amp;quot;
    index =&amp;gt; &amp;quot;%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}&amp;quot;
    manage_template =&amp;gt; false
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Elasticsearch 的配置很單純&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;output {
  google_bigquery {
    project_id =&amp;gt; ${GCP_PROJECT_ID}
    dataset =&amp;gt; ${GCP_BIG_QUERY_DATASET_NAME}
    csv_schema =&amp;gt; &amp;quot;path:STRING,status:INTEGER,score:FLOAT&amp;quot;
    json_key_file =&amp;gt; ${GCP_JSON_KEY_FILE_PATH}
    error_directory =&amp;gt; &amp;quot;/tmp/bigquery-errors&amp;quot;
    date_pattern =&amp;gt; &amp;quot;%Y-%m-%dT%H:00&amp;quot;
    flush_interval_secs =&amp;gt; 30
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中的變數，我們全都用環境變數，在 deployment.yaml 配置，啟動 logstash pods 時代入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GCP_JSON_KEY_FILE_PATH&lt;/code&gt; 這邊要配置一隻 GCP 的服務帳號金鑰，一個有 Big Query 寫入權限的 service account，把 json 使用 kubernetes secret 放到集群上，然後在 pod 上使用 volume from secret 掛載進來。
&lt;code&gt;csv_schema =&amp;gt; &amp;quot;path:STRING,status:INTEGER,score:FLOAT&amp;quot;&lt;/code&gt; 這邊要配置之後會存入 Big Query 的 csv 結構&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;部屬 Logstash deployment 到 kubernetes 上&lt;/li&gt;
&lt;li&gt;設定 pipeline，超多 plugin，族繁不及備載&lt;/li&gt;
&lt;li&gt;Grok 配置&lt;/li&gt;
&lt;li&gt;Big Query output 配置&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring GKE With Elk</title>
      <link>https://chechia.net/post/monitoring-gke-with-elk/</link>
      <pubDate>Thu, 19 Sep 2019 17:06:29 +0800</pubDate>
      
      <guid>https://chechia.net/post/monitoring-gke-with-elk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 logstash pipeline 做數據前處理&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作為範例的 ELK 的版本是當前的 stable release 7.3.1。&lt;/p&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這篇來要 Kubernetes 環境(GKE)裡面的 log 抓出來，送到 ELK 上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/running-on-kubernetes.html&#34;&gt;官方文件&lt;/a&gt; ，寫得很簡易，如果已經很熟 kubernetes 的人可以直接腦補其他的部屬設定。&lt;/p&gt;
&lt;p&gt;這邊有幾個做法，依照 filebeat 部署的位置與收集目標簡單分為：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node: 處理每一台 node 的 log ，包含 system log 與 node 監測資料(metrics)&lt;/li&gt;
&lt;li&gt;cluster: 處理 cluster 等級的 log,  event 或是 metrics&lt;/li&gt;
&lt;li&gt;pod: 針對特定 pod 直接去掛一個 sidecar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的方法是可以混搭的，kubernetes 個個層級有&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/logging/&#34;&gt;log 處理流程&lt;/a&gt;，我們這邊把 log 送往第三方平台，也是需要依照原本的 log 流程，去收取我們想收集的 log。&lt;/p&gt;
&lt;p&gt;簡單來說，是去對的地方找對的 log。在架構上要注意 scalability 與 resource 分配，不要影響本身提供服務的 GKE ，但又能獲得盡量即時的 log。&lt;/p&gt;
&lt;p&gt;我們這邊直接進入 kubernetes resource 的設定，底下會附上在 GKE 找 log 的過程。&lt;/p&gt;
&lt;h1 id=&#34;node-level-log-harvest&#34;&gt;Node level log harvest&lt;/h1&gt;
&lt;p&gt;為每一個 node 配置 filebeat，然後在 node 上面尋找 log，然後如我們上篇所敘述加到 input ，就可以把 log 倒出來。&lt;/p&gt;
&lt;p&gt;直覺想到就是透過 daemonsets 為每個 node 部署一個 filebeat pod，然後 mount node 的 log 資料夾，在設置 input。&lt;/p&gt;
&lt;h1 id=&#34;deploy-daemonsets&#34;&gt;Deploy daemonsets&lt;/h1&gt;
&lt;p&gt;kubernetes resource 的 yaml 請參考 &lt;a href=&#34;https://github.com/chechiachang/elk-kubernetes/tree/master/filebeat/7.3.1&#34;&gt;我的 github elk-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;給予足夠的 clusterrolebinding 到 elk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f filebeat/7.3.1/clusterrolebinding.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先更改 filebeat 的設定，如何設定 elasticsearch 與 kibana，請參考上篇。至於 input 的部份已經配置好了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim filebeat/7.3.1/daemonsets-config-configmap.yaml

kubectl apply -f filebeat/7.3.1/daemonsets-config-configmap.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部屬 filebeat daemonsets，會每一個 node 部屬一個 filebeat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f filebeat/7.3.1/daemonsets.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取得 daemonsets 的狀態&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl --namespcae elk get pods

NAME             READY   STATUS    RESTARTS   AGE
filebeat-bjfp9   1/1     Running   0          6m56s
filebeat-fzr9n   1/1     Running   0          6m56s
filebeat-vpkm7   1/1     Running   0          6m56s
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有設定成功的話，kibana 這邊就會收到 kubernetes 上面 pod 的 log&lt;/p&gt;
&lt;h1 id=&#34;log-havest-for-specific-pods&#34;&gt;log havest for specific pods&lt;/h1&gt;
&lt;p&gt;由於 kubernetes 上我們可以便利的調度 filebeat 的部屬方式，這邊也可以也可以使用 deployment ，配合 pod affinity，把 filebeat 放到某個想要監測的 pod，這邊的例子是 nginx-ingress-controller。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 上有一個或多個 nginx ingress controller&lt;/li&gt;
&lt;li&gt;部屬一個或多個 filebeat 到有 nginx 的 node 上&lt;/li&gt;
&lt;li&gt;filebeat 去抓取 nginx 的 input， 並使用 filebeat 的 nginx module 做預處理
&lt;ul&gt;
&lt;li&gt;nginx module 預設路徑需要調整，這邊使用 filebeat autodiscover 來處理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一樣 apply 前記得先檢查跟設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim filebeat/7.3.1/nginx-config-configmap.yaml

kubectl apply -f filebeat/7.3.1/nginx-config-configmap.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;部屬 filebeat deployment
由於有設定 pod affinity ，這個 filebeat 只會被放到有 nginx ingress controller 的這個節點上，並且依照 autodiscover 設定的條件去蒐集 nginx 的 log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f filebeat/7.3.1/nginx-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有設定成功的話，kibana 這邊就會收到 kubernetes 上面 pod 的 log&lt;/p&gt;
&lt;p&gt;另外，由於有啟動 nginx module，logstash 收到的內容已經是處理過得內容。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;gcp-fluentd&#34;&gt;GCP fluentd&lt;/h1&gt;
&lt;p&gt;如果是使用 GKE 的朋友，可以投過開啟 stackdriver logging 的功能，把集群中服務的 log 倒到 stackdriver，基本上就是 node -&amp;gt; (daemonsets) fluentd -&amp;gt; stackdriver。&lt;/p&gt;
&lt;p&gt;這個 fluentd 是 GCP 如果有啟動 Stackdriver Logging 的話，自動幫你維護的 daemonsets，設定不可改，改了會被 overwrite 會去，所以不太方便從這邊動手腳。&lt;/p&gt;
&lt;p&gt;Btw stackdriver 最近好像改版，目前做 example 的版本已經變成 lagency （淚&lt;/p&gt;
&lt;p&gt;但我們先假設我們對這個 pod 的 log 很有興趣，然後把這邊的 log 透過 filebeat 送到 ELK 上XD&lt;/p&gt;
&lt;p&gt;因為 GKE 透過 fluentd 把 GKE 上面的 log 倒到 stackdriver，而我們是想把 log 倒到 ELK，既然這樣我們的 input 來源是相同的，而且很多處理步驟都可以在 ELK 上面互通，真的可以偷看一下 fluentd 是去哪收集 log ，怎麼處理 log pipeline，我們只要做相應設定就好。&lt;/p&gt;
&lt;p&gt;畢竟 google 都幫我們弄得妥妥的，不參考一下他的流程太可惜。&lt;/p&gt;
&lt;p&gt;偷看一下 GKE 上 fluentd 是去哪找 log ，這個是 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/fluentd-gcp/fluentd-gcp-configmap.yaml&#34;&gt;fluentd gcp configmap&lt;/a&gt;，雖然看到這邊感覺扯遠了，但因為很有趣所有我就繼續看下去，各位大德可以跳過XD&lt;/p&gt;
&lt;p&gt;configmap 中的這個 input 設定檔，其中一個 source 就是一個資料來源，相當於 filebeat 的 input。這邊這個 source 就是去 &lt;code&gt;/var/log/containers/*.log&lt;/code&gt;  收 log&lt;/p&gt;
&lt;p&gt;這邊還做了幾件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打上 &lt;code&gt;reform.*&lt;/code&gt; tag，讓下個 match 可以 收進去 pipeline 處理&lt;/li&gt;
&lt;li&gt;附帶 parse 出 time&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;containers.input.conf

&amp;lt;source&amp;gt;
  @type tail
  path /var/log/containers/*.log
  pos_file /var/log/gcp-containers.log.pos
  # Tags at this point are in the format of:
  # reform.var.log.containers.&amp;lt;POD_NAME&amp;gt;_&amp;lt;NAMESPACE_NAME&amp;gt;_&amp;lt;CONTAINER_NAME&amp;gt;-&amp;lt;CONTAINER_ID&amp;gt;.log
  tag reform.*
  read_from_head true
  &amp;lt;parse&amp;gt;
    @type multi_format
    &amp;lt;pattern&amp;gt;
      format json
      time_key time
      time_format %Y-%m-%dT%H:%M:%S.%NZ
    &amp;lt;/pattern&amp;gt;
    &amp;lt;pattern&amp;gt;
      format /^(?&amp;lt;time&amp;gt;.+) (?&amp;lt;stream&amp;gt;stdout|stderr) [^ ]* (?&amp;lt;log&amp;gt;.*)$/
      time_format %Y-%m-%dT%H:%M:%S.%N%:z
    &amp;lt;/pattern&amp;gt;
  &amp;lt;/parse&amp;gt;
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;他這邊做一些 error handling，然後用 ruby (!) parse，這邊就真的太遠，細節大家可以 google ＸＤ。不過這邊使用的 pattern matching 我們後幾篇在 logstash pipeline 上，也會有機會提到，機制是類似的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;filter reform.**&amp;gt;
  @type parser
  format /^(?&amp;lt;severity&amp;gt;\w)(?&amp;lt;time&amp;gt;\d{4} [^\s]*)\s+(?&amp;lt;pid&amp;gt;\d+)\s+(?&amp;lt;source&amp;gt;[^ \]]+)\] (?&amp;lt;log&amp;gt;.*)/
  reserve_data true
  suppress_parse_error_log true
  emit_invalid_record_to_error false
  key_name log
&amp;lt;/filter&amp;gt;

&amp;lt;match reform.**&amp;gt;
  @type record_reformer
  enable_ruby true
  &amp;lt;record&amp;gt;
    # Extract local_resource_id from tag for &#39;k8s_container&#39; monitored
    # resource. The format is:
    # &#39;k8s_container.&amp;lt;namespace_name&amp;gt;.&amp;lt;pod_name&amp;gt;.&amp;lt;container_name&amp;gt;&#39;.
    &amp;quot;logging.googleapis.com/local_resource_id&amp;quot; ${&amp;quot;k8s_container.#{tag_suffix[4].rpartition(&#39;.&#39;)[0].split(&#39;_&#39;)[1]}.#{tag_suffix[4].rpartition(&#39;.&#39;)[0].split(&#39;_&#39;)[0]}.#{tag_suffix[4].rpartition(&#39;.&#39;)[0].split(&#39;_&#39;)[2].rpartition(&#39;-&#39;)[0]}&amp;quot;}
    # Rename the field &#39;log&#39; to a more generic field &#39;message&#39;. This way the
    # fluent-plugin-google-cloud knows to flatten the field as textPayload
    # instead of jsonPayload after extracting &#39;time&#39;, &#39;severity&#39; and
    # &#39;stream&#39; from the record.
    message ${record[&#39;log&#39;]}
    # If &#39;severity&#39; is not set, assume stderr is ERROR and stdout is INFO.
    severity ${record[&#39;severity&#39;] || if record[&#39;stream&#39;] == &#39;stderr&#39; then &#39;ERROR&#39; else &#39;INFO&#39; end}
  &amp;lt;/record&amp;gt;
  tag ${if record[&#39;stream&#39;] == &#39;stderr&#39; then &#39;raw.stderr&#39; else &#39;raw.stdout&#39; end}
  remove_keys stream,log
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ssh-進去逛&#34;&gt;ssh 進去逛&lt;/h3&gt;
&lt;p&gt;想看機器上實際的 log 狀況，我們也可以直接 ssh 進去&lt;/p&gt;
&lt;p&gt;先透過 kubectl 看一下 pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get daemonsets --namespace kube-system

NAME                       DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR                                  AGE
fluentd-gcp-v3.2.0         7         7         7       7            7           beta.kubernetes.io/fluentd-ds-ready=true       196d

$ kubectl get pods --output wide --namespace kube-system

NAME                                      READY   STATUS    RESTARTS   AGE   IP          NODE                                     NOMINATED NODE   READINESS GATES
fluentd-gcp-scaler-1234567890-vfbhc       1/1     Running   0          37d   10.140.0.   gke-chechiachang-pool-1-123456789-5gqn   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
fluentd-gcp-v3.2.0-44tl7                  2/2     Running   0          37d   10.140.0.   gke-chechiachang-pool-1-123456789-wcq0   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
fluentd-gcp-v3.2.0-5vc6l                  2/2     Running   0          37d   10.140.0.   gke-chechiachang-pool-1-123456789-tp05   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
fluentd-gcp-v3.2.0-6rqvc                  2/2     Running   0          37d   10.140.0.   gke-chechiachang-pool-1-123456789-5gqn   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
fluentd-gcp-v3.2.0-mmwk4                  2/2     Running   0          37d   10.140.0.   gke-chechiachang-pool-1-123456789-vxld   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先透過 kubectl 看一下 node&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get node

NAME                                     STATUS   ROLES    AGE   VERSION
gke-chechaichang-pool-1-123456789-3bzp   Ready    &amp;lt;none&amp;gt;   37d   v1.13.7-gke.8
gke-chechaichang-pool-1-123456789-5gqn   Ready    &amp;lt;none&amp;gt;   37d   v1.13.7-gke.8
gke-chechaichang-pool-1-123456789-8n8z   Ready    &amp;lt;none&amp;gt;   37d   v1.13.7-gke.8
...

gcloud compute ssh gke-chechaichang-pool-1-123456789-3bzp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如使用其他雲平台的 kubernetes service，或是 bare metal 的集群，請依照各自系統的方式連進去看看。&lt;/p&gt;
&lt;h1 id=&#34;ssh-node-找-log&#34;&gt;ssh node 找 log&lt;/h1&gt;
&lt;p&gt;ssh 進去後就可以到處來探險，順便看看 GKE 跑在機器上到底做了什麼事情。&lt;/p&gt;
&lt;p&gt;如果官方有出文件，可能可以不用進來看。各位大德有發現文件請留言跟我說。我個人很喜歡自己架集群起來連就去看，面對照官方文件上寫的東西，當然大部份時候都是文件沒有帶到，有很多發現。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls /var/log

gcp-*-log.pos
kube-proxy.log
containers/
metrics/
pods/
...

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/var/log/containers 看一下，格式是 &lt;code&gt;pod_namespace_container&lt;/code&gt; 這邊是 link 到 /var/log/pods/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -al /var/log/containers

lrwxrwxrwx 1 root root   105 Aug 12 07:42 fluentd-gcp-v3.2.0-st6cl_kube-system_fluentd-gcp-5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac.log -&amp;gt; /var/log/pods/kube-system_fluentd-gcp-v3.2.0-st6cl_b76bed0b-bcd4-11e9-a55c-42010a8c0008/fluentd-gcp/0.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看到 pods 就覺得是你了，裡面有 pod 資料夾，格式是 &lt;code&gt;namespace_pod_uuid&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls /var/log/pods

default_pod-1-1234567890-fxxhp_uuid
kube-system_fluentd-gcp-v3.2.0-st6cl_b76bed0b-bcd4-11e9-a55c-42010a8c0008
kube-system_heapster-v1.6.0-beta.1-
kube-system_kube-proxy-gke-
kube-system_l7-default-backend-
kube-system_prometheus-to-sd-
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再進去有 container log，格式是 &lt;code&gt;pod_namespace_container.log&lt;/code&gt;，也是 link&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls -al /var/log/pods/kube-system_fluentd-gcp-v3.2.0-st6cl_b76bed0b-bcd4-11e9-a55c-42010a8c0008/fluentd-gcp/

lrwxrwxrwx 1 root root  165 Aug 12 07:42 0.log -&amp;gt; /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最終 link 到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo su

$ ls -alh /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/
total 3.9M
drwx------  4 root root 4.0K Aug 12 07:42 .
drwx------ 92 root root  20K Sep 18 11:28 ..
-rw-r-----  1 root root 3.8M Sep 18 11:29 5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log
drwx------  2 root root 4.0K Aug 12 07:42 checkpoints
-rw-------  1 root root 7.8K Aug 12 07:42 config.v2.json
-rw-r--r--  1 root root 2.3K Aug 12 07:42 hostconfig.json
drwx------  2 root root 4.0K Aug 12 07:42 mounts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;頭尾偷喵一下，確定是我們在找的東西&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;head /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log
tail /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣就找到我們的 log 了&lt;/p&gt;
&lt;h1 id=&#34;小節&#34;&gt;小節&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用 filebeat 去查找&lt;/li&gt;
&lt;li&gt;透過 kubernetes daemonsets 可以快速佈置一份 filebeat 到所有 node，且設定都是一起更新&lt;/li&gt;
&lt;li&gt;透過 kubernetes deployment 可以指定 filebeat 的位置，去跟隨想要監測的服務&lt;/li&gt;
&lt;li&gt;如果不熟 log 處理流程，可以直接看偷看大廠的服務，會有很多靈感&lt;/li&gt;
&lt;li&gt;沒事可以多跑進 Kubernetes 服務節點逛逛，有很多有趣的東西&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring GCE With ELK</title>
      <link>https://chechia.net/post/monitoring-gce-with-elk/</link>
      <pubDate>Wed, 18 Sep 2019 19:10:50 +0800</pubDate>
      
      <guid>https://chechia.net/post/monitoring-gce-with-elk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 logstash pipeline 做數據前處理&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作為範例的 ELK 的版本是當前的 stable release 7.3.1。&lt;/p&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ELK 的 beats 是輕量級的系統監測收集器，beats 收集到的 data 經過 mapping 可以送到 Elasticsearch 後，進行彈性的搜尋比對。&lt;/p&gt;
&lt;p&gt;beat 有許多種類，依據收集的 data 區別：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auditbeat: Audit data&lt;/li&gt;
&lt;li&gt;Filebeat: Log files&lt;/li&gt;
&lt;li&gt;Functionbeat: Cloud data&lt;/li&gt;
&lt;li&gt;Heartbeat: Availability&lt;/li&gt;
&lt;li&gt;Journalbeat: Systemd journals&lt;/li&gt;
&lt;li&gt;Metricbeat: Metrics&lt;/li&gt;
&lt;li&gt;Packetbeat: Network traffic&lt;/li&gt;
&lt;li&gt;Winlogbeat: Windows event logs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊先以 filebeat 為例，在 GCE 上收集圓端服務節點上的服務日誌與系統日誌，並在 ELK 中呈現。&lt;/p&gt;
&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;
&lt;p&gt;安裝及 filebeat 安全性設定的步驟，在這篇&lt;a href=&#34;&#34;&gt;Secure ELK Stack&lt;/a&gt; 中已經說明。這邊指附上連結，以及&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-getting-started.html&#34;&gt;官方文件&lt;/a&gt; 提供參考。&lt;/p&gt;
&lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;p&gt;這邊談幾個使用方面的設定。&lt;/p&gt;
&lt;p&gt;首先，apt 安裝的 filebeat 預設的 /etc/filebeat/filebeat.yml 不夠完整，我們先到 github 把對應版本的完整載下來。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/elastic/beats/master/filebeat/filebeat.reference.yml
sudo mv filebeat.reference.yml /etc/filebeat/filebeat.yml
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;beats-central-management&#34;&gt;Beats central management&lt;/h1&gt;
&lt;p&gt;beats 透過手動更改 config 都可以直接設定，但這邊不推薦在此設定，理由是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系統中通常會有大量的 filebeat，每個都要設定，數量多時根本不可能&lt;/li&gt;
&lt;li&gt;更改設定時，如果不一起更改，會造成資料格式不統一，之後清理也很麻煩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推薦的方式是透過 Kibana 對所有 filebeat 做集中式的的管理配置，只要初始設定連上 kibana，剩下的都透過 kibana 設定。&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/current/configuration-central-management.html&#34;&gt;文件在此&lt;/a&gt;，我們有空有可以分篇談這個主題。&lt;/p&gt;
&lt;p&gt;不過這邊還是待大家過一下幾個重要的設定。畢竟要在 kibana 上配置，filebeat 的設定概念還是要有。&lt;/p&gt;
&lt;h3 id=&#34;modules&#34;&gt;modules&lt;/h3&gt;
&lt;p&gt;filebeat 有許多&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html&#34;&gt;模組&lt;/a&gt;，裡面已經包含許多預設的 template ，可以直接使用 default 的設定去系統預設的路徑抓取檔案，並且先進一步處理，減少我們輸出到 logstash 還要再做 pipeline 預處理，非常方便。&lt;/p&gt;
&lt;p&gt;例如這個 system module 會處理系統預設的 log 路徑，只要開啟 module ，就會自動處理對應的 input。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- module: system
  syslog:
    enabled: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;剩下的就是照需求啟用 module ，並且給予對應的 input。&lt;/p&gt;
&lt;p&gt;ELK 為自己的服務設定了不少 module ，直接啟用就可以獲取這協服務元件運行的 log 與監測數值。這也是 self-monitoring 監測數據的主要來源。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- module: kibana
- module: elasticsearch
- module: logstash
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;input&#34;&gt;input&lt;/h3&gt;
&lt;p&gt;filebeat 支援複數 inputs，每個 input 會啟動一個收集器，而 filebeat 收集目標是 log 檔案。基本上可以簡單理解為 filebeat 去讀取這些 log 檔案，並且在系統上紀錄讀取的進度，偵測到 log 有增加，變繼續讀取新的 log。&lt;/p&gt;
&lt;p&gt;filebeat 具體的工作機制，可以看這篇&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/current/how-filebeat-works.html&#34;&gt;How Filebeat works?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這篇文件也提到 filebeat 是確保至少一次(at-least-once delivery)的數據讀取，使用時要特別注意重複獲取的可能。&lt;/p&gt;
&lt;p&gt;首先把 input 加上 ubuntu 預設的 log 路徑&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filebeat.inputs:
- type: log
  enabled: true
  paths:
    - /var/log/*.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這邊注意 input 支援多種 type，參照完整設定檔案的說明配合自己的需求使用。&lt;/p&gt;
&lt;h3 id=&#34;processor&#34;&gt;Processor&lt;/h3&gt;
&lt;p&gt;在 filebeat 端先進行資料的第一層處理，可以大幅講少不必要的資料，降低檔案傳輸，以及對 elasticsearch server 的負擔。&lt;/p&gt;
&lt;h3 id=&#34;output&#34;&gt;output&lt;/h3&gt;
&lt;p&gt;output 也是 filebeat 十分重要的一環，好的 filebeat output 設定，可以大幅降低整體 ELK stack 的負擔。壞的設定也會直接塞爆 ELK stask。&lt;/p&gt;
&lt;p&gt;output.elasticsearch: 直接向後送進 elasticsearch
output.logstash: 先向後送到 logstash&lt;/p&gt;
&lt;p&gt;這邊非常推薦大家，所有的 beat 往後送進 elasticsearch 之前都先過一層 logstash，就算你的 logstash 內部完全不更改 data，沒有 pipeline mutation，還是不要省這一層。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beat 的數量會隨應用愈來越多而線性增加，elasticsearch 很難線性 scale，或是 scale 成本很大&lt;/li&gt;
&lt;li&gt;filebeat 沒有好好調校的話，對於輸出端的網路負擔很大，不僅佔用大量連線，傳輸檔案的大小也很大。&lt;/li&gt;
&lt;li&gt;logstash 的 queue 與後送的 batch 機制比 filebeat 好使用&lt;/li&gt;
&lt;li&gt;filebeat 是收 log 的，通常 log 爆炸的時候，是應用出問題的時候，這時候需要 log 交叉比對，發現 elasticsearch 流量也爆衝，反應很應用&lt;/li&gt;
&lt;li&gt;logstash 透過一些方法，可以很輕易的 scale，由於 pipeline 本身可以分散是平行處理，scale logstash 並不會影響資料最終狀態。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;load-balance&#34;&gt;load balance&lt;/h3&gt;
&lt;p&gt;有網友留言詢問 logstash 前面的 load balance 如何處理比較好，我這邊也順便附上。不只是 logstash ，所有自身無狀態(stateless) 的服務都可以照這樣去 scale。&lt;/p&gt;
&lt;p&gt;在 kubernetes 上很好處理，使用 k8s 預設的 service 就輕易作到簡易的 load balance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設置複數 logstash instances&lt;/li&gt;
&lt;li&gt;使用 kubernetes 內部網路 service 實現 load balancing。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 GCE 上實現的話，我說實話沒實作過，所以以下是鍵盤實現XD。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/load-balancing.html&#34;&gt;官方文件&lt;/a&gt; 建議使用 beats 端設定多個 logstash url 來做 load balancing。&lt;/p&gt;
&lt;p&gt;但我不是很喜歡 beat 去配置多個 logstash url 的作法：beat 要感知 logstash 數量跟 url ，增加減少 logstash instance 還要更改 beats 配置，產生配置的依賴跟耦合。&lt;/p&gt;
&lt;p&gt;最好是在 logstash 前過一層 HAproxy 或是雲端服務的 Load balancer（ex. GCP https/tcp load balancer），beat 直接送進 load balance 的端點。&lt;/p&gt;
&lt;h1 id=&#34;autodiscover&#34;&gt;autodiscover&lt;/h1&gt;
&lt;p&gt;如果有使用 container ，例如 docker 或 kubernetes，由於 container 內的 log 在主機上的位置是動態路徑，這邊可以使用 autodiscover 去尋找。&lt;/p&gt;
&lt;p&gt;在 kubernetes 上面的設定，之後會另開一天討論。&lt;/p&gt;
&lt;h1 id=&#34;dashboard&#34;&gt;dashboard&lt;/h1&gt;
&lt;p&gt;kibana 預設是空的，沒有預先載入 dashboard，但我們會希望資料送進去，就有設定好的 dashboard ，圖像化把資料呈現出來。這部份需要從 beat 這邊向 kibana 寫入。&lt;/p&gt;
&lt;p&gt;在上面的部份設定好 kibana 的連線資料，沒有設定的話 beat 啟動會警告。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setup.dashboards.enabled: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一起中就會檢查 kibana 是否有匯入 dashboard，沒有的話就匯入。&lt;/p&gt;
&lt;p&gt;也會一併匯入 modules 的 dashboard，例如如果有啟用 nginx module 處理 nginx 的 access log，nginx module 會處理 request source ip ，並透過 geoip database, 將 ip 轉會成經緯度座標。這時如果在 kibana 上有匯入 nginx dashboard，就可以看到圖像化的全球 request 分佈圖。&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;取得完整 filebeat 設定檔案並設定 filebeat&lt;/li&gt;
&lt;li&gt;盡量透過 beat central management 來管理 beat 的設定檔&lt;/li&gt;
&lt;li&gt;啟用對應 module 來更優雅的處理 log&lt;/li&gt;
&lt;li&gt;後送到 elasticsearch 前的資料都必須經過精細的處理，送進去後就不好刪改了&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ELK or Not ELK</title>
      <link>https://chechia.net/post/elastic-or-not-elastic/</link>
      <pubDate>Wed, 18 Sep 2019 18:51:40 +0800</pubDate>
      
      <guid>https://chechia.net/post/elastic-or-not-elastic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;監測 Google Compute Engine 上服務的各項數據&lt;/li&gt;
&lt;li&gt;監測 Google Kubernetes Engine 的各項數據&lt;/li&gt;
&lt;li&gt;使用 logstash pipeline 做數據前處理&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有板友問到，要如何選擇要不要用 ELK，其實也這是整篇 ELK 的初衷。這邊分享一下 ELK 與其他選擇，以及選擇解決方案應該考慮的事情。&lt;/p&gt;
&lt;h1 id=&#34;其他常用的服務&#34;&gt;其他常用的服務&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt;: 開源的 time series metrics 收集系統&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/stackdriver/?hl=zh-tw&#34;&gt;Stackdriver&lt;/a&gt;: GCP 的 log 與 metrics 平台&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/cloud/&#34;&gt;Elastic Cloud&lt;/a&gt;: ELK 的 Sass&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-hosted ELK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或是依照需求混搭，各個服務使用的各層套件是可以相容，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 GKE 上不用 beat 可以用 fluentd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prometheus -&amp;gt; Stackdriver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ELK -&amp;gt; Stackdriver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fluentd -&amp;gt; Prometheus
&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sass vs cloud self-hosted vs on-premised&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics: ELK vs Prometheus vs Stackdriver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging: ELK vs Stackdriver&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;取捨原則&#34;&gt;取捨原則&lt;/h1&gt;
&lt;p&gt;各個方法都各有利弊，完全取決於需求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已知條件限制，例如安全性考量就是要放在私有網路防火牆內，或是預算&lt;/li&gt;
&lt;li&gt;資料讀取方式，有沒有要交叉比對收集的資料，還是單純依照時間序查詢&lt;/li&gt;
&lt;li&gt;或是資料量非常大，應用數量非常多&lt;/li&gt;
&lt;li&gt;維護的團隊，有沒有想，或有沒有能力自己養 self-host 服務&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;sass-vs-self-hosted-vs-on-premised&#34;&gt;Sass vs Self-hosted vs On-premised&lt;/h1&gt;
&lt;p&gt;Sass: 指的是直接用 Elasitc Cloud，或是直接使用公有雲的服務(ex. 在 GCP 上使用 stackdriver)&lt;/p&gt;
&lt;p&gt;Cloud Self-hosted: 在公有雲上使用 ELK&lt;/p&gt;
&lt;p&gt;On-Premised: 自己在機房搭設&lt;/p&gt;
&lt;h3 id=&#34;安全性&#34;&gt;安全性&lt;/h3&gt;
&lt;p&gt;看公司的安全政策，允許將日誌及監控數據，送到私有網路以外的地方嗎？如果在防火牆內，搞不好 port 根本就不開給你，根本不用考慮使用外部服務。&lt;/p&gt;
&lt;p&gt;要知道服務的 log 其實可以看出很多東西．如果有特別做資料分析，敏感的資料，金流相關數據，通常不會想要倒到第三方服務平台。&lt;/p&gt;
&lt;p&gt;可能有做金流的，光是安全性這點，就必須選擇自架。&lt;/p&gt;
&lt;h3 id=&#34;成本&#34;&gt;成本&lt;/h3&gt;
&lt;p&gt;金錢成本 + 維護成本&lt;/p&gt;
&lt;p&gt;金錢成本就看各個服務的計費方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/elasticsearch/service/pricing&#34;&gt;Elastic Cloud Pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self-hosted ELK &amp;amp; Prometheus：機器成本&lt;/li&gt;
&lt;li&gt;公有雲服務(ex. &lt;a href=&#34;https://cloud.google.com/stackdriver/pricing?hl=zh-tw&#34;&gt;GCP Stackdriver&lt;/a&gt;): 用量計費&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;維護成本: 工程師的月薪 * 每個月要花在維護服務的工時比例&lt;/p&gt;
&lt;p&gt;一般 Sass 代管的服務，會降低維護成本，基本上就是做到網頁點一點就可以用。&lt;/p&gt;
&lt;p&gt;如果公司有完整的維護團隊，有機房，服務的使用量也很大，當然 self-hosted 是比較省。
中小型企業以及新創，服務在公有雲上的，直接使用Sass 服務往往比較節省成本，服務直接由 Sass 維護，節省很多機器上管理跟日常維護。&lt;/p&gt;
&lt;p&gt;避免迷思，買外部服務的帳單是顯性的，報帳時看得到，而工程師維護的時間成本是隱性的。self-host 可能省下 Sass 費用，但工程因為分了時間去維護，而影響進度。這部分就看團隊如何取捨。&lt;/p&gt;
&lt;h3 id=&#34;易用性&#34;&gt;易用性&lt;/h3&gt;
&lt;p&gt;如果應用都跑在公有雲上，可以考慮使用雲平台提供的監測服務，使用便利，而且整合度高。ex  GCP 上，要啟用 Stackdriver 是非常輕鬆的事情，只是改一兩個選項，就可以開啟 / 關閉 logging 與 metrics&lt;/p&gt;
&lt;p&gt;如果是 On-premised 自家機房，也許 self-hosted 會更為適合。&lt;/p&gt;
&lt;h3 id=&#34;客製化程度&#34;&gt;客製化程度&lt;/h3&gt;
&lt;p&gt;在大多數時候，沒有需要更改到服務的核心設定，都可以不可律客製化程度，直接使用 Sass 的設定，就能滿足大部分需求。可以等有有明確需求後再考慮這一點。短期內沒有特殊需求就可以從簡使用。&lt;/p&gt;
&lt;p&gt;使用GKE 到 Stackdriver 的話，對主機本身的機器是沒有控制權的，執行的 pipeline 也不太能更改
Elastic Cloud 有提供上傳 elasticsearch config 檔案的介面，也就是可以更改 server 運行的參數設定
Self-Hosted 除了上述的設定，還可以依照需求更改 ELK / prometheus 服務，在實體機器上的 topology，cpu 記憶體的資源配置，儲存空間配置等，可以最大化機器的效能。&lt;/p&gt;
&lt;h3 id=&#34;scalability&#34;&gt;Scalability&lt;/h3&gt;
&lt;p&gt;資料流量大，儲存空間消耗多，服務負擔大，可能就會需要擴展。&lt;/p&gt;
&lt;p&gt;一個是資料量的擴展。一個是為了應付服務的負擔，對 ELK 服務元件做水平擴展。&lt;/p&gt;
&lt;p&gt;除了 elasticsearch 以爲的元件，例如 kibana，apm-server, beats 都可以透過 kubernetes 輕易的擴展，唯有 elasticsearch ，由於又牽扯上述資料量的擴展，以及分佈，還有副本管理，index 本身的 lifecycle 管理。Elasticsearch 的 scaling 設定上是蠻複雜的，也有很多工要做。index 的 shards / replicas 設定都要注意到。否則一路 scale 上去，集群大的時候彼此 sharding sync 的效能消耗是否會太重。&lt;/p&gt;
&lt;p&gt;Stackdriver 從使用者的角度，是不存在服務節點的擴展問題，節點的維護全都給 Sass 管理。資料量的擴展問題也不大，只要整理資料 pipeline，讓最後儲存的資料容易被查找。&lt;/p&gt;
&lt;h1 id=&#34;timeseries-vs-non-timeseriese&#34;&gt;Timeseries vs non-timeseriese&lt;/h1&gt;
&lt;p&gt;Prometheus &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/storage/&#34;&gt;是自帶 time series database&lt;/a&gt;，stackdriver 也是 time series 的儲存。ELK 的 elasticsearch 是全文搜索引擎，用了 timestamp 做分析所以可以做到 time series 的資料紀錄與分析。這點在本質上是完全不同的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;光只處理 time series data，Prometheus 的 query 效能是比 elasticsearch 好很多&lt;/li&gt;
&lt;li&gt;Elasticsearch 有大量的 index 維護，需要較多系統資源處理，在沒有 query 壓力的情形下會有系統自動維護的效能消耗&lt;/li&gt;
&lt;li&gt;ELK 的資料不需要預先建模，就可以做到非常彈性的搜尋查找。Stackdriver 的話，無法用未建模的資料欄位交叉查找。
&lt;ul&gt;
&lt;li&gt;Log 收集方面
&lt;ul&gt;
&lt;li&gt;Elasticsearch 中的資料欄位透過 tempalte 匯入後，都是有做 index ，所以交叉查找，例如可以從 log text 中包含特定字串的紀錄，在做 aggregate 算出其他欄位的資料分佈。會比較慢，但是是做得到的全文搜索&lt;/li&gt;
&lt;li&gt;Stackdriver 可以做基本的 filter ，例如 filter 某個欄位，但不能做太複雜的交叉比對，也不能針對 text 內容作交互查找，需要換出來另外處理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metrics 收集方面
&lt;ul&gt;
&lt;li&gt;(同上) Elasticsearch 可以用全文搜索，做到很複雜的交叉比對，例如：從 metrics 數值，計算在時間範圍的分佈情形(cpu 超過 50% 落在一天 24 小時，各個小時的次數)&lt;/li&gt;
&lt;li&gt;Stackdriver 只能做基本的 time series 查找，然後透過預先定義好的 field filter 資料，再各自圖像化。&lt;/li&gt;
&lt;li&gt;Prometheus 也是必須依照 time series 查找，語法上彈性比 stackdriver 多很多，但依樣不能搜尋沒有 index 的欄位&lt;/li&gt;
&lt;li&gt;這邊要替別提，雖然 Elasticsearch 能用全文搜索輕易地做到複雜的查詢語法，但以 metrics 來說，其實沒有太多跳脫 time series 查找的需求。能做到，但有沒有必要這樣做，可以打個問號。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人心得，如果驗證全新的 business model，或是還不確定的需求，可以使用 ELK 做各種複雜的查詢&lt;/p&gt;
&lt;p&gt;如果需求明確，收進來的 log 處理流程都很明確，也許不用使用 ELK。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;論系統資源 CP 值以及效能，time series 的 db 都會比 Elasticsearch 好上不少。&lt;/li&gt;
&lt;li&gt;Elasticsearch 中也不太適合一直存放大量的資料在 hot 可寫可讀狀態，繪希好很多系統資源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;其他服務&#34;&gt;其他服務&lt;/h1&gt;
&lt;p&gt;Elastic 有出許多不同的增值服務&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application Performance Monitoring(APM)&lt;/li&gt;
&lt;li&gt;Realtime User Monitoring(RUM)&lt;/li&gt;
&lt;li&gt;Machine Learning(ELK ML)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 ELK 以外也都有不同的解決方案，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCP 也出了自己的 APM Sass&lt;/li&gt;
&lt;li&gt;Google Analytics(GA) 不僅能做多樣的前端使用者行為分析，還能整合 Google 收集到的使用者行為，做更多維度的分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相較之下 ELK 在這塊其實沒有特別優勢。&lt;/p&gt;
&lt;h1 id=&#34;elastic-cloud&#34;&gt;Elastic Cloud&lt;/h1&gt;
&lt;p&gt;我這邊要特別說 Elastic Cloud vs ELK&lt;/p&gt;
&lt;p&gt;Elatic Cloud 的運行方式，是代為向公與恩平台(aaws, gcp,&amp;hellip;)，帶客戶向平台租用機器，然後把 ELK 服務部署到租用的機器上。用戶這邊無法直接存取機器，只能透過 ELK 介面或是 Kibana , API 進入 ELK。Elastic Cloud 會監控無誤節點的狀況，並做到一定程度的代管。&lt;/p&gt;
&lt;p&gt;這邊指的一定程度的代管，是 Elastic Cloud 只是代為部署服務，監控。有故障時並不負責排除，如果 ELK 故障，簡單的問題（ex. 記憶體資源不足）會代為重開機器，但如果是複雜的問題，還是要用戶自己處理．但是用戶又沒有主機節點的直接存取權限，所以可能會造成服務卡住無法啟動，只能透過 Elastic Cloud 的管理介面嘗試修復。&lt;/p&gt;
&lt;p&gt;使用服務除了把服務都架設完以外，還是需要定期要花時間處理 performance tuning，設定定期清理跟維護。包括 kafka, redis, mongoDB, cassandra, SQLs&amp;hellip;都是一樣，架構越複雜，效能要求越高，這部分的工都會更多。如果公司有 DBA，或是專職維護工程師，那恭喜就不用煩惱。&lt;/p&gt;
&lt;p&gt;Elasticsearch server 目前用起來，算是是數服務中，維護上會花比較多時間的服務。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為引擎本身設計的架構，並不是很多人都熟悉。在使用ELK同時，對ELK底層引擎的運作流程有多熟悉，會直接影響穩定性跟跑出來的效能。&lt;/li&gt;
&lt;li&gt;需要好好處理設計資料的儲存，如果使用上沒處理好，會直接讓整個ELK 掛掉。&lt;/li&gt;
&lt;li&gt;然後產品本身的維護介面，目前只是在堪用，許多重要的功能也還在開發中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果公司有人會管 ELK，個人建議是可以 self-host&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;弄清楚需求，如果沒有特殊需求可以走 general solution&lt;/li&gt;
&lt;li&gt;Sass vs Self-hosted vs On-premised&lt;/li&gt;
&lt;li&gt;Time series vs non time series&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>X.509 certificate</title>
      <link>https://chechia.net/post/x.509-certificate/</link>
      <pubDate>Tue, 17 Sep 2019 10:15:36 +0800</pubDate>
      
      <guid>https://chechia.net/post/x.509-certificate/</guid>
      <description>&lt;h1 id=&#34;簡單講一下-certificate&#34;&gt;簡單講一下 certificate&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;X.509 是公鑰憑證(public key certificate) 的一套標準，用在很多網路通訊協定 (包含 TLS/SSL)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;certificate 包含公鑰及識別資訊(hostname, organization, &amp;hellip;等資訊)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;certificate 是由 certificate authority(CA) 簽署，或是自簽(Self-signed)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 browser 連入 https server時，會檢查 server 的 certificate 是否有效，確定這個 server 真的是合法的 site&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 elastic stack 上，如果有多個 elasticsearch server node 彼此連線，由於 node 彼此是 client 也是 server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 self-signed CA 產出來的 certificate，連入時會檢查使用的 certificate 是否由同一組 CA 簽署&lt;/li&gt;
&lt;li&gt;server 使用 certificate，確定連入 server 的 client 都帶有正確的私鑰與 public certificate，是 authenticated user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;附帶說明，X.509 有多種檔案格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.pem&lt;/li&gt;
&lt;li&gt;.cer, .crt, .der&lt;/li&gt;
&lt;li&gt;.p12&lt;/li&gt;
&lt;li&gt;.p7b, .p7c&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外檔案格式可以有其他用途，也就是說裡面裝的不一定是 X.509 憑證&lt;/p&gt;
&lt;h1 id=&#34;ca&#34;&gt;CA&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ openssl pkcs12 -in /etc/elasticsearch/config/elastic-stack-ca.p12 -info -nokeys

MAC: sha1, Iteration 100000
MAC length: 20, salt length: 20
PKCS7 Data
Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 50000
PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 50000
Certificate bag
Bag Attributes
    friendlyName: ca
    localKeyID:
subject=CN = Elastic Certificate Tool Autogenerated CA

issuer=CN = Elastic Certificate Tool Autogenerated CA

-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;issuer command name 為 Elastic autogen CA
subject command name 為 Elastic autogen CA&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://shazi.info/openssl-%E6%AA%A2%E6%B8%AC-ssl-%E7%9A%84%E6%86%91%E8%AD%89%E4%B8%B2%E9%8D%8A-certificate-chain/&#34;&gt;https://shazi.info/openssl-%E6%AA%A2%E6%B8%AC-ssl-%E7%9A%84%E6%86%91%E8%AD%89%E4%B8%B2%E9%8D%8A-certificate-chain/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl s_client -connect google.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/@superseb/get-your-certificate-chain-right-4b117a9c0fce&#34;&gt;https://medium.com/@superseb/get-your-certificate-chain-right-4b117a9c0fce&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl verify -CAfile client-ca.cer client.cer

openssl verify -show_chain -CAfile client-ca.cer client.cer
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;certificate&#34;&gt;Certificate&lt;/h1&gt;
&lt;p&gt;用 openssl 工具看一下內容，如果有密碼這邊要用密碼解鎖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl pkcs12 -in /etc/elasticsearch/config/elastic-certificates.p12 -info -nokeys

MAC: sha1, Iteration 100000
MAC length: 20, salt length: 20
PKCS7 Data
Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 50000
PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 50000
Certificate bag
Bag Attributes
    friendlyName: elk.asia-east1-b.c.machi-x.internal
    localKeyID:
subject=CN = elk.asia-east1-b.c.machi-x.internal

issuer=CN = Elastic Certificate Tool Autogenerated CA

-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
Certificate bag
Bag Attributes
    friendlyName: ca
    2.16.840.1.113894.746875.1.1: &amp;lt;Unsupported tag 6&amp;gt;
subject=CN = Elastic Certificate Tool Autogenerated CA

issuer=CN = Elastic Certificate Tool Autogenerated CA

-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Secure Elk Stack</title>
      <link>https://chechia.net/post/secure-elk-stack/</link>
      <pubDate>Sun, 15 Sep 2019 23:00:33 +0800</pubDate>
      
      <guid>https://chechia.net/post/secure-elk-stack/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;監測 Google Compute Engine 上服務的各項數據&lt;/li&gt;
&lt;li&gt;監測 Google Kubernetes Engine 的各項數據&lt;/li&gt;
&lt;li&gt;使用 logstash pipeline 做數據前處理&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;p&gt;上篇&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt; 介紹了，elk stack 基本的安裝，安裝完獲得一個只支援 http (裸奔)的 elk stack，沒有 https 在公開網路上使用是非常危險的。這篇要來介紹如何做安全性設定。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elastic-stack-overview/7.3/elasticsearch-security.html&#34;&gt;官方的文件在這裡&lt;/a&gt;，碎念一下，除非對 ELK 的功能有一定了解，不然這份真的不是很友善。建議從官方文件底下的&lt;a href=&#34;https://www.elastic.co/guide/en/elastic-stack-overview/7.3/security-getting-started.html&#34;&gt;Tutorial: Getting started with security&lt;/a&gt; 開始，過程比較不會這麼血尿。&lt;/p&gt;
&lt;p&gt;總之為了啟用 authentication &amp;amp; https，這篇要做的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enable x-pack &amp;amp; activate basic license&lt;/li&gt;
&lt;li&gt;Generate self-signed ca, server certificate, client certificate&lt;/li&gt;
&lt;li&gt;Configure Elasticsearch, Kibana, &amp;amp; other components to
&lt;ul&gt;
&lt;li&gt;use server certificate when act as server&lt;/li&gt;
&lt;li&gt;use client certificate when connect to an ELK server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;啟用-x-pack&#34;&gt;啟用 X-pack&lt;/h1&gt;
&lt;p&gt;Elasticsearch 的安全性模組由 x-pack extension 提供，在 &lt;a href=&#34;https://www.elastic.co/what-is/open-x-pack&#34;&gt;6.3.0 之後的版本&lt;/a&gt;，安裝 elasticsearch 的過程中就預設安裝 x-pack。&lt;/p&gt;
&lt;p&gt;附上&lt;a href=&#34;https://www.elastic.co/guide/en/elastic-stack-overview/7.3/get-started-enable-security.html&#34;&gt;啟用的官方文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然而，由於舊版的 x-pack 是付費內容，目前的 elasticsearch 安裝完後，elasticsearch.yml 設定預設不啟用 x-pack，也就是說沒看到這篇官方文件的話，很容易就獲得沒有任何 security 功能的 ELK。&lt;/p&gt;
&lt;p&gt;雖然目前已經可以使用免費的 basic license 使用 security 功能，還是希望官方可以 default 啟用 security。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/elasticsearch/elasticsearch.yml

xpack.security.enabled: true

xpack.license.self_generated.type: basic

discovery.type: single-node
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們這邊啟用 xpack.security，同時將 self-generated license 生出來，我們這邊只使用基本的 basic subscription。若希望啟用更多功能，可以看&lt;a href=&#34;https://www.elastic.co/cn/subscriptions&#34;&gt;官方subcription 方案介紹&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外，如果不同時設定為 single-node 的話，預設會尋找其他elasticsearch node 來組成 cluster，而我們就必須要在所有 node 上啟用 security，這篇只帶大家做一個 single node cluster，簡化步驟。&lt;/p&gt;
&lt;p&gt;重啟 elasticsearch ，檢查 log，看啟動時有沒有載入 x-pack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart elasticsearch

$ tail -f /var/log/elasticsearch/elasticsearch.log

[2019-09-16T07:39:49,467][INFO ][o.e.e.NodeEnvironment    ] [elk] using [1] data paths, mounts [[/mnt/disks/elk (/dev/sdb)]], net usable_space [423.6gb], net total_space [491.1gb], types [ext4]
[2019-09-16T07:39:49,474][INFO ][o.e.e.NodeEnvironment    ] [elk] heap size [3.9gb], compressed ordinary object pointers [true]
[2019-09-16T07:39:50,858][INFO ][o.e.n.Node               ] [elk] node name [elk], node ID [pC22j9D4R6uiCM7oTc1Fiw], cluster name [elasticsearch]
[2019-09-16T07:39:50,866][INFO ][o.e.n.Node               ] [elk] version[7.3.1], pid[17189], build[default/deb/4749ba6/2019-08-19T20:19:25.651794Z], OS[Linux/4.15.0-1040-gcp/amd64], JVM[Oracle Corporation/OpenJDK 64-Bit Server VM/12.0.2/12.0.2+10]
[2019-09-16T07:39:50,878][INFO ][o.e.n.Node               ] [elk] JVM home [/usr/share/elasticsearch/jdk]
...
[2019-09-16T07:39:59,108][INFO ][o.e.p.PluginsService     ] [elk] loaded module [x-pack-ccr]
[2019-09-16T07:39:59,109][INFO ][o.e.p.PluginsService     ] [elk] loaded module [x-pack-core]
...
[2019-09-16T07:39:59,111][INFO ][o.e.p.PluginsService     ] [elk] loaded module [x-pack-logstash]
[2019-09-16T07:39:59,113][INFO ][o.e.p.PluginsService     ] [elk] loaded module [x-pack-voting-only-node]
[2019-09-16T07:39:59,114][INFO ][o.e.p.PluginsService     ] [elk] loaded module [x-pack-watcher]
[2019-09-16T07:39:59,115][INFO ][o.e.p.PluginsService     ] [elk] no plugins loaded
[2019-09-16T07:40:07,964][INFO ][o.e.x.s.a.s.FileRolesStore] [elk] parsed [0] roles from file [/etc/elasticsearch/roles.yml]
[2019-09-16T07:40:10,369][INFO ][o.e.x.m.p.l.CppLogMessageHandler] [elk] [controller/17314] [Main.cc@110] controller (64 bit): Version 7.3.1 (Build 1d93901e09ef43) Copyright (c) 2019 Elasticsearch BV
[2019-09-16T07:40:11,776][DEBUG][o.e.a.ActionModule       ] [elk] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security
[2019-09-16T07:40:14,396][INFO ][o.e.d.DiscoveryModule    ] [elk] using discovery type [single-node] and seed hosts providers [settings]
[2019-09-16T07:40:16,222][INFO ][o.e.n.Node               ] [elk] initialized
[2019-09-16T07:40:16,224][INFO ][o.e.n.Node               ] [elk] starting ...
[2019-09-16T07:40:16,821][INFO ][o.e.t.TransportService   ] [elk] publish_address {10.140.0.10:9300}, bound_addresses {[::]:9300}
[2019-09-16T07:40:16,872][INFO ][o.e.c.c.Coordinator      ] [elk] cluster UUID [1CB6_Lt-TUWEmRoN9SE49w]
[2019-09-16T07:40:17,088][INFO ][o.e.c.s.MasterService    ] [elk] elected-as-master ([1] nodes joined)[{elk}{pC22j9D4R6uiCM7oTc1Fiw}{Os-2FBjgSTOd1G_I3QYwVQ}{10.140.0.10}{10.140.0.10:9300}{dim}{ml.machine_memory=7836028928, xpack.installed=true, ml.max_open_jobs=20} elect leader, _BECOME_MASTER_TASK_, _FINISH_ELECTION_], term: 9, version: 921, reason: master node changed {previous [], current [{elk}{pC22j9D4R6uiCM7oTc1Fiw}{Os-2FBjgSTOd1G_I3QYwVQ}{10.140.0.10}{10.140.0.10:9300}{dim}{ml.machine_memory=7836028928, xpack.installed=true, ml.max_open_jobs=20}]}
[2019-09-16T07:40:17,819][INFO ][o.e.c.s.ClusterApplierService] [elk] master node changed {previous [], current [{elk}{pC22j9D4R6uiCM7oTc1Fiw}{Os-2FBjgSTOd1G_I3QYwVQ}{10.140.0.10}{10.140.0.10:9300}{dim}{ml.machine_memory=7836028928, xpack.installed=true, ml.max_open_jobs=20}]}, term: 9, version: 921, reason: Publication{term=9, version=921}
[2019-09-16T07:40:17,974][INFO ][o.e.h.AbstractHttpServerTransport] [elk] publish_address {10.140.0.10:9200}, bound_addresses {[::]:9200}
[2019-09-16T07:40:17,975][INFO ][o.e.n.Node               ] [elk] started
[2019-09-16T07:40:18,455][INFO ][o.e.c.s.ClusterSettings  ] [elk] updating [xpack.monitoring.collection.enabled] from [false] to [true]
[2019-09-16T07:40:22,555][INFO ][o.e.l.LicenseService     ] [elk] license [************************************] mode [basic] - valid
[2019-09-16T07:40:22,557][INFO ][o.e.x.s.s.SecurityStatusChangeListener] [elk] Active license is now [BASIC]; Security is enabled
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;enable-user-authentication&#34;&gt;Enable user authentication&lt;/h1&gt;
&lt;p&gt;啟用 security 之前，我們直接連入 Kibana http://10.140.0.10:5601 ，不用任何使用者登入，便可以完整使用 Kibana 功能（包含 admin 管理介面）。&lt;/p&gt;
&lt;p&gt;啟用 security 後，便需要使用帳號密碼登入。在這邊先用工具把使用者密碼產生出來。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 互動式
/usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive

# 自動產生
/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;密碼生出來後，就把帳號密碼收好，等等會用到。之後初次登入也是使用這些密碼。&lt;/p&gt;
&lt;h1 id=&#34;configure-passwords-on-client-side&#34;&gt;Configure passwords on client-side&lt;/h1&gt;
&lt;p&gt;由於已經啟用 authentication，其他 ELK 元件 (Kibana, logstash, filebeat, apm-server,&amp;hellip;) 連入 Elasticsearch 也都會需要各自的帳號密碼驗證。&lt;/p&gt;
&lt;p&gt;以 Kibana 為例，可以直接在 kibana.yml 中直接設定帳號密碼&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/kibana/kibana.yml

elasticsearch.hosts: [&amp;quot;http://localhost:9200&amp;quot;]
xpack.security.enabled: true

elasticsearch.username: &amp;quot;kibana&amp;quot;
elasticsearch.password: &amp;quot;***********&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當然，這邊就是明碼的，看了不太安全。&lt;/p&gt;
&lt;p&gt;或是使用 keystore 把 built-in user 的密碼加密，存在 kibana 的 keystore 裡面，重啟 kibana 時便會載入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/share/kibana/bin/kibana-keystore create
/usr/share/kibana/bin/kibana-keystore add elasticsearch.username
/usr/share/kibana/bin/kibana-keystore add elasticsearch.password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果有啟用 Filebeat 功能，beat 元件連入 elasticsearch 一樣需要設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/share/apm-server/bin/filebeat keystore create
/usr/share/apm-server/bin/filebeat add elasticsearch.username
/usr/share/apm-server/bin/filebeat add elasticsearch.password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果有啟用 application performance monitoring(APM) 功能，apm-server 元件連入 elasticsearch 一樣需要設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/share/apm-server/bin/apm-server keystore create
/usr/share/apm-server/bin/apm-server add elasticsearch.username
/usr/share/apm-server/bin/apm-server add elasticsearch.password
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;encrypting-communications&#34;&gt;Encrypting Communications&lt;/h1&gt;
&lt;p&gt;上面加了 username/password authentication，但如果沒 https/tls 基本上還是裸奔。接下來要處理連線加密。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elastic-stack-overview/7.3/encrypting-internode-communications.html&#34;&gt;官方 tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一堆官方文件，我們先跳過XD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elastic-stack-overview/7.3/elasticsearch-security.html&#34;&gt;elasticsearch security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elastic-stack-overview/7.3/ssl-tls.html&#34;&gt;elastic stack ssl tls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.3/configuring-tls.html#configuring-tls&#34;&gt;elasticsearch configuring tls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.3/certutil.html&#34;&gt;certutil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分析一下需求跟規格&#34;&gt;分析一下需求跟規格&lt;/h1&gt;
&lt;p&gt;我們需要為每一個 node 生一組 node certificate，使用 node certificate 產生 client certificates 提供給其他 client，連入時會驗證 client 是否為 authenticated user。&lt;/p&gt;
&lt;p&gt;針對目前這個 single-node ELK stack，我們可能有幾種選擇&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簽署一個 localhost，當然這個只能在 localhost 上的客戶端元件使用，別的 node 無法用這個連入&lt;/li&gt;
&lt;li&gt;簽署一個 public DNS elk.chechiachang.com，可以在公開網路上使用，別人也可以使用這個DNS嘗試連入&lt;/li&gt;
&lt;li&gt;簽署一個私有網域的 DNS，例如在 GCP 上可以使用&lt;a href=&#34;https://cloud.google.com/compute/docs/internal-dns?hl=zh-tw&#34;&gt;內部dns服務&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;長這樣 elk.asia-east1-b.c.chechiachang.internal&lt;/li&gt;
&lt;li&gt;[INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有需要也可以一份 server certificate 中簽署複數個 site&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們這邊選擇使用內部 dns，elk.asia-east1-b-c-chechaichang.internal，讓這個 single-node elk 只能透過內部網路存取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch: elk.asia-east1-b.c.chechaichang.internal:9200&lt;/li&gt;
&lt;li&gt;kibana: elk.asia-east1-b.c.chechaichang.internal:5601&lt;/li&gt;
&lt;li&gt;外部要連近來 kibana，我們使用 vpn 服務連進私有網路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想使用外部 dns，讓 elk stack 在公開網路可以使用，ex. elk.chechiachang.com，可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCP 的 load balancer掛進來，用 GCP 的 certificate manager 自動管理 certificate&lt;/li&gt;
&lt;li&gt;或是在 node 上開一個 nginx server，再把 certificate 用 certbot 生出來&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;generate-certificates&#34;&gt;Generate certificates&lt;/h1&gt;
&lt;p&gt;先把 X.509 digital certificate 的 certificate authority(CA) 生出來。我們可以設定密碼保護這個檔案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /etc/elasticsearch/config

# CA generated with Elastic tool
/usr/share/elasticsearch/bin/elasticsearch-certutil ca \
  -out /etc/elasticsearch/config/elastic-stack-ca.p12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生出來是 PKCS#12 格式的 keystore，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA 的 public certificate&lt;/li&gt;
&lt;li&gt;CA 的基本資訊&lt;/li&gt;
&lt;li&gt;簽署其他 node certificates 使用的私鑰(private key)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用 openssl 工具看一下內容，如果有密碼這邊要用密碼解鎖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl pkcs12 -in /etc/elasticsearch/config/elastic-stack-ca.p12 -info -nokeys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;附帶說明，X.509 有多種檔案格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.pem&lt;/li&gt;
&lt;li&gt;.cer, .crt, .der&lt;/li&gt;
&lt;li&gt;.p12&lt;/li&gt;
&lt;li&gt;.p7b, .p7c&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外檔案格式可以有其他用途，也就是說裡面裝的不一定是 X.509 憑證。裡面的內容也不同。&lt;/p&gt;
&lt;p&gt;ELK 設定的過程中，由於不是所有的 ELK component 都支援使用 .p12 檔案，我們在設定過程中會互相專換，或是混用多種檔案格式。&lt;/p&gt;
&lt;h1 id=&#34;generate-certificate&#34;&gt;Generate certificate&lt;/h1&gt;
&lt;p&gt;&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD&lt;/p&gt;
&lt;p&gt;我們用 elastic-stack-ca.p12 這組 keystore裡面的 CA 與 private key，為 elk.asia-east1-b.c.chechiachang.internal 簽一個 p12 keystore，裡面有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node certificate&lt;/li&gt;
&lt;li&gt;node key&lt;/li&gt;
&lt;li&gt;CA certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊只產生一組 server certificate 給 single-node cluster 的 node-1&lt;/p&gt;
&lt;p&gt;=======&lt;/p&gt;
&lt;p&gt;我們用 elastic-stack-ca.p12 這組 keystore裡面的 CA 與 private key，為 elk.asia-east1-b.c.chechiachang.internal 簽一個 p12 keystore，裡面有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node certificate&lt;/li&gt;
&lt;li&gt;node key&lt;/li&gt;
&lt;li&gt;CA certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊只產生一組 server certificate 給 single-node cluster 的 node-1&lt;/p&gt;
&lt;p&gt;如果 cluster 中有多個 elasticsearch，為每個 node 產生 certificate 時都要使用同樣 CA 來簽署，讓 server 信任這組 CA。&lt;/p&gt;
&lt;p&gt;使用 elasticsearch-certutil 簡化簽署過程，從產生 CA ，到使用 CA 簽署 certificate。另外，再產生 certificate 中使用 Subject Alternative Name(SAN)，並輸入 ip 與 dns。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# certificate for site: private dns with Elastic CA
/usr/share/elasticsearch/bin/elasticsearch-certutil cert \
  --ca /etc/elasticsearch/config/elastic-stack-ca.p12 \
  --name elk.asia-east1-b.c.chechaichang.internal \
  --dns elk.asia-east1-b.c.chechaichang.internal \
  --ip 10.140.0.10 \
  -out /etc/elasticsearch/config/node-1.p12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用 openssl 看一下內容，如果有密碼這邊要用密碼解鎖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -info -nokeys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;server 用這個 certificate ，啟用 ssl。&lt;/p&gt;
&lt;p&gt;client 使用這個 certificate 產生出來的 client.cer 與 client.key 與 server 連線，server 才接受客戶端是安全的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;25f5ab795b9e698333a36fde7ecf23a8ba9d4595
記得把所有權還給 elasticsearch 的使用者，避免 permission denied&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# Change owner to fix read permission
chown -R elasticsearch:elasticsearch /etc/elasticsearch/config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有密碼記得也要用 keystore 把密碼加密後喂給 elasticsearch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password
/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;關於 X.509 Certifcate 之後有空我們來聊一下&lt;/p&gt;
&lt;h1 id=&#34;更新-elasticsearch-設定&#34;&gt;更新 elasticsearch 設定&lt;/h1&gt;
&lt;p&gt;Certificates 都生完了，接下來更改 elasticsearch 的參數，在 transport layer 啟用 ssl。啟用 security 後，在 transport layer 啟動 ssl 是必須的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/elasticsearch/elasticsearch.yml

xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
# use certificate. full will verify dns and ip
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: /etc/elasticsearch/config/node-1.p12
xpack.security.transport.ssl.truststore.path: /etc/elasticsearch/config/node-1.p12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;啟用 security 與 transport layer 的 ssl，然後指定 keystore路徑，讓 server 執行 client authentication
由於這筆 p12 帶有 CA certificate 作為 trusted certificate entry，所以也可以順便當作 trustore，讓 client 信任這個 CA&lt;/p&gt;
&lt;p&gt;security 這邊提供了 server side (elasticsearch) 在檢查客戶端連線時的檢查模式(vertification mode)，&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#ssl-tls-settings&#34;&gt;文件有說明&lt;/a&gt;，可以設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;certificate: 檢查 certificate 加密是否有效&lt;/li&gt;
&lt;li&gt;full: 簽 node certificate 時可以指定 ip dns，啟用會檢查來源 node ip dns 是否也正確&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Optional) HTTP layer 啟動 ssl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/elasticsearch/elasticsearch.yml

xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: /etc/elasticsearch/config/node-1.p12
xpack.security.http.ssl.truststore.path: /etc/elasticsearch/config/node-1.p12

/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重啟 elasticsearch，看一下 log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart elasticsearch
tail -f /var/log/elasticsearch/elasticsearch.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後你就發現，原來 kibana 連入 的 http 連線，不斷被 server 這端拒絕。所以以下要來設定 kibana&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;kibana&#34;&gt;Kibana&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/kibana/7.3/using-kibana-with-security.html&#34;&gt;using kibana with security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/kibana/7.3/configuring-tls.html&#34;&gt;kibana configuring tls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用剛剛簽的 server certificate，從裡面 parse 出 client-ca.cer，還有 client.cer 與 client.key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /etc/kibana/config

$ openssl pkcs12 --help
Usage: pkcs12 [options]
Valid options are:
 -chain              Add certificate chain
 -nokeys             Don&#39;t output private keys
 -nocerts            Don&#39;t output certificates
 -clcerts            Only output client certificates
 -cacerts            Only output CA certificates
 -info               Print info about PKCS#12 structure
 -nodes              Don&#39;t encrypt private keys
 -in infile          Input filename

# no certs, no descript
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -nocerts -nodes &amp;gt; /etc/kibana/config/client.key
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -clcerts -nokeys &amp;gt; /etc/kibana/config/client.cer
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -cacerts -nokeys -chain &amp;gt; /etc/kibana/config/client-ca.cer

sudo chown -R kibana:kibana /etc/kibana/config/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更改 kibana 連入 elasticsearch 的連線設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/kigana/kibana.yml

elasticsearch.hosts: [&amp;quot;https://elk.asia-east1-b.c.chechaichang.internal:9200&amp;quot;]
xpack.security.enabled: true
elasticsearch.ssl.certificate: /etc/kibana/config/client.cer
elasticsearch.ssl.key: /etc/kibana/config/client.key
elasticsearch.ssl.certificateAuthorities: [ &amp;quot;/etc/kibana/config/client-ca.cer&amp;quot; ]
elasticsearch.ssl.verificationMode: full
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;指定 ssl.certificate, ssl.key 做連線 elasticsearch server 時的 user authentication&lt;/li&gt;
&lt;li&gt;由於我們是 self-signed CA，所以需要讓客戶端信任這個我們自簽的 CA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意這邊 elasticsearch.hosts 我們已經從 http://localhost 換成 https 的內部 dns，原有的 localhost 已經無法使用（如果 elasicsearch 有 enforce https 的話）&lt;/p&gt;
&lt;p&gt;重啟 Kibana，看一下 log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart kibana
journalctl -fu kibana
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果沒有一直噴 ssl certificate error 的話，恭喜你成功了&lt;/p&gt;
&lt;p&gt;然而，除了 kibana 以外，我們還有其他的 client 需要連入 elasticsearch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把上述步驟在 apm-server, filebeat, 其他的 beat 上也設定&lt;/li&gt;
&lt;li&gt;如果在 k8s 上，要把 cer, key 等檔案用 volume 掛進去
&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kibana 本身也有 server 的功能，讓其他 client 連入。例如讓 filebeat 自動將 document tempalte 匯入 kibana，我們也需要設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kibana server certificate&lt;/li&gt;
&lt;li&gt;filebeat client to kibana server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=======&lt;/p&gt;
&lt;p&gt;Kibana 本身也有 server 的功能，讓其他 client 連入。例如讓 filebeat 自動將 document tempalte 匯入 kibana，我們也需要設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kibana server certificate&lt;/li&gt;
&lt;li&gt;filebeat client to kibana server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就是他們彼此互打，都要有 ca, key, cert&lt;/p&gt;
&lt;h3 id=&#34;但基本上的設定都一樣下面可以不用看下去了xd&#34;&gt;但基本上的設定都一樣，下面可以不用看下去了XD&lt;/h3&gt;
&lt;p&gt;如果有用到再查文件就好，這邊直接小結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定 security 前要先想號自己的需求，如何連入，安全性設定到哪邊&lt;/li&gt;
&lt;li&gt;使用 utility 自簽 CA，然後產生 server certificate&lt;/li&gt;
&lt;li&gt;使用 server certificate 再 parse 出 ca-certificate, client cers, key&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;kibana-作為-server&#34;&gt;kibana 作為 server&lt;/h1&gt;
&lt;p&gt;工作路徑可能是這樣： app(apm-client library) -&amp;gt; apm-server -&amp;gt; kibana -&amp;gt; elasticsearch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kibana 連入 elasticsearch時， kibana 是 client 吃 elasticsearch 的憑證&lt;/li&gt;
&lt;li&gt;apm-server 連入 kibana時，kibana 是 server，apm-server 吃 kibana 的憑證&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先更改 kibana 設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/kibana/kibana.yml

server.ssl.enabled: true
server.ssl.certificate: /etc/kibana/config/client.cer
server.ssl.key: /etc/kibana/config/client.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重啟 kibana&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -fu kibana
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;apm-server&#34;&gt;Apm-server&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/apm/server/7.3/securing-apm-server.html&#34;&gt;https://www.elastic.co/guide/en/apm/server/7.3/securing-apm-server.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;應用端的 apm-client (ex. apm-python-client)，連入 apm-server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 http 的狀況下，雖然有使用 secret-token，但還是裸奔&lt;/li&gt;
&lt;li&gt;在 https 的狀況下，要把 certificates，然後餵給應用端的client library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更改 apm-server 的設定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/apm-server/apm-server.yml

host: &amp;quot;0.0.0.0:8200&amp;quot;
  secret_token: &amp;lt;設定一組夠安全的 token&amp;gt;

  rum:
    enabled: true

kibana:
  protocol: &amp;quot;https&amp;quot;
  ssl.enabled: true

output.kibana:
  enable: false # can only have 1 output
output.elasticsearch:

monitoring.elasticsearch:
  protocol: &amp;quot;https&amp;quot;
  username: &amp;quot;elastic&amp;quot;
  password: &amp;quot;*******************&amp;quot;
  hosts: [&amp;quot;elk.asia-east1-b.c.checahichang.internal:9200&amp;quot;]
  ssl.enabled: true
  ssl.verification_mode: full
  ssl.certificate_authorities: [&amp;quot;/etc/apm-server/config/client-ca.cer&amp;quot;]
  ssl.certificate: &amp;quot;/etc/apm-server/config/client.cer&amp;quot;
  ssl.key: &amp;quot;/etc/apm-server/config/client.key&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重啟 apm-server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl restart apm-server
journalctl -fu apm-server
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;apm-library&#34;&gt;APM library&lt;/h1&gt;
&lt;p&gt;應用端的設定就需要依據 library 的實做設定，例如 flask-apmagent-python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ELASTIC_APM_SERVER_CERT=/etc/elk/certificates/client.cer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/python/current/configuration.html#config-server-cert&#34;&gt;apm agent python config server cert&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;filebeat&#34;&gt;filebeat&lt;/h1&gt;
&lt;p&gt;記得我們在 node 上有安裝 Self-monitoring filebeat，elasticsearch 改成 ssl 這邊當然也連不盡去了，再做同樣操作&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html&#34;&gt;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install filebeat

mkdir -p /etc/filebeat/config
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -nocerts -nodes &amp;gt; /etc/filebeat/config/client.key
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -clcerts -nokeys &amp;gt; /etc/filebeat/config/client.cer
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -cacerts -nokeys -chain &amp;gt; /etc/filebeat/config/client-ca.cer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Restart filebeat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl restart filebeat
journalctl -fu filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;如果你的應用在-kubernetes-上&#34;&gt;如果你的應用在 kubernetes 上&lt;/h1&gt;
&lt;p&gt;可以使用下面方法拿到 client.cer ，然後用 secret 塞進 k8s，在用 volume from secrets，掛給監測應用的 filebeat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
mkdir -p /etc/beats/config
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -nocerts -nodes &amp;gt; /etc/beats/config/client.key
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -clcerts -nokeys &amp;gt; /etc/beats/config/client.cer
openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -cacerts -nokeys -chain &amp;gt; /etc/beats/config/client-ca.cer

gcloud compute scp elk:/etc/beats/config/* .
 client-ca.cer
 client.cer
 client.key

kubectl -n elk create secret generic elk-client-certificates \
  --from-file=client-ca.cer=client-ca.cer \
  --from-file=client.cer=client.cer \
  --from-file=client.key=client.key

kubectl apply -f elk/gke/filebeat/
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Self-host ELK stack - Installation</title>
      <link>https://chechia.net/post/self-host-elk-stack-on-gcp/</link>
      <pubDate>Sun, 15 Sep 2019 11:43:03 +0800</pubDate>
      
      <guid>https://chechia.net/post/self-host-elk-stack-on-gcp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 logstash pipeline 做數據前處理&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作為範例的 ELK 的版本是當前的 stable release 7.3.1。&lt;/p&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;h1 id=&#34;簡介-elk-stack&#34;&gt;簡介 ELK stack&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/index.html&#34;&gt;官方說明文件&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;elk-的元件&#34;&gt;ELK 的元件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch: 基於 Lucene 的分散式全文搜索引擎&lt;/li&gt;
&lt;li&gt;Logstash: 數據處理 pipeline&lt;/li&gt;
&lt;li&gt;Kibana: ELK stack 的管理後台與數據視覺化工具&lt;/li&gt;
&lt;li&gt;Beats: 輕量級的應用端數據收集器，會從被監控端收集 log 與監控數據(metrics)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elk-的工作流程&#34;&gt;ELK 的工作流程&lt;/h3&gt;
&lt;p&gt;beats -&amp;gt; (logstash) -&amp;gt; elasticsearch -&amp;gt; kibana&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將 beats 放在應用端的主機上，或是在容器化環境種作為 sidecar，跟應用放在一起&lt;/li&gt;
&lt;li&gt;設定 beats 從指定的路徑收集 log 與 metrics&lt;/li&gt;
&lt;li&gt;設定 beats 向後輸出的遠端目標&lt;/li&gt;
&lt;li&gt;(Optional) beats 輸出到 logstash ，先進行數據的變更、格式整理，在後送到 elasticsearch&lt;/li&gt;
&lt;li&gt;beats 向後輸出到 elasticsearch，儲存數據文件(document)，並依照樣式(template)與索引(index)儲存，便可在 elasticsearch 上全文搜索數據&lt;/li&gt;
&lt;li&gt;透過 Kibana，將 elasticsearch 上的 log 顯示&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;官方不是有出文件嗎&#34;&gt;官方不是有出文件嗎&lt;/h1&gt;
&lt;p&gt;Elastic 官方準備了大量的文件，理論上要跟著文件一步一步架設這整套工具應該是十分容易。然而實際照著做卻遇上很多困難。由於缺乏 get-started 的範例文件，不熟悉 ELK 設定的使用者，常常需要停下來除錯，甚至因為漏掉某個步驟，而需要回頭重做一遍。&lt;/p&gt;
&lt;p&gt;說穿了本篇的技術含量不高，就只是一個踩雷過程。&lt;/p&gt;
&lt;p&gt;Lets get our hands dirty.&lt;/p&gt;
&lt;h1 id=&#34;warning&#34;&gt;WARNING&lt;/h1&gt;
&lt;p&gt;這篇安裝過程沒有做安全性設定，由於 ELK stack 的安全性功能模組，在&lt;a href=&#34;https://www.elastic.co/what-is/open-x-pack&#34;&gt;v6.3.0 以前的版本是不包含安全性模組的&lt;/a&gt;，官方的安裝說明文件將安全性設定另成一篇。我第一次安裝，全部安裝完後，才發現裏頭沒有任何安全性設定，包含帳號密碼登入、api secret token、https/tls 通通沒有，整組 elk 裸奔。&lt;/p&gt;
&lt;p&gt;我這邊分開的目的，不是讓大家都跟我一樣被雷(XD)，而是因為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;另起一篇對安全性設定多加說明&lt;/li&gt;
&lt;li&gt;在安全的內網中，沒有安全性設定，可以大幅加速開發與除錯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然沒有安全性設定，但仍然有完整的功能，如果只是在測試環境，或是想要評估試用 self-hosted ELK，這篇的說明已足夠。但千萬不要用這篇上 public network 或是用在 production 環境喔。&lt;/p&gt;
&lt;p&gt;如果希望第一次安裝就有完整的 security 設定，請等待下篇 &lt;a href=&#34;#secure-elk-stack&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;討論需求與規格&#34;&gt;討論需求與規格&lt;/h1&gt;
&lt;p&gt;這邊只是帶大家過一下基礎安裝流程，我們在私有網路中搭建一台 standalone 的 ELK stack，通通放在一台節點(node)上。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elk-node-standalone 10.140.0.10
app-node-1          10.140.0.11
...                 ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本機的 ELK stack 元件，彼此透過 localhost 連線&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch:  localhost:9200&lt;/li&gt;
&lt;li&gt;Kibana:         localhost:5601&lt;/li&gt;
&lt;li&gt;Apm-server:     localhost:8200&lt;/li&gt;
&lt;li&gt;Self Monitoring Services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私有網路中的外部服務透過 10.140.0.10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beats 從其他 node 輸出到 Elasticsearch: 10.140.0.10:9200&lt;/li&gt;
&lt;li&gt;beats 從其他 node 輸出到 Apm-server:    10.140.0.10:8200&lt;/li&gt;
&lt;li&gt;在內部網路中 透過 browser 存取 Kibana:  10.140.0.10:5601&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;standalone 的好處:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便 (再次強調這篇只是示範，實務上不要貪一時方便，維運崩潰)&lt;/li&gt;
&lt;li&gt;最簡化設定，ELK 有非常大量的設定可以調整，這篇簡化了大部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Standalone可能造成的問題:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No High Availablity: 沒有任何容錯備援可以 failover，這台掛就全掛&lt;/li&gt;
&lt;li&gt;外部服務多的話，很容易就超過 node 上對於網路存取的限制，造成 tcp drop 或 delay。需要調整 ulimit 來增加網路，當然這在雲端上會給維運帶來更多麻煩，不是一個好解法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要有 production ready 的 ELK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HA 開起來&lt;/li&gt;
&lt;li&gt;把服務分散到不同 node 上, 方便之後 scale out 多開幾台
&lt;ul&gt;
&lt;li&gt;elasticsearch-1, elasticsearch-2, elasticsearch-3&amp;hellip;&lt;/li&gt;
&lt;li&gt;kibana-1&lt;/li&gt;
&lt;li&gt;apm-server-1, apm-server-2, &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果應用在已經容器化, 這些服務元件也可以上 Kubernetes 做容器自動化，這個部份蠻好玩，如果有時間我們來聊這篇&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;主機設定&#34;&gt;主機設定&lt;/h1&gt;
&lt;p&gt;Elasticsearch 儲存數據會佔用不少硬碟空間，我個人的習慣是只要有額外占用儲存空間，都要另外掛載硬碟，不要占用 root，所以這邊會需要另外掛載硬碟。&lt;/p&gt;
&lt;p&gt;GCP 上使用 Google Compote Engine 的朋友，可以照 &lt;a href=&#34;https://cloud.google.com/compute/docs/disks/add-persistent-disk?hl=zh-tw&#34;&gt;Google 官方操作步驟操作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成後接近這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ df -h
$ df --human-readable

Filesystem      Size  Used Avail Use% Mounted on
/dev/sda1       9.6G  8.9G  682M  93% /
/dev/sdb        492G   63G  429G  13% /mnt/disks/elk

$ ls /mnt/disks/elk

/mnt/disks/elk/elasticsearch
/mnt/disks/elk/apm-server
/mnt/disks/elk/kibana
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至於需要多少容量，取決收集數據的數量，落差非常大，可以先上個 100Gb ，試跑一段時間，再視情況 scale storage disk。&lt;/p&gt;
&lt;h1 id=&#34;開防火牆&#34;&gt;開防火牆&lt;/h1&gt;
&lt;p&gt;需要開放 10.140.0.10 這台機器的幾個 port&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch           :9200   來源只開放私有網路其他 ip 10.140.0.0/9&lt;/li&gt;
&lt;li&gt;apm-server              :8200   (同上)&lt;/li&gt;
&lt;li&gt;kibana                  :5601   (同上)，如果想從外部透過 browser開，需要 whitelist ip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCP 上有 default 的防火牆允許規則，私有網路可以彼此連線&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default-allow-internal: :all    :10.140.0.0/9   tcp:0-65535&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;install-elasticsearch&#34;&gt;Install Elasticsearch&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.3/install-elasticsearch.html&#34;&gt;Install Elasticsearch 官方文件 7.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們這邊直接在 ubuntu 18.04 上使用 apt 作為安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install apt-transport-https
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
add-apt-repository &amp;quot;deb https://artifacts.elastic.co/packages/7.x/apt stable main&amp;quot;
sudo apt-get update
sudo apt-get install elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝完後路徑長這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/elasticsearch
/etc/elasticsearch/elasticsearch.yml
/etc/elasticsearch/jvm.options

# Utility
/usr/share/elasticsearch/bin/

# Log
/var/log/elasticsearch/elasticsearch.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有需要也可以複寫設定檔，把 log 也移到 /mnt/disks/elk/elasticsearch/logs&lt;/p&gt;
&lt;h3 id=&#34;服務控制&#34;&gt;服務控制&lt;/h3&gt;
&lt;p&gt;透過 systemd 管理，我們可以用 systemctl 控制，
用戶 elasticsearch:elasticsearch，操作時會需要 sudo 權限。&lt;/p&gt;
&lt;p&gt;但在啟動前要先調整數據儲存路徑，並把權限移轉給使用者。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /mnt/disks/elk/elasticsearch
chown elasticsearch:elasticsearch /mnt/disks/elk/elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;設定檔案&#34;&gt;設定檔案&lt;/h3&gt;
&lt;p&gt;ELK 提供了許多可設定調整的設定,但龐大的設定檔案也十分難上手。我們這邊先簡單更改以下設定檔案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/elasticsearch/elasticsearch.yml

# Change Network
network.host: 0.0.0.0
# Change data path
path.data: /mnt/disks/elk/elasticsearch

vim /etc/elasticsearch/jvm-options
# Adjust heap to 4G
-Xms4g
-Xmx4g

# Enable xpack.security
discovery.seed_hosts: [&amp;quot;10.140.0.10&amp;quot;]
discovery.type: &amp;quot;single-node&amp;quot;
xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.license.self_generated.type: basic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.3.0 後的版本已經附上安全性模組 xpack，這邊順便開起來。關於 xpack 的安全性設定，這邊先略過不提。&lt;/p&gt;
&lt;p&gt;有啟用 xpack ，可以讓我們透過 elasticsearch 附帶的工具，產生使用者與帳號密碼。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto

# Keep your passwords safe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然後把啟動 Elasticsearch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl enable elasticsearch.service
sudo systemctl start elasticsearch.service
sudo systemctl status elasticsearch.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看一下 log，確定服務有在正常工作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tail -f /var/log/elasticsearch/elasticsearch.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 node 上試打 Elasticsearch API&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl localhost:9200

{
  &amp;quot;name&amp;quot; : &amp;quot;elk&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;cluster_uuid&amp;quot; : &amp;quot;uiMZe7VETo-H6JLFLF4SZg&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;7.3.1&amp;quot;,
    &amp;quot;build_flavor&amp;quot; : &amp;quot;default&amp;quot;,
    &amp;quot;build_type&amp;quot; : &amp;quot;deb&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;4749ba6&amp;quot;,
    &amp;quot;build_date&amp;quot; : &amp;quot;2019-08-19T20:19:25.651794Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;8.1.0&amp;quot;,
    &amp;quot;minimum_wire_compatibility_version&amp;quot; : &amp;quot;6.8.0&amp;quot;,
    &amp;quot;minimum_index_compatibility_version&amp;quot; : &amp;quot;6.0.0-beta1&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;kibana&#34;&gt;Kibana&lt;/h1&gt;
&lt;p&gt;有了正常工作的 Elasticsearch，接下來要安裝 kibana，由於 apt repository 已經匯入，這邊直接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install kibana
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一樣快速設定一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim /etc/kibana/kinana.yml

# change server.host from localhost to 0.0.0.0 to allow outside requests
server.host: &amp;quot;0.0.0.0&amp;quot;

# Add elasticsearch password
elasticsearch.username: &amp;quot;kibana&amp;quot;
elasticsearch.password:

sudo systemctl enable kibana.service
sudo systemctl start kibana.service
sudo systemctl status kibana.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;檢查 log 並試打一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl status kibana

$ curl localhost:5601
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;透過內網 ip 也可以用 browser 存取
使用 elastic 這組帳號密碼登入，可以有管理員權限
可以檢視一下 kibana 的頁面，看一下是否系統功能都上常上線
http://10.140.0.10/app/monitoring#&lt;/p&gt;
&lt;h1 id=&#34;filebeat&#34;&gt;Filebeat&lt;/h1&gt;
&lt;p&gt;以上是 ELK 最基本架構: elasticsearch 引擎與前端視覺化管理工具 Kibana。當然現在進去 kibana 是沒有數據的，所以我們現在來安裝第一個 beat，收集第一筆數據。&lt;/p&gt;
&lt;p&gt;你可能會覺得奇怪: 我現在沒有任何需要監控的應用，去哪收集數據?&lt;/p&gt;
&lt;p&gt;ELK 提供的自我監測 (self-monitoring) 的功能，也就是在 node 上部屬 filebeat 並啟用 modules，便可以把這台 node 上的 elasticsearch 運行的狀況，包含cpu 狀況、記憶體用量、儲存空間用量、安全性告警、&amp;hellip;都做為數據，傳到 elasticsearch 中，並在 Kibana monitoring 頁面製圖顯示。&lt;/p&gt;
&lt;p&gt;這邊也剛好做為我們 ELK stack 的第一筆數據收集。&lt;/p&gt;
&lt;p&gt;WARNING: 這邊一樣要提醒， production 環境多半會使用另外一組的 elasticsearch 來監控主要的這組 elastic stack，以維持 elk stack 的穩定性，才不會自己 monitoring 自己，結果 elastic 掛了，metrics 跟錯誤訊息都看不到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-installation.html&#34;&gt;官方安裝文件&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;預設的 filebeat.yml 設定檔案不是完整的，請到官網下載完整版，但官網沒給檔案連結(慘)，只有網頁版 &lt;a href=&#34;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html&#34;&gt;https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我們上 github 把她載下來&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/elastic/beats/v7.3.1/filebeat/filebeat.reference.yml
$ sudo mv filebeat-reference-y
$ sudo vim /etc/filebeat/filebeat.yml

# Enable elasticsearch module and kibana module to process metrics of localhost elasticsearch &amp;amp; kibana
filebeat.modules:
- module: elasticsearch
  # Server log
  server:
    enabled: true

- module: kibana
  # All logs
  log:
    enabled: true

# The name will be added to metadata
name: filebeat-elk
fields:
  env: elk

# Add additional cloud_metadata since we&#39;re on GCP
processors:
- add_cloud_metadata: ~

# Output to elasticsearch
output.elasticsearch:
  enabled: true
  hosts: [&amp;quot;localhost:9200&amp;quot;]
  protocol: &amp;quot;http&amp;quot;
  username: &amp;quot;elastic&amp;quot;
  password: 

# Configure kibana with filebeat: add template, dashboards, etc...
setup.kibana:
  host: &amp;quot;localhost:5601&amp;quot;
  protocol: &amp;quot;http&amp;quot;
  username: &amp;quot;elastic&amp;quot;
  password: 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;啟動 filebeat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl start filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看一下 log，filebeat 會開始收集 elasticsearch 的 log 與 metrics，可以在 log 上看到收集的狀況。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo journalctl -fu filebeat

Sep 15 06:28:50 elk filebeat[9143]: 2019-09-15T06:28:50.176Z        INFO        [monitoring]        log/log.go:145        Non-zero metrics in the last 30s        {&amp;quot;monitoring&amp;quot;: {&amp;quot;metrics&amp;quot;: {&amp;quot;beat&amp;quot;:{&amp;quot;cpu&amp;quot;:{&amp;quot;system&amp;quot;:{&amp;quot;ticks&amp;quot;:1670860,&amp;quot;time&amp;quot;:{&amp;quot;ms&amp;quot;:66}},&amp;quot;total&amp;quot;:{&amp;quot;ticks&amp;quot;:6964660,&amp;quot;time&amp;quot;:{&amp;quot;ms&amp;quot;:336},&amp;quot;value&amp;quot;:6964660},&amp;quot;user&amp;quot;:{&amp;quot;ticks&amp;quot;:5293800,&amp;quot;time&amp;quot;:{&amp;quot;ms&amp;quot;:270}}},&amp;quot;handles&amp;quot;:{&amp;quot;limit&amp;quot;:{&amp;quot;hard&amp;quot;:4096,&amp;quot;soft&amp;quot;:1024},&amp;quot;open&amp;quot;:11},&amp;quot;info&amp;quot;:{&amp;quot;ephemeral_id&amp;quot;:&amp;quot;62fd4bfa-1949-4356-9615-338ca6a95075&amp;quot;,&amp;quot;uptime&amp;quot;:{&amp;quot;ms&amp;quot;:786150373}},&amp;quot;memstats&amp;quot;:{&amp;quot;gc_next&amp;quot;:7681520,&amp;quot;memory_alloc&amp;quot;:4672576,&amp;quot;memory_total&amp;quot;:457564560376,&amp;quot;rss&amp;quot;:-32768},&amp;quot;runtime&amp;quot;:{&amp;quot;goroutines&amp;quot;:98}},&amp;quot;filebeat&amp;quot;:{&amp;quot;events&amp;quot;:{&amp;quot;active&amp;quot;:-29,&amp;quot;added&amp;quot;:1026,&amp;quot;done&amp;quot;:1055},&amp;quot;harvester&amp;quot;:{&amp;quot;open_files&amp;quot;:4,&amp;quot;running&amp;quot;:4}},&amp;quot;libbeat&amp;quot;:{&amp;quot;config&amp;quot;:{&amp;quot;module&amp;quot;:{&amp;quot;running&amp;quot;:0}},&amp;quot;output&amp;quot;:{&amp;quot;events&amp;quot;:{&amp;quot;acked&amp;quot;:1055,&amp;quot;active&amp;quot;:-50,&amp;quot;batches&amp;quot;:34,&amp;quot;total&amp;quot;:1005},&amp;quot;read&amp;quot;:{&amp;quot;bytes&amp;quot;:248606},&amp;quot;write&amp;quot;:{&amp;quot;bytes&amp;quot;:945393}},&amp;quot;pipeline&amp;quot;:{&amp;quot;clients&amp;quot;:9,&amp;quot;events&amp;quot;:{&amp;quot;active&amp;quot;:32,&amp;quot;published&amp;quot;:1026,&amp;quot;total&amp;quot;:1026},&amp;quot;queue&amp;quot;:{&amp;quot;acked&amp;quot;:1055}}},&amp;quot;registrar&amp;quot;:{&amp;quot;states&amp;quot;:{&amp;quot;current&amp;quot;:34,&amp;quot;update&amp;quot;:1055},&amp;quot;writes&amp;quot;:{&amp;quot;success&amp;quot;:35,&amp;quot;total&amp;quot;:35}},&amp;quot;system&amp;quot;:{&amp;quot;load&amp;quot;:{&amp;quot;1&amp;quot;:1.49,&amp;quot;15&amp;quot;:0.94,&amp;quot;5&amp;quot;:1.15,&amp;quot;norm&amp;quot;:{&amp;quot;1&amp;quot;:0.745,&amp;quot;15&amp;quot;:0.47,&amp;quot;5&amp;quot;:0.575}}}}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果數據都有送出，就可以回到 kibana 的頁面，看一下目前這個 elasticsearch 集群，有開啟 monitoring 功能的元件們，是否都有正常工作。&lt;/p&gt;
&lt;p&gt;http://10.140.0.10/app/monitoring#&lt;/p&gt;
&lt;p&gt;頁面長得像這樣&lt;/p&gt;



  




&lt;figure&gt;

&lt;img src=&#34;https://chechia.net/img/elk/kibana-monitoring.png&#34; width=&#34;100%&#34; height=&#34;100%&#34; &gt;


&lt;/figure&gt;

&lt;p&gt;Standalone cluster 中的 filebeat，是還未跟 elasticsearch 配對完成的數據，會顯示在另外一個集群中，配對完後會歸到 elk cluster 中，就是我們的主要 cluster。&lt;/p&gt;
&lt;p&gt;點進去可以看各個元件的服務情形。&lt;/p&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;簡單思考 self-host ELK stack 搭建的架構&lt;/li&gt;
&lt;li&gt;在單一 node 上安裝最簡易的 elastic stack&lt;/li&gt;
&lt;li&gt;設定元件的 output 位置&lt;/li&gt;
&lt;li&gt;設定 self-monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;恭喜各位獲得一個裸奔但是功能完整的 ELK, 我們下篇再向安全性邁進。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2020 IT邦幫忙鐵人賽</title>
      <link>https://chechia.net/post/2020-ithome-ironman-challenge/</link>
      <pubDate>Mon, 09 Sep 2019 16:56:03 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-ithome-ironman-challenge/</guid>
      <description>&lt;p&gt;各位好，我是Che-Chia Chang，社群上常用的名子是 David Chang。是個軟體工程師，專長的領域是後端開發，開發維運，容器化應用，以及Kubernetes開發管理。目前為 &lt;a href=&#34;https://www.meetup.com/golang-taipei-meetup/&#34;&gt;Golang Taiwan Meetup&lt;/a&gt; 的 organizer。&lt;/p&gt;
&lt;p&gt;受到&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman/signup/team/63&#34;&gt;友人們&lt;/a&gt;邀請（推坑）參加了&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt;，挑戰在30天內，每天發一篇技術分享文章。一方面將工作上遇到的問題與解法分享給社群，另一方面也是給自己一點成長的壓力，把這段時間的心得沈澱下來，因此也了這系列文章。&lt;/p&gt;
&lt;p&gt;本系列文章重點有三：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;提供的解決方案，附上一步步的操作步驟。希望讓讀者可以重現完整操作步驟，直接使用，或是加以修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;著重 Google Cloud Platform，特別是Google Compute Engine (GCE) 與Google Kubernetes Engine (GKE) 兩大服務。這也是我最熟悉的平台，順便推廣，並分享一些雷點。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;從維運的角度除錯，分析問題，提升穩定性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;預定的主題如下（可能會依照實際撰寫狀況微調）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK Stask on GCP (8)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/self-host-elk-stack-on-gcp/&#34;&gt;Self-host ELK stack on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/secure-elk-stack/&#34;&gt;Secure ELK Stask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gce-with-elk/&#34;&gt;監測 Google Compute Engine 上服務的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/monitoring-gke-with-elk/&#34;&gt;監測 Google Kubernetes Engine 的各項數據&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/elastic-or-not-elastic/&#34;&gt;是否選擇 ELK 作為解決方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/logstash-on-gke/&#34;&gt;使用 logstash pipeline 做數據前處理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Elasticsearch 日常維護：數據清理，效能調校，永久儲存&lt;/li&gt;
&lt;li&gt;Debug ELK stack on GCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka HA on Kubernetes(6)
&lt;ul&gt;
&lt;li&gt;[Deploy kafka-ha]({{ ref &amp;ldquo;/post/kafka-deployment-on-kubernetes&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Kafka Introduction]({{ ref &amp;ldquo;/post/kafka-introduction&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka 基本使用]({{ ref &amp;ldquo;/post/kafka-basic-usage&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[kafka operation scripts]({{ ref &amp;ldquo;/post/kafka-operation-script&amp;rdquo;}})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA topology]({{ ref &amp;ldquo;/post/kafka-ha-topology&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[集群內部的 HA 細節]({{ ref &amp;ldquo;/post/kafka-ha-continued&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter 很重要&lt;/li&gt;
&lt;li&gt;效能調校&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 GKE 上部署 Redis HA (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-deployment/&#34;&gt;使用 helm 部署 redis-ha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-sentinel/&#34;&gt;Redis HA with sentinel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-topology/&#34;&gt;Redis sentinel topology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Redis HA with HAproxy]({{ ref &amp;ldquo;/post/redis-ha-on-haproxy&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;[Redis HA Failure Recovery]({{ ref &amp;ldquo;/post/redis-ha-failure-recovery&amp;rdquo; }})&lt;/li&gt;
&lt;li&gt;Prometheus Metrics Exporter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prometheus / Grafana (5)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deployment-on-kubernetes/&#34;&gt;GKE 上自架 Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-deploy-grafana/&#34;&gt;GKE 上自架 Grafana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-scrape/&#34;&gt;scrape config &amp;amp; exporter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-exporter-library-redis-exporter/&#34;&gt;Dive into Redis Exporter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/prometheus-kube-state-metrics-exporter/&#34;&gt;輸出 kube-state 的監測數據&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nginx Ingress (3)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/kubernetes-nginx-ingress-controller/&#34;&gt;Deploy Nginx Ingress Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/kubernetes-nginx-ingress-config/&#34;&gt;Configure Nginx Ingress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cert-manager (3)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/cert-manager-deployment/&#34;&gt;Deploy cert-manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/cert-manager-how-it-work/&#34;&gt;How cert-manager work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/cert-manager-complete-workflow/&#34;&gt;Cert-manager complete workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes CRD &amp;amp; Operator-sdk (3)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/kubernetes-custom-resources-basic/&#34;&gt;Introduction about custom resource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/kubernetes-custom-resources-basic/&#34;&gt;Deployment &amp;amp; Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/kubernetes-custom-resource-with-operator-sdk/&#34;&gt;Deployment &amp;amp; Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章發表於&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20120327/ironman/2444&#34;&gt;鐵人挑戰頁面&lt;/a&gt;，同時發布與本站備份。有任何謬誤，還煩請各方大德&amp;lt;3透過底下的聯絡方式聯絡我，感激不盡。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step-by-step guide for deployment: guarentee a running deployment on GCP&lt;/li&gt;
&lt;li&gt;basic configuration, usage, monitoring, networking on GKE&lt;/li&gt;
&lt;li&gt;debugging, stability analysis in an aspect of devop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ELK stack(8)
&lt;ul&gt;
&lt;li&gt;Deploy self-hosted ELK stack on GCE instance&lt;/li&gt;
&lt;li&gt;Secure ELK stack with SSL and role-based authentication&lt;/li&gt;
&lt;li&gt;Monitoring services on Kubernetes with ELK beats&lt;/li&gt;
&lt;li&gt;Monitoring services on GCE instances&lt;/li&gt;
&lt;li&gt;Logstash pipelines and debugging walk through&lt;/li&gt;
&lt;li&gt;Elasticsearch operations: house-cleaning, tuning, pernament storage&lt;/li&gt;
&lt;li&gt;Elasticsearch maitainence, trouble shooting&lt;/li&gt;
&lt;li&gt;Get-Started with Elastic Cloud SASS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General operations on Kubernetes(4)
&lt;ul&gt;
&lt;li&gt;Kubernetes Debug SOP&lt;/li&gt;
&lt;li&gt;Kubectl cheat sheet&lt;/li&gt;
&lt;li&gt;Secure services with SSL by cert-manager&lt;/li&gt;
&lt;li&gt;Speed up container updating with operator
&lt;ul&gt;
&lt;li&gt;My operator example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deploy Kafka HA on Kubernetes(4)
&lt;ul&gt;
&lt;li&gt;deploy kafka-ha on Kubernertes with helm&lt;/li&gt;
&lt;li&gt;in-cluster networking configuration for high availability&lt;/li&gt;
&lt;li&gt;basic app-side usage, performance tuning&lt;/li&gt;
&lt;li&gt;Operate Kafka: update config, upgrade version, migrate data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Promethus / grafana(5)
&lt;ul&gt;
&lt;li&gt;Deploy Prometheus / Grafana stack on GCE instance&lt;/li&gt;
&lt;li&gt;Monitoring services on Kubernetes with exporters&lt;/li&gt;
&lt;li&gt;Export Kubernetes metrics to Prometheus&lt;/li&gt;
&lt;li&gt;Export Redis-ha metrics to Prometheus&lt;/li&gt;
&lt;li&gt;Export Kafka metrics to Prometheus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCP networking(4)
&lt;ul&gt;
&lt;li&gt;Firewall basic concept for private network with GCE instances &amp;amp; Kubernetes&lt;/li&gt;
&lt;li&gt;Load balancer for Kubernetes service &amp;amp; ingress&lt;/li&gt;
&lt;li&gt;DNS on GCP from Kube-dns to GCP DNS service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GCP log management(3)
&lt;ul&gt;
&lt;li&gt;Basic usage about GCP logging &amp;amp; GCP Error Report&lt;/li&gt;
&lt;li&gt;Stackdriver, metrics, alerts&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Logging on GKE from gcp-fluentd to stackdriver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redis Ha Topology</title>
      <link>https://chechia.net/post/redis-ha-topology/</link>
      <pubDate>Fri, 23 Aug 2019 16:12:10 +0800</pubDate>
      
      <guid>https://chechia.net/post/redis-ha-topology/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/2020ironman&#34;&gt;2020 It邦幫忙鐵人賽&lt;/a&gt; 系列文章&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 GKE 上部署 Redis HA
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chechia.net/post/redis-ha-deployment/&#34;&gt;使用 helm 部署 redis-ha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Redis HA with sentinel&lt;/li&gt;
&lt;li&gt;Redis sentinel topology&lt;/li&gt;
&lt;li&gt;Redis HA with HAproxy&lt;/li&gt;
&lt;li&gt;集群內部的 HA 設定，網路設定&lt;/li&gt;
&lt;li&gt;應用端的基本範例，效能調校&lt;/li&gt;
&lt;li&gt;在 GKE 上維運 redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。&lt;/p&gt;
&lt;p&gt;寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。&lt;/p&gt;
&lt;p&gt;對我的文章有興趣，歡迎到我的網站上 &lt;a href=&#34;https://chechia.net&#34;&gt;https://chechia.net&lt;/a&gt; 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d32l83enj9u8rg.cloudfront.net/wp-content/uploads/iStock-966846550-cat-overheating-simonkr-1-940x470.jpg&#34; alt=&#34;Exausted Cat Face&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Redis Sentinel Topology&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;topology&#34;&gt;Topology&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Masters: M1, M2, M3, &amp;hellip;, Mn.&lt;/li&gt;
&lt;li&gt;Slaves: R1, R2, R3, &amp;hellip;, Rn (R stands for replica).&lt;/li&gt;
&lt;li&gt;Sentinels: S1, S2, S3, &amp;hellip;, Sn.&lt;/li&gt;
&lt;li&gt;Clients: C1, C2, C3, &amp;hellip;, Cn.&lt;/li&gt;
&lt;li&gt;每個方格代表一台機器或是 VM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-sentinels&#34;&gt;2 Sentinels&lt;/h3&gt;
&lt;p&gt;DON&amp;rsquo;T DO THIS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----+         +----+
| M1 |---------| R1 |
| S1 |         | S2 |
+----+         +----+

Configuration: quorum = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個設定下，如果 M1 掛了需要 failover，很有可能 S1 跟著機器一起掛了，S2 會沒有辦法取得多數來執行 failover，整個系統掛掉&lt;/p&gt;
&lt;h3 id=&#34;3-vm&#34;&gt;3 VM&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;       +----+
       | M1 |
       | S1 |
       +----+
          |
+----+    |    +----+
| R2 |----+----| R3 |
| S2 |         | S3 |
+----+         +----+

Configuration: quorum = 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這是最基本的蛋又兼顧安全設定的設置&lt;/p&gt;
&lt;p&gt;如果 M1 死了 S1 跟著機器故障，S2 與 S3 還可以取得多數，順利 failover 到 R2 或是 R3。&lt;/p&gt;
&lt;h3 id=&#34;寫入資料遺失&#34;&gt;寫入資料遺失&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;         +----+
         | M1 |
         | S1 | &amp;lt;- C1 (writes will be lost)
         +----+
            |
            /
            /
+------+    |    +----+
| [M2] |----+----| R3 |
| S2   |         | S3 |
+------+         +----+
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;failover 之前，M1 是 master，Client 的寫入往 M1 寫&lt;/li&gt;
&lt;li&gt;M1 網路故障，M2 failover 後成為新的 master，可是 Client 往 M1 寫入的資料並無法 sync 回 M2&lt;/li&gt;
&lt;li&gt;等網路修復後，M1 回覆後會變成 R1 變成 slave，由 M2 去 sync R1，變成 R1 在 master 時收到的寫入資料遺失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為了避免這種情形，做額外的設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;min-slaves-to-write 1&lt;/li&gt;
&lt;li&gt;min-slaves-max-lag 10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當 master 發現自己再也無法 sync 到足夠的 slave，表示 master 可能被孤立，這時主動拒絕客戶端的寫入請求。客戶端被拒絕後，會再向 sentinel 取得有效的 master，重新執行寫入請求，確保資料寫到有效的 master 上。&lt;/p&gt;
&lt;h3 id=&#34;sentinel-放在-client-端&#34;&gt;Sentinel 放在 Client 端&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;            +----+         +----+
            | M1 |----+----| R1 |
            |    |    |    |    |
            +----+    |    +----+
                      |
         +------------+------------+
         |            |            |
         |            |            |
      +----+        +----+      +----+
      | C1 |        | C2 |      | C3 |
      | S1 |        | S2 |      | S3 |
      +----+        +----+      +----+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有些情形，redis 這端只有兩台可用機器，這種情形可以考慮把 sentinel 放在客戶端的機器上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仍然維持了獨立的 3 sentinels 的穩定&lt;/li&gt;
&lt;li&gt;sentinel 與 client 所觀察到的 redis 狀態是相同的&lt;/li&gt;
&lt;li&gt;如果 M1 死了，要 failover ，客戶端的 3 sentinel 可以正確地執行 failover，不受故障影響&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;客戶端又不足-3-個&#34;&gt;客戶端又不足 3 個&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;            +----+         +----+
            | M1 |----+----| R1 |
            | S1 |    |    | S2 |
            +----+    |    +----+
                      |
               +------+-----+
               |            |  
               |            |
            +----+        +----+
            | C1 |        | C2 |
            | S3 |        | S4 |
            +----+        +----+

      Configuration: quorum = 3

            +----+         +----+
            | M1 |----+----| R1 |
            | S1 |    |    | S2 |
            +----+    |    +----+
                      |
                      |        
                      |        
                   +----+      
                   | C1 |      
                   | S3 |      
                   +----+      

      Configuration: quorum = 2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;跟上個例子類似，但又額外確保 3 sentinels&lt;/li&gt;
&lt;li&gt;如果 M1 死了，剩下的 sentinel 可以正確 failover&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kuberentes Source Code</title>
      <link>https://chechia.net/post/kuberentes-source-code/</link>
      <pubDate>Fri, 21 Jun 2019 13:17:53 +0800</pubDate>
      
      <guid>https://chechia.net/post/kuberentes-source-code/</guid>
      <description>&lt;h1 id=&#34;api-resources&#34;&gt;API resources&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;kubectl api-resources
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Journey to Quantum Computing</title>
      <link>https://chechia.net/post/journey-to-quantum-computing/</link>
      <pubDate>Sun, 02 Jun 2019 10:21:37 +0800</pubDate>
      
      <guid>https://chechia.net/post/journey-to-quantum-computing/</guid>
      <description>&lt;p&gt;This post is about my learning steps for quantum-computing.&lt;/p&gt;
&lt;p&gt;For a quick-start tutorial, check my workshop project throught the project link above.&lt;/p&gt;
&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;
&lt;p&gt;Courses&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.coursera.org/learn/quantum-computing-algorithms&#34;&gt;Coursera&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mitxpro.mit.edu/courses/course-v1:MITxPRO+QCx0+1T2019/about&#34;&gt;on MIT x pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pages.cs.wisc.edu/~dieter/Courses/2010f-CS880/lectures.html&#34;&gt;Quantum Information Processing from UW Madison&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.theory.caltech.edu/people/preskill/ph229/&#34;&gt;Quantum Computation by John Preskill&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://quantum-computing.ibm.com&#34;&gt;IBM Q Experience&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Qiskit/openqasm&#34;&gt;https://github.com/Qiskit/openqasm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Qiskit/qiskit-tutorials&#34;&gt;https://github.com/Qiskit/qiskit-tutorials&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;ibm-q-experience&#34;&gt;IBM Q Experience&lt;/h1&gt;
&lt;h3 id=&#34;day-1&#34;&gt;Day 1&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://quantum-computing.ibm.com/support/guides/getting-started-with-circuit-composer&#34;&gt;Getting Started with Circuit Composer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello Quantum World circuit transformed two qubits, from $ \vert0\rangle $ to $ \frac{\vert00\rangle + \vert11\rangle}{\sqrt{2}} $&lt;/p&gt;
&lt;p&gt;Questions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[] Hadamard Gate&lt;/li&gt;
&lt;li&gt;[] Bell states
&lt;ul&gt;
&lt;li&gt;[] Annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 三分鐘就入坑 佈署篇</title>
      <link>https://chechia.net/post/service-mesh-for-microservice-on-kubernetes/</link>
      <pubDate>Mon, 06 May 2019 18:12:15 +0800</pubDate>
      
      <guid>https://chechia.net/post/service-mesh-for-microservice-on-kubernetes/</guid>
      <description>&lt;h1 id=&#34;create-gke&#34;&gt;Create GKE&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;gcloud beta container --project &amp;quot;istio-playground-239810&amp;quot; clusters create &amp;quot;istio-playground&amp;quot; \
  --zone &amp;quot;asia-east1-b&amp;quot; \
  --username &amp;quot;admin&amp;quot; \
  --cluster-version &amp;quot;1.11.8-gke.6&amp;quot; \
  --machine-type &amp;quot;n1-standard-2&amp;quot; \
  --image-type &amp;quot;COS&amp;quot; \
  --disk-type &amp;quot;pd-standard&amp;quot; \
  --disk-size &amp;quot;100&amp;quot; \
  --preemptible \
  --num-nodes &amp;quot;1&amp;quot; \
  --enable-cloud-logging \
  --enable-cloud-monitoring \
  --no-enable-ip-alias \
  --addons HorizontalPodAutoscaling,HttpLoadBalancing,KubernetesDashboard,Istio \
  --istio-config auth=MTLS_PERMISSIVE \
  --no-enable-autoupgrade \
  --enable-autorepair
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;take-a-peek&#34;&gt;Take a Peek&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;$ kubectl get namespaces

NAME           STATUS    AGE
default        Active    2m
istio-system   Active    1m
kube-public    Active    2m
kube-system    Active    2m

$ kubectl get po -n istio-system
NAME                                      READY     STATUS      RESTARTS   AGE
istio-citadel-7f6f77cd7b-nxfbf            1/1       Running     0          3m
istio-cleanup-secrets-h454m               0/1       Completed   0          3m
istio-egressgateway-7c56db84cc-nlrwq      1/1       Running     0          3m
istio-galley-6c747bdb4f-45jrp             1/1       Running     0          3m
istio-ingressgateway-6ff68cf95d-tlkq4     1/1       Running     0          3m
istio-pilot-8ff66f8c4-q9chz               2/2       Running     0          3m
istio-policy-69b78b7d6-c8pld              2/2       Running     0          3m
istio-sidecar-injector-558996c897-hr6q4   1/1       Running     0          3m
istio-telemetry-f96459fb-5cbpg            2/2       Running     0          3m
promsd-ff878d44b-hv8nh                    2/2       Running     1          3m
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;deploy-app&#34;&gt;Deploy app&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;kubectl label namespace default istio-injection=enabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bookinfo Application&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/platform/kube/bookinfo.yaml

kubectl get pods
kubectl get services
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gateway&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/bookinfo-gateway.yaml

kubectl get gateways

kubectl get svc istio-ingressgateway -n istio-system
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go to ingress public ip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.status.loadBalancer.ingress[0].ip}&#39;)
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.spec.ports[?(@.name==&amp;quot;http2&amp;quot;)].port}&#39;)
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.spec.ports[?(@.name==&amp;quot;https&amp;quot;)].port}&#39;)

curl -v ${INGRESS_HOST}:{$INGRESS_PORT}/productpage

404 Not Found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Apply destination rules&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/destination-rule-all.yaml

curl -v ${INGRESS_HOST}:{$INGRESS_PORT}/productpage
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;brief-review&#34;&gt;Brief review&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kubectl get virtualservices
kubectl get destinationrules
kubectl get gateways
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;istio-tasks&#34;&gt;Istio Tasks&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/&#34;&gt;https://istio.io/docs/tasks/traffic-management/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins X on Kubernetes</title>
      <link>https://chechia.net/post/jenkins-x-on-kubernetes/</link>
      <pubDate>Fri, 19 Apr 2019 12:15:41 +0800</pubDate>
      
      <guid>https://chechia.net/post/jenkins-x-on-kubernetes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt; is one of the earliest open source antomation server and remains the most common option in use today. Over the years, Jenkins has evolved into a powerful and flexible framework with hundreds of plugins to support automation for any project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jenkins-x.io/&#34;&gt;Jenkins X&lt;/a&gt;, on the other hand, is a CI/CD platform (Jenkins Platform) for modern cloud applications on Kubernetes.&lt;/p&gt;
&lt;p&gt;Here we talk about some basic concepts about Jenkins X and provide a hand-to-hand guide to deploy jenkins-x on Kubernetes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#architecture&#34;&gt;Architecture of Jenkins X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#install&#34;&gt;Install Jenkins with jx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipeline&#34;&gt;Create a Pipeline with jx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#client&#34;&gt;Develope with jx client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information about jx itself, check &lt;a href=&#34;https://github.com/jenkins-x/jx&#34;&gt;Jenkins-X Github Repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;architecture&#34;&gt;Architecture&lt;/h1&gt;
&lt;p&gt;Check this beautiful diagram.&lt;/p&gt;



  




&lt;figure&gt;

&lt;img src=&#34;https://chechia.net/img/jenkins/architecture-serverless.png&#34; &gt;



&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;&lt;a href=&#34;https://jenkins-x.io/architecture/diagram/&#34;&gt;https://jenkins-x.io/architecture/diagram/&lt;/a&gt;&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;
&lt;h3 id=&#34;create-gke-cluster--get-credentials&#34;&gt;Create GKE cluster &amp;amp; Get Credentials&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;gcloud init
gcloud components update
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;CLUSTER_NAME=jenkins-server
#CLUSTER_NAME=jenkins-serverless

gcloud container clusters create ${CLUSTER_NAME} \
  --num-nodes 1 \
  --machine-type n1-standard-4 \
  --enable-autoscaling \
  --min-nodes 1 \
  --max-nodes 2 \
  --zone asia-east1-b \
  --preemptible

# After cluster initialization, get credentials to access cluster with kubectl
gcloud container clusters get-credentials ${CLUSTER_NAME}

# Check cluster stats.
kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;install-jx-on-local-machine&#34;&gt;Install jx on Local Machine&lt;/h3&gt;
&lt;p&gt;[Jenkins X Release](&lt;a href=&#34;https://github.com/jenkins-x/jx/releases%5D(https://github.com/jenkins-x/jx/releases)&#34;&gt;https://github.com/jenkins-x/jx/releases](https://github.com/jenkins-x/jx/releases)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JX_VERSION=v2.0.2
OS_ARCH=darwin-amd64
#OS_ARCH=linux-amd64
curl -L https://github.com/jenkins-x/jx/releases/download/&amp;quot;${JX_VERSION}&amp;quot;/jx-&amp;quot;${OS_ARCH}&amp;quot;.tar.gz | tar xzv
sudo mv jx /usr/local/bin
jx version

NAME               VERSION
jx                 2.0.2
Kubernetes cluster v1.11.7-gke.12
kubectl            v1.11.9-dispatcher
helm client        v2.11.0+g2e55dbe
helm server        v2.11.0+g2e55dbe
git                git version 2.20.1
Operating System   Mac OS X 10.14.4 build 18E226
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;option-1-install-serverless-jenkins-pipeline&#34;&gt;(Option 1) Install Serverless Jenkins Pipeline&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;DEFAULT_PASSWORD=mySecretPassWord123
jx install \
  --default-admin-password=${DEFAULT_PASSWORD} \
  --provider=&#39;gke&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enter Github user name&lt;/li&gt;
&lt;li&gt;Enter Github personal api token for CI/CD&lt;/li&gt;
&lt;li&gt;Enable Github as Git pipeline server&lt;/li&gt;
&lt;li&gt;Select Jenkins installation type:
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Serverless Jenkins X Pipelines with Tekon&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Static Master Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pick default workload build pack
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Kubernetes Workloads: Automated CI+CD with GitOps Promotion&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Library Workloads: CI+Release but no CD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select the organization where you want to create the environment repository:
&lt;ul&gt;
&lt;li&gt;chechiachang&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Your Kubernetes context is now set to the namespace: jx
INFO[0231] To switch back to your original namespace use: jx namespace jx
INFO[0231] Or to use this context/namespace in just one terminal use: jx shell
INFO[0231] For help on switching contexts see: https://jenkins-x.io/developing/kube-context/
INFO[0231] To import existing projects into Jenkins:       jx import
INFO[0231] To create a new Spring Boot microservice:       jx create spring -d web -d actuator
INFO[0231] To create a new microservice from a quickstart: jx create quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;option-2-install-static-jenkins-server&#34;&gt;(Option 2) Install Static Jenkins Server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;DEFAULT_PASSWORD=mySecretPassWord123

jx install \
  --default-admin-password=${DEFAULT_PASSWORD} \
  --provider=&#39;gke&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enter Github user name&lt;/li&gt;
&lt;li&gt;Enter Github personal api token for CI/CD&lt;/li&gt;
&lt;li&gt;Enable Github as Git pipeline server&lt;/li&gt;
&lt;li&gt;Select Jenkins installation type:
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Serverless Jenkins X Pipelines with Tekon&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Static Master Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pick default workload build pack
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Kubernetes Workloads: Automated CI+CD with GitOps Promotion&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Library Workloads: CI+Release but no CD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select the organization where you want to create the environment repository:
&lt;ul&gt;
&lt;li&gt;chechiachang&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;INFO[0465]Your Kubernetes context is now set to the namespace: jx
INFO[0465] To switch back to your original namespace use: jx namespace default
INFO[0465] Or to use this context/namespace in just one terminal use: jx shell
INFO[0465] For help on switching contexts see: https://jenkins-x.io/developing/kube-context/
INFO[0465] To import existing projects into Jenkins:       jx import
INFO[0465] To create a new Spring Boot microservice:       jx create spring -d web -d actuator
INFO[0465] To create a new microservice from a quickstart: jx create quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Access Static Jenkins Server through Domain with username and password
Domain &lt;a href=&#34;http://jenkins.jx.11.22.33.44.nip.io/&#34;&gt;http://jenkins.jx.11.22.33.44.nip.io/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;uninstall&#34;&gt;Uninstall&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx uninstall
# rm -rf ~/.jx
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;setup-cicd-pipeline&#34;&gt;Setup CI/CD Pipeline&lt;/h1&gt;
&lt;h3 id=&#34;create-quickstart-repository&#34;&gt;Create Quickstart Repository&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pods --namespace jx --watch
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# cd workspace
jx create quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which organisation do you want to use? chechiachang&lt;/li&gt;
&lt;li&gt;Enter the new repository name:  serverless-jenkins-quickstart&lt;/li&gt;
&lt;li&gt;select the quickstart you wish to create  [Use arrows to move, type to filter]
angular-io-quickstart
aspnet-app
dlang-http&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;golang-http
jenkins-cwp-quickstart
jenkins-quickstart
node-http&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;INFO[0121] Watch pipeline activity via:    jx get activity -f serverless-jenkins-quickstart -w
INFO[0121] Browse the pipeline log via:    jx get build logs chechiachang/serverless-jenkins-quickstart/master
INFO[0121] Open the Jenkins console via    jx console
INFO[0121] You can list the pipelines via: jx get pipelines
INFO[0121] Open the Jenkins console via    jx console
INFO[0121] You can list the pipelines via: jx get pipelines
INFO[0121] When the pipeline is complete:  jx get applications
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;check-log-of-the-first-run&#34;&gt;Check log of the first run&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx logs pipeline
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;add-step-to-pipeline&#34;&gt;Add Step to Pipeline&lt;/h3&gt;
&lt;p&gt;Add a setup step for pullrequest&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd serverless-jenkins-quickstart
jx create step --pipeline pullrequest \
  --lifecycle setup \
  --mode replace \
  --sh &amp;quot;echo hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Validate pipeline step for each modification&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx step validate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A build-pack pod started after git push. Watch pod status with kubectl.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get pods --namespace jx --watch
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;check-build-status-on-prow-serverless&#34;&gt;Check Build Status on Prow (Serverless)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://deck.jx.130.211.245.13.nip.io/&#34;&gt;http://deck.jx.130.211.245.13.nip.io/&lt;/a&gt;
Login with username and password&lt;/p&gt;
&lt;h3 id=&#34;import-existing-repository&#34;&gt;Import Existing Repository&lt;/h3&gt;
&lt;p&gt;In source code repository:&lt;/p&gt;
&lt;p&gt;Import jx to remote jenkins-server. This will apply a Jenkinsfile to repository by default&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx import --url git@github.com:chechiachang/serverless-jenkins-quickstart.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update jenkins-x.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx create step
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;git commit &amp;amp; push&lt;/p&gt;
&lt;h3 id=&#34;trouble-shooting&#34;&gt;Trouble Shooting&lt;/h3&gt;
&lt;p&gt;Failed to get jx resources&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jx get pipelines
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure your jx (or kubectl) context is with the correct GKE and namespace&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kc config set-context gke_my-project_asia-east1-b_jenkins \
  --namespace=jx
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;why-not-use-helm-chart&#34;&gt;Why not use helm chart?&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s readlly depend on what we need in CI/CD automation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/jenkins&#34;&gt;Jenkins Helm Chart&lt;/a&gt; create Jenkins master and slave cluster on Kubernetes utilizing the Jenkins Kubernetes plugin.
Jenkin Platform with jx is Jenkins Platform native to Kubernetes. It comes with powerful cloud native components like Prow automation, Nexus, Docker Registry, Tekton Pipeline, &amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;check-jenkins-x-examples&#34;&gt;Check jenkins-x examples&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&#34;&gt;https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;jx get urls
Name                      URL
jenkins                   http://jenkins.jx.11.22.33.44.nip.io
jenkins-x-chartmuseum     http://chartmuseum.jx.11.22.33.44.nip.io
jenkins-x-docker-registry http://docker-registry.jx.11.22.33.44.nip.io
jenkins-x-monocular-api   http://monocular.jx.11.22.33.44.nip.io
jenkins-x-monocular-ui    http://monocular.jx.11.22.33.44.nip.io
nexus                     http://nexus.jx.11.22.33.44.nip.io
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;get-cluster-status&#34;&gt;Get Cluster Status&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx diagnose
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;get-applications--pipelines&#34;&gt;Get Applications &amp;amp; Pipelines&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx get applications
jx get pipelines
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;get-ci-activities--build-log&#34;&gt;Get CI Activities &amp;amp; build log&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx get activities
jx get activities --filter=&#39;jenkins-x-on-kubernetes&#39;

jx get build log

INFO[0003] view the log at: http://jenkins.jx.11.22.33.44.nip.io/job/chechiachang/job/jenkins-x-on-kubernetes/job/feature-add-test/3/console
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;trigger-build--check-activity&#34;&gt;Trigger Build &amp;amp; Check Activity&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx start pipeline
jx start pipeline --filter=&#39;jenkins-x-on-kubernetes/feature-add-test&#39;

jx get activities --filter=&#39;jenkins-x-on-kubernetes&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-pull-request&#34;&gt;Create Pull Request&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;jx create pullrequest
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Container Runtime Interface</title>
      <link>https://chechia.net/post/kubernetes-container-runtime-interface/</link>
      <pubDate>Sat, 06 Oct 2018 12:07:00 +0800</pubDate>
      
      <guid>https://chechia.net/post/kubernetes-container-runtime-interface/</guid>
      <description>&lt;p&gt;-&amp;gt; &lt;a href=&#34;https://chechia.net/slides/container-runtime-interface/&#34;&gt;Slides here&lt;/a&gt; &amp;lt;-&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
