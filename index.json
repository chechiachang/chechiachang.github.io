[{"authors":["admin"],"categories":null,"content":"我是Che-Chia Chang，社群上常用的名子是 David Chang. 我是個軟體工程師，專長的領域是後端開發，開發維運，容器化應用，以及Kubernetes開發管理。目前為 Golang Taiwan Meetup 的 organizer。對 Golang 有興趣的朋友請務必加入。\nHi, I'm Che-Chia Chang. Also known as David Chang in communities in Taiwan. I'm a software engineer specilized in Back-End development, DevOps, containerization and Kubernetes administration. I'm hosting a developer community, Golang Taiwan Meetup. Join us if you are interested in Golang!\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1576514591,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://chechiachang.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"我是Che-Chia Chang，社群上常用的名子是 David Chang. 我是個軟體工程師，專長的領域是後端開發，開發維運，容器化應用，以及Kubernetes","tags":null,"title":"Che-Chia Chang","type":"authors"},{"authors":[],"categories":[],"content":"今年結束了，回顧一下今年做的事情\n\u0026ndash; 我是軟體工程師 \u0026ndash;\n6 場公開演講，並且踏出熟悉的社群舒適圈，南下進軍高雄XD\n37 篇技術文章 其中包含 30 篇 Ithome 30天(參賽就不用睡覺)鐵人賽參賽文章 結賽撿到賀優選狂賀?\n正職工作方面，進了幣圈，切身了解敝圈真亂後，又踏出了幣圈\n開坑翻譯麻省理工學院的課程『分散式系統』，好課揪團一起修 預計會有 22 篇文章，準備在可見的未來，犧牲無數個夜晚，邁向 2020\n\u0026ndash; 我是專業水肺潛水教練 \u0026ndash; 也是自由潛水員\n年末的幾天，正式開始執業，帶學生下海(?) 學習教導學生，也學習對學生的安全負責\n新年復工後，正職碼農，副業潛水 有人要潛請找我，保證優惠不藏私\n\u0026ndash; 我是數位行銷實習生 \u0026ndash;\n跟前公司 (雖然都不是MK但卻) 超強的行銷團隊\u0026lt;3學習數位行銷 從零開始大造個人品牌，邊學邊實習 開了兩個粉絲專頁 一個是技術文章分享，一個做潛水影片分享 打造個人品牌，自己推廣行銷，學習數位行銷\n","date":1577788731,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577788731,"objectID":"0f966a76ba6a34cba0677f46bb5124f3","permalink":"https://chechiachang.github.io/post/say-goodbye-2019/","publishdate":"2019-12-31T18:38:51+08:00","relpermalink":"/post/say-goodbye-2019/","section":"post","summary":"2019 年度回顧","tags":[],"title":"Say Goodbye 2019","type":"post"},{"authors":[],"categories":null,"content":"","date":1577185200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577791708,"objectID":"9e65c0f46632274258fcb7139aa66f72","permalink":"https://chechiachang.github.io/talk/mit-6.824-go-mapreduce/","publishdate":"2019-12-31T00:47:35+08:00","relpermalink":"/talk/mit-6.824-go-mapreduce/","section":"talk","summary":"跟著 MIT 6.824 學習分散式系統","tags":["golang","meetup","distributed system","mit","mapreduce"],"title":"MIT 6.824 Distributed System Learning Note","type":"talk"},{"authors":[],"categories":[],"content":"跟著 MIT 6.824 學習分散式系統\n這個專案儲存 MIT 6.824 分散式系統編程的上課內容，我將內容翻譯程中文，加上個人學習筆記\n 我會在我的學習過程中，持續翻譯課程內容  一方面深入個人學習 另一方面也回饋社群   依照課程的進度進行  若有餘力，會嘗試翻譯以下內容\n 課堂 Q \u0026amp; A 論文 lab 實做  ","date":1576511206,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576512653,"objectID":"4c8dd8d408476717845f54e8d8090f1a","permalink":"https://chechiachang.github.io/post/mit-6.824-distributed-system/","publishdate":"2019-12-16T23:46:46+08:00","relpermalink":"/post/mit-6.824-distributed-system/","section":"post","summary":"跟著 MIT 6.824 深入淺出分散式系統","tags":["mit","lecture","distributed-system","golang"],"title":"MIT 6.824 Distributed System Learning Note","type":"post"},{"authors":null,"categories":null,"content":"Learn distributed system with MIT 6.824\n跟著 MIT 6.824 學習分散式系統\n這個專案儲存 MIT 6.824 分散式系統編程的上課內容，我將內容翻譯程中文，加上個人學習筆記\n 我會在我的學習過程中，持續翻譯課程內容  一方面深入個人學習 另一方面也回饋社群   依照課程的進度進行  內容請見 Github Project\n想要獲取更多課程資訊，請到 MIT課程網站上\n","date":1576509376,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576512653,"objectID":"adab501b01f67ef702a105a647a877b3","permalink":"https://chechiachang.github.io/project/mit-6.824-distributed-system/","publishdate":"2019-12-16T23:16:16+08:00","relpermalink":"/project/mit-6.824-distributed-system/","section":"project","summary":"Learn distributed system with MIT 6.824 跟著 MIT 6.824 學習分散式系統 這個專案儲存 MIT 6.824 分散式系統編程的上課內容，我將內容翻譯程中文，加上個人學習筆記 我會在我的學習過程中，持續翻","tags":["mit","lecture","distributed-system","golang"],"title":"MIT 6.824 Distributed System Learning Note","type":"project"},{"authors":[],"categories":null,"content":"","date":1575650855,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577791638,"objectID":"5e485646c5834b811d3e16f0d809864a","permalink":"https://chechiachang.github.io/talk/gdd-devfest-2019-scouter/","publishdate":"2019-12-07T00:47:35+08:00","relpermalink":"/talk/gdd-devfest-2019-scouter/","section":"talk","summary":"是的，我們做了一款七龍珠中的戰鬥力探測器，透過人臉辨識技術探測工程師在Github上的的開源貢獻力","tags":["machine-learning","face-detection","face-recognition","unity","swift","golang","github-api","ar"],"title":"從零開始的人臉辨識，七龍珠戰鬥力探測器","type":"talk"},{"authors":[],"categories":[],"content":"https://en.bitcoin.it/wiki/Atomic_swap\nAlgorithm  2 pay txs and 2 claim tx claim txs are singed at first, locked with time 2 pay txs are encrypted by x, affects only when x is reveal on the network  Initialization  A: random number x\ntx1: A pay B A Pay BTC to B's public key if x known \u0026amp; singed by B or Signed by A \u0026amp; B\ntx2: A claim tx1 pay BTC to A's public key locked 48 hours signed by A\nA -\u0026gt; B tx2 B -\u0026gt; A tx2 signed by A \u0026amp; B\n A -\u0026gt; submit tx1  tx3: B pay A alt-coin B Pay A alt-coin if x known \u0026amp; singed by A or signed by A \u0026amp; B\ntx4: B claim tx3 pay B alt-coins locked 48 hours signed by B\nB -\u0026gt; A tx4 A -\u0026gt; B tx4 signed by A \u0026amp; B\nB submit tx3 A spends tx3, reveal x B spends tx1 using x  Specialized Alt-chain ","date":1573171410,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573172680,"objectID":"0aa6f13a1984bbe0b6059a9996107d43","permalink":"https://chechiachang.github.io/post/blockchain-atomic-swap/","publishdate":"2019-11-08T08:03:30+08:00","relpermalink":"/post/blockchain-atomic-swap/","section":"post","summary":"https://en.bitcoin.it/wiki/Atomic_swap\nAlgorithm  2 pay txs and 2 claim tx claim txs are singed at first, locked with time 2 pay txs are encrypted by x, affects only when x is reveal on the network  Initialization  A: random number x\ntx1: A pay B A Pay BTC to B's public key if x known \u0026amp; singed by B or Signed by A \u0026amp; B\ntx2: A claim tx1 pay BTC to A's public key locked 48 hours signed by A","tags":["blockchain","atomic-swap"],"title":"Ablockchain Atomic Swap","type":"post"},{"authors":[],"categories":[],"content":"Kubernetes 是啥能吃嗎 給非工程師的 Kubernetes 簡介\n   大綱  kubernetes 是一個工具，越來越夯 這個工具想解決的問題 最後才說 Kubernetes 是啥能吃嗎   寫完 app 到上線要走的路 工程團隊產出完美的程式碼後，大家從此過著幸福快樂的日子?\n 寫完 app 到上線要走的路    常見問題  \u0026ldquo;It works on MY PC !\u0026rdquo; 一個 app 不夠力，有沒有試過兩個 app ？ staging 跟 production 的差別 = 把使用者當QA ？ Valar Morghulis. Valar Dohaeris.   1. It works on my PC !  app 是好的，server 是好的，app 放上 server 就壞了。why? server 跟 mac 不一樣。mac 有的東西 server 不一定有 跑程式之前要先裝某某東西  系統依賴性(dependency)     1. 容器 (Container) 使用容器來解決 It works on my PC ! 的問題\n   1. 容器 (Container)  怕缺東西，整包包好放上去跑  app app 的程式庫(library) 作業系統 Linux 的一部分，補足不同 server 上缺的東西 App + 程式庫 + 作業系統的一部分 = container   開發 -\u0026gt; 打包 -\u0026gt; 部署   1. 容器 (Container)  keywords: 容器，容器化，container, docker     2. 一個 app 不夠力，有沒有試過兩個 app ？ 1 app = 100 使用者使用，1,000 使用者要怎麼辦?\n 把 app 放到 10 倍大的 server 把 10 個 app 放到 10 台 server   垂直擴展(vertical scaling), 水平擴展(horizontal scaling)   2. 水平擴展與效能提升    3. staging 跟 production 的差別  staging 有一個 QA production 有很多 QA 壞了被使用者發現，把使用者當 QA ，會遭到報應的   3. staging 跟 production 的差別  production 穩定嗎？有多穩？ production 速度快嗎？有多快？ 程式不只要跑的對，還要跑的又快又好 服務監測(monitoring)   3. staging 跟 production 的差別  壞了才發現壞掉 壞之前發現即將要壞掉 即時告警(alerting)   4. Valar Morghulis. Valar Dohaeris.  app 終有一死 Google 每個月都在死 status.cloud.google.com 上版就壞掉，v1.20.1-hotfix-hotfix-hotfix   4. Valar Morghulis. Valar Dohaeris.  確保寫好 app 的同時，也要思考死了怎麼辦 預設 app 就是會死  測試活著還是死了(Health check) 讓他自動站起來(auto recovery)     複習一下  \u0026ldquo;It works on MY PC !\u0026rdquo; 一個 app 變成兩個 app staging 跟 production 的差別 Valar Morghulis. Valar Dohaeris.   Kubernetes 是啥能吃嗎  Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. https://kubernetes.io/     Kubernetes 是啥能吃嗎  Containerized: \u0026ldquo;It works on every PC\u0026rdquo; Scaling: 1 app -\u0026gt; 10 apps Monitoring, Alerting: staging -\u0026gt; production Health Check, Auto Recovery   我們用 Kubernetes 做到的事  一鍵部署上線 自動監測 自動警告 水平擴展 自動復原   keywords  app, library, os dependency, docker horizontal scaling monitoring, alerting health check, auto recovery, high available kubernetes  ","date":1572405991,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572424371,"objectID":"d46a2c689b31dcac5febce771b864920","permalink":"https://chechiachang.github.io/slides/kubernetes-introduction-for-non-engineer/","publishdate":"2019-10-30T11:26:31+08:00","relpermalink":"/slides/kubernetes-introduction-for-non-engineer/","section":"slides","summary":"Kubernetes 是啥能吃嗎 給非工程師的 Kubernetes 簡介 大綱 kubernetes 是一個工具，越來越夯 這個工具想解決的問題 最後才說 Kubernetes 是啥能吃嗎 寫完 app 到上線要走的路 工程團隊產出完美的程式碼","tags":[],"title":"Kubernetes Introduction for Non Engineer","type":"slides"},{"authors":[],"categories":[],"content":"BEP3 Atomic Swap Binance 在 BEP3: HTLC and Atomic Peg 提到，BEP 即將在 binance chain 上支援原生的 Hash Timer Locked Transfer (HTLT) ，這使跨鏈的原子性交換 (atomic swap) 變得可行，透過 HTLC 在兩邊的鏈上鎖住 (peg) tokens，然後只有在執行交換的時候，透過 hash 交換，一次執行雙邊的交易。\n關於 Atomic Swap 網路有非常多的訊息，有興趣的話可以看這篇\n 交易只有在雙邊完成後才完成，完成之前不能動用交換的資產 在任何階段失效都可以完全 fallback，並進行 refund 交易的認證是去中心化的  這邊有個但書，Ethereum 上是透過 smart contract 實現，但 Binance chain 上還是靠 Binance 認證 XD    Binance 在 BEP3 中支援 HTLC，我們這邊主要的資訊來源是 binance.org 的官方說明文件，這邊針對文章進行驗證，並且補足文件缺漏的部分，提醒過程中可能會踩到的雷。\n跨鍊(Cross Chain) 交易 在部署 asset / token 的時候，我們會選擇合適的鏈作為發布資產並運行 block chain app。常用的應用鏈如 ethereum 與 binance chain 等等。不同的主鏈上有各自的優缺點，例如使用 ethereum ，可以與許多 token 與應用互動，也是最多人使用的應用主鏈。而在 binance 鏈上執行，則能夠快速的發生 transactions，並且可以與 binance 上的資產與交易所互動。\n在某些應用場景，我們會希望兩個獨立主鏈上的資產能後互動，例如在 binance chain 上執行快速的 transaction，然而也要使用 etheruem 上既有的 ERC-20 tokens，這時便需要一個溝通兩條鏈的機制。\n文章分為三個部分  在 Binance Chain 上互換兩個 address 的 binance asset 從 ethereum token 到 binance 從 binance chain 到 ethereum   Atomic Swap on Binance Chain 我們今天會實作 Atomic Peg Swap，透過 HTLT 鎖住 Binance Chain 上兩個 address 的資產，並進行原子性的一次交易，來達成鏈上的資產互換。這邊直接使用 binance 提供的 bnbcli 來執行。\n使用情境 兩個在 Binance Chain 上的 address 想交換資產\n Client: HTLT 的發起方，擁有一部分 asset，發起 HTLT 希望執行資產互換 Recipient: HTLT 的收受方，收到 HTLT，需要於時限內 deposit 指定數量的資產到 swap 中  服務元件  HTLT transactions on binance chain: 來鎖住並 claim assets Client tooling: tbnbcli 讓客戶可以操作，監測鏈上 swap 的狀況  流程  Client 使用 tbnbcli 發起 HTLT Recipient 收到發起方送來的 swap info 與 asset (frozen) Recipient Deposit 指定數量的 asset 到 swap 中 Binance Chain 自動完成 swap，完成交換，解鎖兩邊交換的資產  取得 tbnbcli tbnbcli 的說明文件\n由於 bnbcli repo 中使用 Git Large File Storage 來存放 binary，這邊要啟用 git-lfs 來下載 binary\n# Mac port sudo port install git-lfs Git clone repo\ngit clone git@github.com:binance-chain/node-binary.git cd node-binary git chechout v0.6.2 git lfs pull --include cli/testnet/0.6.2/mac/tbnbcli sudo copy cli/testnet/0.6.2/mac/tbnbcli /usr/local/bin 這邊要注意使用 v0.6.2+ 的版本，不然會沒有 HTLT 的 subcommands\n測試 tbnbcli tbnbcli status --node http://data-seed-pre-0-s3.binance.org:80 { \u0026#34;node_info\u0026#34;: { \u0026#34;protocol_version\u0026#34;: { \u0026#34;p2p\u0026#34;: \u0026#34;7\u0026#34;, \u0026#34;block\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;app\u0026#34;: \u0026#34;0\u0026#34; }, \u0026#34;id\u0026#34;: \u0026#34;34ac6eb6cd914014995b5929be8d7bc9c16f724d\u0026#34;, \u0026#34;listen_addr\u0026#34;: \u0026#34;aa13359cd244f11e988520ad55ba7f5a-c3963b80c9b991b7.elb.us-east-1.amazonaws.com:27146\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;Binance-Chain-Nile\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.31.5\u0026#34;, \u0026#34;channels\u0026#34;: \u0026#34;36402021222330380041\u0026#34;, \u0026#34;moniker\u0026#34;: \u0026#34;data-seed-0\u0026#34;, \u0026#34;other\u0026#34;: { \u0026#34;tx_index\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;rpc_address\u0026#34;: \u0026#34;tcp://0.0.0.0:27147\u0026#34; } }, \u0026#34;sync_info\u0026#34;: { \u0026#34;latest_block_hash\u0026#34;: \u0026#34;359AD9BF36B7DEEB069A86D53D3B65D9F4BB77A1A65E40E1289B5798D4C1094F\u0026#34;, \u0026#34;latest_app_hash\u0026#34;: \u0026#34;E748CFA5806B587D9678F55DFDDB336E3669CDF421191CDA6D2DF8AA7A3461F3\u0026#34;, \u0026#34;latest_block_height\u0026#34;: \u0026#34;45868456\u0026#34;, \u0026#34;latest_block_time\u0026#34;: \u0026#34;2019-10-23T07:36:38.176957281Z\u0026#34;, \u0026#34;catching_up\u0026#34;: false }, \u0026#34;validator_info\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;1C360E22E04035E22A71A3765E4A8C5A6D586132\u0026#34;, \u0026#34;pub_key\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;tendermint/PubKeyEd25519\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;T56yDoH+B+OY8PP2tmeFtJtk+9ftnBUVHykKfLS45Es=\u0026#34; }, \u0026#34;voting_power\u0026#34;: \u0026#34;0\u0026#34; } } Acquire Valid Binance Testnet Account Check Testnet Doc\n Go to Binance Testnet Create a wallet Save address, mn, keystore, private key Use testnet faucet to fund testnet account Receive 200 BNB on testnet   Client Create HTLT 這邊使用簡單的範例，鎖住兩個 BEP2 tokens 來進行交換，展示一下 tbnbcli 的 HTLT\n準備兩個 address，這邊是我自己的兩個 testnet address\n tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p (179 BNB) Explorer 上查看 tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce (20 BNB) Exporler 上查看  目標：\n HTLT tbnb\u0026hellip;j9p -\u0026gt; 0.3 BNB -\u0026gt; tbnb\u0026hellip;7ce tbnb\u0026hellip;j9p \u0026lt;- 0.1 BNB \u0026lt;- tbnb\u0026hellip;7ce  tbnbcli 執行 HTLT，從 from address 執行 HTLT，給 recipient-addr 0.3 BNB，並預期對方回 0.1 BNB，等待 height-span 個 block 時間(360 \u0026gt; 2 minutes)\ntbnbcli key 實際執行前，由於我們需要透過 tbnbcli 操作 from-address，要先透過 tbnbcli 把 address 的 key 加進到本地\ntbnbcli keys add tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce --recover tbnbcli keys list NAME:\tTYPE:\tADDRESS:\tPUBKEY: tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\tlocal\ttbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\tbnbp1addwnpepq0pw06d3y7ykg2j33pc604j3awgqgl5vhd88wdjhjg5sptnsfpqyx2rmhl4 實際執行 參數：\n  FROM ADDR: tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\n  RECIPIENT ADDR: tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\n  hightspan: 3600，height-span 是發起 HTLT，受方 deposit，發起方去 claim 的時限。\n  amount: asset * 10^8\n  tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p 執行 HTLT\n  給 tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce 0.3 BNB\n  預期對方回 0.1 BNB\n  等待 3600 個 block 時間\n  FROM_ADDR=tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p RECIPIENT_ADDR=tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce HEIGHT_SPAN=3600 tbnbcli token HTLT \\  --recipient-addr ${RECIPIENT_ADDR} \\  --amount 30000000:BNB \\  --expected-income 10000000:BNB \\  --height-span ${HEIGHT_SPAN} \\  --from ${FROM_ADDR} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 產生 swap 的結果，可以於Testnet Explorer 上看到\nCommitted at block 47218942 (tx hash: 8F865C5C9E5CD06239DE99746BCE73AACA2F3AD881C26765FB90C9465EF06EF0, response: {Code:0 Data:[77 138 29 51 186 65 213 125 105 217 5 102 170 194 248 149 189 188 56 208 166 93 48 159 188 196 143 111 31 66 151 249] Log:Msg 0: swapID: 4d8a1d33ba41d57d69d90566aac2f895bdbc38d0a65d309fbcc48f6f1f4297f9 Info: GasWanted:0 GasUsed:0 Tags:[{Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 104 113 54 118 52 57 97 110 51 119 119 104 114 100 56 110 121 55 113 106 51 101 120 103 102 109 118 112 118 117 101 108 107 99 97 106 57 112] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[97 99 116 105 111 110] Value:[72 84 76 84] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}] Codespace: XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}) Query Atomic Swap 產生了 atomic swap，這邊可以使用 tbnbcli 查詢 swap 的狀態\nSWAP_ID=4d8a1d33ba41d57d69d90566aac2f895bdbc38d0a65d309fbcc48f6f1f4297f9 tbnbcli token query-swap \\  --swap-id ${SWAP_ID} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 回傳 swap 的狀態\n{\u0026#34;from\u0026#34;:\u0026#34;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#34;,\u0026#34;out_amount\u0026#34;:[{\u0026#34;denom\u0026#34;:\u0026#34;BNB\u0026#34;,\u0026#34;amount\u0026#34;:\u0026#34;30000000\u0026#34;}],\u0026#34;in_amount\u0026#34;:null,\u0026#34;expected_income\u0026#34;:\u0026#34;10000000:BNB\u0026#34;,\u0026#34;recipient_other_chain\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;random_number_hash\u0026#34;:\u0026#34;4cf88f1acf8bcbc628609f3257406913f67e009e5c61f2671b601e40f4e5cc6a\u0026#34;,\u0026#34;random_number\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;timestamp\u0026#34;:\u0026#34;1572506189\u0026#34;,\u0026#34;cross_chain\u0026#34;:false,\u0026#34;expire_height\u0026#34;:\u0026#34;47222542\u0026#34;,\u0026#34;index\u0026#34;:\u0026#34;2254\u0026#34;,\u0026#34;closed_time\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;status\u0026#34;:\u0026#34;Open\u0026#34;} Deposit HTLT 受方 reciept-address 這邊要把 1 BNB 打進去 swap 中\n注意這邊的 from-address 已經變成當初的 recipient-addr tbnb\u0026hellip;j9p\n當然這邊要存取，也要有 tbnb\u0026hellip;j9p 的 key，這樣我們本地就會有發受兩方的 key，但一般來說應該是兩個不同的人\ntbnbcli keys add tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p--recover tbnbcli keys list NAME:\tTYPE:\tADDRESS:\tPUBKEY: tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\tlocal\ttbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\tbnbp1addwnpepq0pw06d3y7ykg2j33pc604j3awgqgl5vhd88wdjhjg5sptnsfpqyx2rmhl4 tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\tlocal\ttbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\tbnbp1addwnpepqwk5zx3jnrq5guxc9tsgrte9aw9knla0ahunwynypkm0jvst6y7l2q83ueq 受方把約好的錢存進去\ntbnbcli token deposit \\  --swap-id ${SWAP_ID} \\  --amount 10000000:BNB \\  --from ${RECIPIENT_ADDR} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 可以成功 deposit，檢查這次 tx Deposit swap 的內容\nPassword to sign with \u0026#39;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#39;: Committed at block 47219070 (tx hash: FDCC528B9F98E9CEEDCB113A398A747F440666061340535D44C526D79F9CD667, response: {Code:0 Data:[] Log:Msg 0: Info: GasWanted:0 GasUsed:0 Tags:[{Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 97 54 112 118 53 103 109 110 115 97 121 52 97 57 115 114 55 110 118 100 48 109 108 100 122 50 57 97 54 107 100 120 121 101 51 55 99 101] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[97 99 116 105 111 110] Value:[100 101 112 111 115 105 116 72 84 76 84] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}] Codespace: XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}) 發起方 Claim HTLT 針對每筆 HTLT ，解鎖鎖住的 assets。每個 HTLT 只能被解鎖一次。\ntbnbcli token claim \\  --swap-id ${SWAP_ID} \\  --random-number ${RANDOM_NUMBER} \\  --from ${FROM_ADDR} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 可以成功 claim，檢查這次 tx Deposit swap 的內容\nPassword to sign with \u0026#39;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\u0026#39;: Committed at block 47219128 (tx hash: D08F81D0315F0A7B13E510782F6E56804803B5198F4914C8EB10E3A5084F2BAA, response: {Code:0 Data:[] Log:Msg 0: Info: GasWanted:0 GasUsed:0 Tags:[{Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 97 54 112 118 53 103 109 110 115 97 121 52 97 57 115 114 55 110 118 100 48 109 108 100 122 50 57 97 54 107 100 120 121 101 51 55 99 101] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 104 113 54 118 52 57 97 110 51 119 119 104 114 100 56 110 121 55 113 106 51 101 120 103 102 109 118 112 118 117 101 108 107 99 97 106 57 112] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[97 99 116 105 111 110] Value:[99 108 97 105 109 72 84 76 84] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}] Codespace: XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}) 查詢 swap 狀態 從 open 變成 completed\ntbnbcli token query-swap \\  --swap-id ${SWAP_ID} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 {\u0026#34;from\u0026#34;:\u0026#34;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#34;,\u0026#34;out_amount\u0026#34;:[{\u0026#34;denom\u0026#34;:\u0026#34;BNB\u0026#34;,\u0026#34;amount\u0026#34;:\u0026#34;30000000\u0026#34;}],\u0026#34;in_amount\u0026#34;:[{\u0026#34;denom\u0026#34;:\u0026#34;BNB\u0026#34;,\u0026#34;amount\u0026#34;:\u0026#34;10000000\u0026#34;}],\u0026#34;expected_income\u0026#34;:\u0026#34;10000000:BNB\u0026#34;,\u0026#34;recipient_other_chain\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;random_number_hash\u0026#34;:\u0026#34;4cf88f1acf8bcbc628609f3257406913f67e009e5c61f2671b601e40f4e5cc6a\u0026#34;,\u0026#34;random_number\u0026#34;:\u0026#34;cb5f6296078fd73b86d03eb58bc8a6e0af8d4b60c1cd678b71f8c185e206db53\u0026#34;,\u0026#34;timestamp\u0026#34;:\u0026#34;1572506189\u0026#34;,\u0026#34;cross_chain\u0026#34;:false,\u0026#34;expire_height\u0026#34;:\u0026#34;47222542\u0026#34;,\u0026#34;index\u0026#34;:\u0026#34;2254\u0026#34;,\u0026#34;closed_time\u0026#34;:\u0026#34;1572506323\u0026#34;,\u0026#34;status\u0026#34;:\u0026#34;Completed\u0026#34;} 這樣 swap 就完成了\n超時 (Expired) 處理 由於 HTLT 是有時間限制，有可能會超時，會無法繼續操作，例如另外一筆 HTLT 在受方 deposit 時無法 deposit\ntbnbcli token deposit \\  --swap-id ${SWAP_ID} \\  --amount 1:BNB \\  --from ${RECIPIENT_ADDR} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 ERROR: { \u0026#34;codespace\u0026#34;:8, \u0026#34;code\u0026#34;:14, \u0026#34;abci_code\u0026#34;:524302, \u0026#34;message\u0026#34;:\u0026#34;Current block height is 46046996, the swap expire height(46043293) is passed\u0026#34; } 超過 swap block height 了，受方這邊逾時去存錢，導致整個 swap expired，不能在做什麼事\n發起方去透過 refund 解鎖\nRefund HTLT 若是已經 complete 或是 timeout expired，發起 HTLT 的 address 可以透過 refund 來取回資產\ntbnbcli token refund \\  --swap-id ${SWAP_ID} \\  --from ${FROM_ADDR} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 回覆 tx 的狀態，可以在explorer 上看到，transaction type 為 refund swap\nCommitted at block 46047771 ( tx hash: F0F5AB40EF7B1CCFE54EBAE0B8022E9B3C381D0029C55A8FE7C3C87E8ACF800D, response: { Code:0 Data:[] Log:Msg 0: Info: GasWanted:0 GasUsed:0 Tags:[{Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 97 54 112 118 53 103 109 110 115 97 121 52 97 57 115 114 55 110 118 100 48 109 108 100 122 50 57 97 54 107 100 120 121 101 51 55 99 101] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[97 99 116 105 111 110] Value:[114 101 102 117 110 100 72 84 76 84] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}] Codespace: XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0 } ) 重新查詢 swap 狀態，已經變成 expired\ntbnbcli token query-swap \\  --swap-id ${SWAP_ID} \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 { \u0026#34;from\u0026#34;: \u0026#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p\u0026#34;, \u0026#34;out_amount\u0026#34;: [{ \u0026#34;denom\u0026#34;: \u0026#34;BNB\u0026#34;, \u0026#34;amount\u0026#34;: \u0026#34;3\u0026#34; }], \u0026#34;in_amount\u0026#34;: null, \u0026#34;expected_income\u0026#34;: \u0026#34;1:BNB\u0026#34;, \u0026#34;recipient_other_chain\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;random_number_hash\u0026#34;: \u0026#34;2c2588c81a5f08bf55a183cc2d61a123368405638741169933e200c90f4532e5\u0026#34;, \u0026#34;random_number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;1571905650\u0026#34;, \u0026#34;cross_chain\u0026#34;: false, \u0026#34;expire_height\u0026#34;: \u0026#34;46043293\u0026#34;, \u0026#34;index\u0026#34;: \u0026#34;2239\u0026#34;, \u0026#34;closed_time\u0026#34;: \u0026#34;1571908256\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;Expired\u0026#34; }  從 Ethereum swap 到 Binance Chain 這邊我們要從 ethereum 上，將 ERC-20 token 與 binance chain 上的 BNB 做交換，先準備需要用到的東西\nbinance testnet  準備好 address 與 BNB，這邊沿用我們上篇使用的 address tbnb1hq6v49an3wwhrd8ny7qj3exgfmvpvuelkcaj9p  ethereum testnet (ropsten)  Admin Address [ropsten etherscan] 部署 ERC20 token [ropsten etherscan]，我自己發行的 Party Parrot Token (PPT)  部署 ERC20 Atomic Swapper 智能合約  binance-chain/bep3-smartcontract 提供    Node/VM  用來執行 bep3 deputy process  https://github.com/binance-chain/bep3-deputy 提供    workflow 我們看一下官方提供的這張圖\n Wallet Address 在 ERC20 Token (PPToken) approve() Swap Contract 一部分 Token 初始化 Swap Transaction(tx) Deputy 監測到 Ethereum 鏈上的 swap tx，向 Binance Chain 發起一個對應的 HTLT tx，等待 Binance 上的 claim tx Wallet Address 向 Binance Chain 執行 HTLT claim() Deputy 監測到 Binance Chain 上的 claim tx 與 swap complete，代為向 Ethereum claim ERC-20  執行 deputy 我們可以先將 deputy 程序跑起來，這邊使用的是 Binance Chaing/bep3-deputy\ngo get github.com/binance-chain/bep3-deputy cd ${GOPATH}/src/github.com/binance-chain/bep3-deputy $ go mod download $ make build go build -o build/deputy main.go 啟動本地 MySQL，這邊直接用 docker 起一個無密碼的\n$ docker run \\ --name some-mysql \\ -e MYSQL_ALLOW_EMPTY_PASSWORD=yes \\ -e MYSQL_DATABASE=deputy \\ -d \\ mysql:5.7.27 設定 config/confg.json\n{ \u0026#34;db_config\u0026#34;: { \u0026#34;dialect\u0026#34;: \u0026#34;mysql\u0026#34;, \u0026#34;db_path\u0026#34;: \u0026#34;root:@(localhost:3306)/deputy?charset=utf8\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34;, }, \u0026#34;chain_config\u0026#34;: { \u0026#34;bnb_start_height\u0026#34;: 42516056, \u0026#34;other_chain\u0026#34;: \u0026#34;ETH\u0026#34;, \u0026#34;other_chain_start_height\u0026#34;: 6495598 }, \u0026#34;admin_config\u0026#34;: { \u0026#34;listen_addr\u0026#34;: \u0026#34;127.0.0.1:8080\u0026#34; }, \u0026#34;bnb_config\u0026#34;: { \u0026#34;key_type\u0026#34;: \u0026#34;mnemonic\u0026#34;, \u0026#34;mnemonic\u0026#34;: \u0026#34;\u0026lt;my-mnemonic\u0026gt;\u0026#34;, \u0026#34;rpc_addr\u0026#34;: \u0026#34;tcp://data-seed-pre-0-s1.binance.org:80\u0026#34;, \u0026#34;symbol\u0026#34;: \u0026#34;BNB\u0026#34;, \u0026#34;deputy_addr\u0026#34;: \u0026#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#34;, \u0026#34;fetch_interval\u0026#34;: 2, }, \u0026#34;eth_config\u0026#34;: { \u0026#34;swap_type\u0026#34;: \u0026#34;erc20_swap\u0026#34;, \u0026#34;key_type\u0026#34;: \u0026#34;private_key\u0026#34;, \u0026#34;private_key\u0026#34;: \u0026#34;\u0026lt;my-private-key\u0026gt;\u0026#34;, \u0026#34;provider\u0026#34;: \u0026#34;https://ropsten.infura.io/v3/cd9643b1870b489b93477921cb767882\u0026#34;, \u0026#34;swap_contract_addr\u0026#34;: \u0026#34;0xA08E0F38462eCd107adE62Ee3004850f2448f3d6\u0026#34;, \u0026#34;token_contract_addr\u0026#34;: \u0026#34;0xDec348688B060fB44144971461b3BAaC8BD1e571\u0026#34;, \u0026#34;deputy_addr\u0026#34;: \u0026#34;0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b\u0026#34;, \u0026#34;gas_limit\u0026#34;: 300000, \u0026#34;gas_price\u0026#34;: 20000000000, } } 這樣注意幾個地方\n db_config 填上 mysql url，有設密碼的話一併帶入 chain_config.bnb_start_height 可以先追到目前的 block height，畢竟我們的 swap tx 都在 deputy 起來之後才會產生，可以跳過啟動時 sync block 的時間。如果是要追過去的 tx，就要調整 block 的高度，並且給予足夠的時間上 deputy 去 sync block。可以到 testnet-explorer 查目前的 block height。 chain_config.other_chain_start_height 也追到最新的 eth block height，可以到 Etherscan 查目前的 block height bnb_config 填上 bnb addr 與助記祠 eth_config 填上 eth addr 與 private key eth_config.deupty_addr 使用 Admin addr，並填上 private key  把 deputy 以 testnet 為目標執行起來\n./build/deputy --help ./build/deputy \\  --bnb-network 0 \\  --config-type local \\  --config-path config/config.json 2019-10-25 17:16:48 DEBUG Debug sent a request 2019-10-25 17:16:48 INFO fetch ETH cur height: 6641795 2019-10-25 17:16:48 DEBUG Debug sent a request 2019-10-25 17:16:48 DEBUG Debug sent a request 2019-10-25 17:16:48 INFO fetch BNB cur height: 46215517 2019-10-25 17:16:48 DEBUG Debug sent a request 2019-10-25 17:16:48 INFO fetch try to get ahead block, chain=BNB, height=46215518 deputy 啟動後，就會依據 db 中的 block 資料，開始一路追 block，發現是相關的 addr 就把 tx 拉下來處理。\n由於我們這邊是新 db，我們又直接跳到最新的 block，應該不會需要太多時間就能追上。\ndeputy 有 admin api 可以使用\ncurl http://localhost:8080 curl http://localhost:8080/failed_swaps/1 the number of total failed swaps is 0, the offset of query is 0 curl http://localhost:8080/status { \u0026#34;mode\u0026#34;: \u0026#34;NormalMode\u0026#34;, \u0026#34;bnb_chain_height\u0026#34;: 46215719, \u0026#34;bnb_sync_height\u0026#34;: 46215718, \u0026#34;other_chain_height\u0026#34;: 6641804, \u0026#34;other_chain_sync_height\u0026#34;: 6641804, \u0026#34;bnb_chain_last_block_fetched_at\u0026#34;: \u0026#34;2019-10-25T17:18:52+08:00\u0026#34;, \u0026#34;other_chain_last_block_fetched_at\u0026#34;: \u0026#34;2019-10-25T17:18:40+08:00\u0026#34;, \u0026#34;bnb_status\u0026#34;: { \u0026#34;balance\u0026#34;: [ { \u0026#34;symbol\u0026#34;: \u0026#34;BNB\u0026#34;, \u0026#34;free\u0026#34;: \u0026#34;18.99812504\u0026#34;, \u0026#34;locked\u0026#34;: \u0026#34;0.00000000\u0026#34;, \u0026#34;frozen\u0026#34;: \u0026#34;0.00000000\u0026#34; } ] }, \u0026#34;other_chain_status\u0026#34;: { \u0026#34;allowance\u0026#34;: \u0026#34;9.8e+13\u0026#34;, \u0026#34;erc20_balance\u0026#34;: \u0026#34;9.999999969e+20\u0026#34;, \u0026#34;eth_balance\u0026#34;: \u0026#34;6.982922764\u0026#34; } } 可以看到 deputy 上設定的 bnb_addr, eth_addr 的狀態\n other_chain_status.allowance: 9.8e+13   開始 Swap 複習一下流程\n部署好 swap contract \u0026amp; deputy，啟動 deputy process Wallet Address 在 ERC20 Token (PPToken) approve()，給 Swap Contract 一部分 Token 初始化 Swap Transaction(tx) Deputy 監測到 Ethereum 鏈上的 swap tx，向 Binance Chain 發起一個對應的 HTLT tx，等待 Binance 上的 claim tx Wallet Address 向 Binance Chain 執行 HTLT claim() Deputy 監測到 Binance Chain 上的 claim tx 與 swap complete，代為向 Ethereum claim ERC-20  ERC20 contract Approve() 到 ERC20 contract 的頁面，選擇 approve\nspender: swap contract address value: 10000 PPToken (乘上 10^18)\n到 etherscan 上查看\nCall HTLT function Go to swap contract，call htlt()\n用 etherscan 送上去，然後就壞掉了，Etherscan 上壞掉的 tx 不知為什麼 QAQ\n     開 remix IDE，重新嘗試參數\n randomNumberHash:  SHA256(randomNumber||timestamp), randomNumber is 32-length random byte array. 0x0000000000000000000000000000000000000000000000000000000000000000   timestamp:  it should be about 10 mins span around current timestamp. unix timestamp 1572250902 (now + 60 sec * 10 min)   heightSpan:  it's a customized filed for deputy operator. it should be more than 200 for this deputy. 10000   recipientAddr:  deputy address on Ethereum. 0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b   bep2SenderAddr:  omit this field with 0x0 0x0000000000000000000000000000000000000000   bep2RecipientAddr:  Decode your testnet address from bech32 encoded to hex 0xee82ca237387495e9603f4d8d7efed128bdd59a6   outAmount:  approved amount, should be bumped by e^10. 10 0000000000   bep2Amount:  outAmount * exchange rate, the default rate is 1. 10 0000000000    Deputy Call HTLT on Binance Chain Deputy 監測 Ethereum 上的 block 狀態，特別是會取得 Swap contract address 的 swap tx，並在 Binance Chain 上產生對應的 HTLT。\nClaim HTLT on Binance Chain Binance Chain 上產生 HTLT 後，客戶端這邊可以使用 tbnb 以 recipient addr 查詢 Binance Chain 上的 Swap ID\ntbnbcli token query-swapIDs-by-recipient \\  --recipient-addr tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce \\  --chain-id Binance-Chain-Nile \\  --trust-node \\  --node http://data-seed-pre-0-s3.binance.org:80 獲得過去產生的 swap list\n[ \u0026#34;c2be98ac3b9ee7153e5ba84edfefca1917b6e2ec72d2576bf6cce584cbd6095e\u0026#34;, \u0026#34;18c938b994c62bcce9e8cedcb426a603863d95565a246c323a1df89d5c4226c1\u0026#34;, \u0026#34;5c4fdd60ce44fa4be6de70e65df3f8295df88178fd381b4242a8c2d047663a1b\u0026#34;, \u0026#34;a47c89dfca910cbb34dec92acebebb59d2c62e7f90bf216a87c2c23c84e48d4f\u0026#34; ] 都是過去使用的 swap id，如果都沒有新的 swap 出來，可能是 height span 太高，導致一直都爬不到\nSWAP_ID=c2be98ac3b9ee7153e5ba84edfefca1917b6e2ec72d2576bf6cce584cbd6095e tbnbcli token query-swap \\ --swap-id ${SWAP_ID} \\ --chain-id Binance-Chain-Nile \\ --trust-node \\ --node http://data-seed-pre-0-s3.binance.org:80 這邊要對一下 random number, to wallet addr, out amount 等參數，如果 HTLT 符合，客戶就可以執行 Claim HTLT\ntbnbcli token claim \\ --swap-id ${SWAP_ID} \\ --random-number ${RANDOM_NUMBER} \\ --from ${FROM_KEY} \\ --chain-id Binance-Chain-Nile \\ --trust-node \\ --node http://data-seed-pre-0-s3.binance.org:80 Deputy Claim ERC20 Token 客戶端在 Binance Chain 上 Claim HTLT，Deputy 在 Ethereuem 上 Claim HTLT，至此完成 Atomic Swap 兩邊的流程。客戶端從 Binance Chain Claim，Deputy 從 Ethereuem 上 Claim。完整流程 如下：\n Client Call HTLT on Ethereum -\u0026gt; Deputy Call HTLT on Binance Chain Client Check HTLT Status on Binance Chain Client Call Claim HTLT on Binance Chain -\u0026gt; Deputy Call Claim HTLT on Ethereum  Client APP javascript Demo 希望直接寫成 javascript app 可以參考這篇\n Swap Tokens from Binance Chain to Ethereum 這邊進行反向操作，客戶發起從 Binance Chain 換到 Ethereum 上的請求，Deputy 做對應的處理，把 Token Swap 到 Ethereum。我們依樣依照這份文件操作。\n 客戶端在 Binance Chain 上 Call HTLT() Deputy 在 Ethereum 上 Init Swap tx Deputy Call Approve() 到 ethereum swap contract 客戶端取得 swap 資訊 客戶端在 Ethereum 上 Call Claim()，取得 ERC-20 Token Deputy 在 Binance 上 Call Claim()，取得 Binance Chain Token  在 Binance Chain 上 HTLT 客戶端發起 HTLT 請求，需要從客戶端 Wallet 送出（但因為我們這邊只使用一個 Binance Address，所以發起的 Addr 跟 Deputy Binance addr 是一樣的。\n這邊鎖進 10:BNB，等待 100:PPT 從 ethereum 近來\nDEPUTY_BNB_WALLET_ADDR=tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce CLIENT_BNB_WALLET_ADDR=${DEPUTY_BNB_WALLET_ADDR} CLIENT_ETHEREUM_ADDR=0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b tbnbcli token HTLT \\ --from ${CLIENT_BNB_WALLET_ADDR} \\ --recipient-addr ${DEPUTY_BNB_WALLET_ADDR} \\ --chain-id Binance-Chain-Nile \\ --height-span 500 \\ --amount 10:BNB \\ --expected-income 100:PPT \\ --recipient-other-chain ${CLIENT_ETHEREUM_ADDR} \\ --cross-chain \\ --trust-node \\ --node http://data-seed-pre-0-s3.binance.org:80 HTLT 回復的結果如下，可以在Binance Testnet Explorer\nRandom number: 75267ba4cc4f2d9ddbf9f90dc1ea813ae2a4d2114eb2ef2cb7ff0a5d285c7396 Timestamp: 1572337686 Random number hash: dabd990af86582969d47218012ecdb09899b9ad2b069c05be94ef82bea889a1b Password to sign with 'tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce': Committed at block 46889130 (tx hash: D653FC7B5D2048A2A165F49426CDCAD733703CF534367133819091892E3A1F14, response: {Code:0 Data:[119 24 196 176 181 1 29 177 60 107 100 166 55 16 253 136 159 3 204 56 109 46 63 87 93 9 239 158 138 172 21 129] Log:Msg 0: swapID: 7718c4b0b5011db13c6b64a63710fd889f03cc386d2e3f575d09ef9e8aac1581 Info: GasWanted:0 GasUsed:0 Tags:[{Key:[115 101 110 100 101 114] Value:[116 98 110 98 49 97 54 112 118 53 103 109 110 115 97 121 52 97 57 115 114 55 110 118 100 48 109 108 100 122 50 57 97 54 107 100 120 121 101 51 55 99 101] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[114 101 99 105 112 105 101 110 116] Value:[116 98 110 98 49 119 120 101 112 108 121 119 55 120 56 97 97 104 121 57 51 119 57 54 121 104 119 109 55 120 99 113 51 107 101 52 102 102 97 115 112 51 100] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0} {Key:[97 99 116 105 111 110] Value:[72 84 76 84] XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}] Codespace: XXX_NoUnkeyedLiteral:{} XXX_unrecognized:[] XXX_sizecache:0}) 取得 swap id 與 random number，使用 swap ip 查詢\nSWAP_ID=7718c4b0b5011db13c6b64a63710fd889f03cc386d2e3f575d09ef9e8aac1581 tbnbcli token query-swap \\ --swap-id ${SWAP_ID} \\ --chain-id Binance-Chain-Nile \\ --trust-node \\ --node http://data-seed-pre-0-s3.binance.org:80 回復當前的狀態\n{ \u0026#34;from\u0026#34;:\u0026#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#34;, \u0026#34;to\u0026#34;:\u0026#34;tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce\u0026#34;, \u0026#34;out_amount\u0026#34;:[ { \u0026#34;denom\u0026#34;:\u0026#34;BNB\u0026#34;, \u0026#34;amount\u0026#34;:\u0026#34;10\u0026#34; } ], \u0026#34;in_amount\u0026#34;:null, \u0026#34;expected_income\u0026#34;:\u0026#34;100:PPT\u0026#34;, \u0026#34;recipient_other_chain\u0026#34;:\u0026#34;0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b\u0026#34;, \u0026#34;random_number_hash\u0026#34;:\u0026#34;dabd990af86582969d47218012ecdb09899b9ad2b069c05be94ef82bea889a1b\u0026#34;, \u0026#34;random_number\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;timestamp\u0026#34;:\u0026#34;1572337686\u0026#34;, \u0026#34;cross_chain\u0026#34;:true, \u0026#34;expire_height\u0026#34;:\u0026#34;46889630\u0026#34;, \u0026#34;index\u0026#34;:\u0026#34;2245\u0026#34;, \u0026#34;closed_time\u0026#34;:\u0026#34;0\u0026#34;, \u0026#34;status\u0026#34;:\u0026#34;Open\u0026#34; } Deputy Appove Token Deputy 已經抓到 Binance Chain 上的 tx，會記錄在 Mysql 內\nuse deputy; select * from tx_log limit 10; | id | chain | swap_id | tx_type | tx_hash | contract_addr | sender_addr | receiver_addr | sender_other_chain | other_chain_addr | in_amount | out_amount | out_coin | random_number_hash | expire_height | timestamp | random_number | block_hash | height | status | confirmed_num | create_time | update_time | | 2 | BNB | 7718c4b0b5011db13c6b64a63710fd889f03cc386d2e3f575d09ef9e8aac1581 | BEP2_HTLT | d653fc7b5d2048a2a165f49426cdcad733703cf534367133819091892e3a1f14 | | tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce | tbnb1a6pv5gmnsay4a9sr7nvd0mldz29a6kdxye37ce | | 0x938a452d293c23C2CDEae0Bf01760D8ECC4F826b | 100:PPT | 10 | BNB | dabd990af86582969d47218012ecdb09899b9ad2b069c05be94ef82bea889a1b | 46889630 | 1572337686 | | 6948f34e4013da29c9922306b60b2c12f174925c63ff2a46d6b2fc3acd7a3774 | 46889130 | CONFIRMED | 6 | 1572337694 | 1572337695 | Deputy Send HTLT on Ethereum 查詢 Ethereum 上的 HTLT\n客戶端 Call Claim 取得 ERC-20 Token 客戶端取得 100:PPT\nDeputy Call HTLT Claim 取得 Binance Token Deputy 取得 10:BNB\n GCE gcloud compute ssh dep3-deputy sudo apt-get update sudo apt-get install mysql-server sudo cat /etc/mysql/debian.cnf wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz tar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz export PATH=$PATH:/usr/local/go/bin go get github.com/binance-chain/bep3-deputy go mod tidy go build -o build/deputy main.go References  Binace Chain Doc Binance BEP3 spec  ","date":1571711720,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572843450,"objectID":"999b1904583d64160867532b02fcec8e","permalink":"https://chechiachang.github.io/post/blockchain-bep3-atomic-swap/","publishdate":"2019-10-22T10:35:20+08:00","relpermalink":"/post/blockchain-bep3-atomic-swap/","section":"post","summary":"BEP3 Atomic Swap Binance 在 BEP3: HTLC and Atomic Peg 提到，BEP 即將在 binance chain 上支援原生的 Hash Timer Locked Transfer (HTLT) ，這使跨鏈的原子性交換 (atomic swap) 變得可行，透過 HTLC 在兩邊的鏈上鎖住 (peg) tokens，然","tags":["blockchain","bep3","binance","ethereum","erc-20"],"title":"Blockchain Bep3 Atomic Swap","type":"post"},{"authors":[],"categories":[],"content":"Deploy Kafka on Kubernetes David Chang\n   About Me David (Che-Chia) Chang\n Backend / Devops @ MachiX Golang Taipei Meetup 2020 Ithelp Ironman Challenge https://t.me/chechiachang   Outline  Introduction to Kafka Deploy Kafka with Helm Kafka Topology Ithelp Ironman 30 days Challenge (7th-12nd day)   Introduction   https://kafka.apache.org/\n Distributed streaming platform  Publish \u0026amp; Subscribe: r/w data like messaging system Store data in distributed, replicated, fault-tolerant cluster Scalable Realtime   Concepts  Kafka run as a cluster Kafka cluster stores streams of records in categories called topics record = (key, value, timestamp)   Kafka Diagram    Topic Partitions    Topic Partitions  Data categorized by topic Data replicated in partitions Durability  consumer able to r/w complete data from at least 1 partition in order     Distributed Data Streaming   Scalible r/w bandwith\n  Data Durability\n  Consistency\n  Availability\n  Partition Tolerance\n   Multi Consumer    Consumer Group    Consumer Group  Partition deliver record to one consumer within each subscribing consumer group   Deployment Helm Kafka\n Deployment https://github.com/chechiachang/kafka-on-kubernetes\ncat install.sh #!/bin/bash # https://github.com/helm/charts/tree/master/incubator/kafka HELM_NAME=kafka-1 helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator helm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml Check values-staging.yaml before deployment\n Helm Chart Values cat values-staging.yaml # ------------------------------------------------------------------------------ # Kafka: # ------------------------------------------------------------------------------ ## The StatefulSet installs 3 pods by default replicas: 3 ## The kafka image repository image: \u0026quot;confluentinc/cp-kafka\u0026quot; ## The kafka image tag imageTag: \u0026quot;5.0.1\u0026quot; # Confluent image for Kafka 2.0.0 ## Specify a imagePullPolicy ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images imagePullPolicy: \u0026quot;IfNotPresent\u0026quot; ## Configure resource requests and limits ## ref: http://kubernetes.io/docs/user-guide/compute-resources/ resources: {} # limits: # cpu: 200m # memory: 1536Mi # requests: # cpu: 100m # memory: 1024Mi kafkaHeapOptions: \u0026quot;-Xmx4G -Xms1G\u0026quot; ## The StatefulSet Update Strategy which Kafka will use when changes are applied. ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies updateStrategy: type: \u0026quot;OnDelete\u0026quot; ## Start and stop pods in Parallel or OrderedReady (one-by-one.) Note - Can not change after first release. ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy podManagementPolicy: OrderedReady ## If RBAC is enabled on the cluster, the Kafka init container needs a service account ## with permissisions sufficient to apply pod labels rbac: enabled: false affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: app operator: In values: - kafka topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; podAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 50 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - zookeeper topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; ## Configuration Overrides. Specify any Kafka settings you would like set on the StatefulSet ## here in map format, as defined in the official docs. ## ref: https://kafka.apache.org/documentation/#brokerconfigs ## configurationOverrides: \u0026quot;default.replication.factor\u0026quot;: 3 \u0026quot;offsets.topic.replication.factor\u0026quot;: 1 # Increased from 1 to 2 for higher output # \u0026quot;offsets.topic.num.partitions\u0026quot;: 3 \u0026quot;confluent.support.metrics.enable\u0026quot;: false # Disables confluent metric submission # \u0026quot;auto.leader.rebalance.enable\u0026quot;: true # \u0026quot;auto.create.topics.enable\u0026quot;: true # \u0026quot;controlled.shutdown.enable\u0026quot;: true # \u0026quot;controlled.shutdown.max.retries\u0026quot;: 100 \u0026quot;message.max.bytes\u0026quot;: \u0026quot;16000000\u0026quot; # Extend global topic max message bytes to 16 Mb ## Persistence configuration. Specify if and how to persist data to a persistent volume. ## persistence: enabled: true ## Prometheus Exporters / Metrics ## prometheus: ## Prometheus JMX Exporter: exposes the majority of Kafkas metrics jmx: enabled: true ## Prometheus Kafka Exporter: exposes complimentary metrics to JMX Exporter kafka: enabled: true topics: [] # ------------------------------------------------------------------------------ # Zookeeper: # ------------------------------------------------------------------------------ zookeeper: ## If true, install the Zookeeper chart alongside Kafka ## ref: https://github.com/kubernetes/charts/tree/master/incubator/zookeeper enabled: true  Kubernetes Configurations  replicas resource pod affinity persistence   Kafka Configurations  zookeeper configurationOverrides   \u0026quot;default.replication.factor\u0026quot;: 3 \u0026quot;offsets.topic.replication.factor\u0026quot;: 1 # Increased from 1 to 2 for higher output # \u0026quot;offsets.topic.num.partitions\u0026quot;: 3 # \u0026quot;auto.leader.rebalance.enable\u0026quot;: true # \u0026quot;auto.create.topics.enable\u0026quot;: true \u0026quot;message.max.bytes\u0026quot;: \u0026quot;16000000\u0026quot; # Extend global topic max message bytes to 16 Mb  Monitoring Configurations   prometheus exporter\n  monitoring is the key to production\n   Deploy after Understande Configs   All Kafka garantees are based on a correctly configured cluster\n  Incorrect configs will cause cluster unstable and data loss\n  Now we can deploy :)\n   Pods $ kubectl get po | grep kafka NAME READY STATUS RESTARTS AGE kafka-1-0 1/1 Running 0 224d kafka-1-1 1/1 Running 0 224d kafka-1-2 1/1 Running 0 224d kafka-1-exporter-88786d84b-z954z 1/1 Running 0 224d kafka-1-zookeeper-0 1/1 Running 0 224d kafka-1-zookeeper-1 1/1 Running 0 224d kafka-1-zookeeper-2 1/1 Running 0 224d  Availability ex. replication factor=3\n 3 partitions, each 1 in a kafka-broker 1 master partition 2 slave partitions (readonly) data sync from master to slave   Availability  kafka keep a number of slave in-synced  too many in-sync -\u0026gt; slow down write confirm not enough will -\u0026gt; data loss     On slave failure  client not affected keep enough in-sync slaves wait dead slave to back online   On master failure  slave select new master within in-synced slaves new master sync to slaves new master serve clients wait dead master to back online and become slave   Configs Availability  Metadata are stored in zookeeper  topic configs partition configs consumer offsets     重點  要仔細看完 helm chart values 的設定，設錯就幹掉重來 kafka 的概念與設定，要花時間研究清楚 resource \u0026amp; JVM heap size prometheus is a must   Ithelp Ironman Challenge   30 天內容都是 step-by-step\n  內容只是仔細看官方文件\n  challenge -\u0026gt; 自我成長\n  給輸在起跑點的人\n   Thank you ","date":1571386362,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571448148,"objectID":"3b3afac67dfbb32c727be5d93a8efd82","permalink":"https://chechiachang.github.io/slides/kubernetes-kafka-deployment/","publishdate":"2019-10-18T16:12:42+08:00","relpermalink":"/slides/kubernetes-kafka-deployment/","section":"slides","summary":"Deploy Kafka on Kubernetes David Chang About Me David (Che-Chia) Chang Backend / Devops @ MachiX Golang Taipei Meetup 2020 Ithelp Ironman Challenge https://t.me/chechiachang Outline Introduction to Kafka Deploy Kafka with Helm Kafka Topology Ithelp Ironman 30 days Challenge (7th-12nd day) Introduction https://kafka.apache.org/ Distributed streaming platform Publish \u0026amp; Subscribe: r/w data like messaging system Store data in distributed, replicated, fault-tolerant cluster Scalable Realtime Concepts Kafka run as a cluster Kafka","tags":[],"title":"Deploy Kafka on Kubernetes","type":"slides"},{"authors":[],"categories":null,"content":"","date":1571316650,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571448148,"objectID":"8346e99ab33f51f4c9cce9fa2339c9f4","permalink":"https://chechiachang.github.io/talk/kubernetes-kafka-deployment/","publishdate":"2019-10-17T20:50:50+08:00","relpermalink":"/talk/kubernetes-kafka-deployment/","section":"talk","summary":"","tags":["kafka","kubernetes","distributed"],"title":"Deploy Kafka on Kubernetes","type":"talk"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  超簡短推坑 oeprator-sdk 鐵人賽心得  承上 上篇介紹了 crd 與 controller，然而沒有說明 controller 的編寫與操作，因為 controller 的部分比較複雜，我們鐵人挑戰賽尾聲，篇幅說實在是不太夠。\n有興趣詳細了解的大德，請參考相同鐵人挑戰團隊的隊友文章，裏頭對 controller 有詳細介紹，這邊就不贅述。直接提供個人使用覺得最簡單上手的 operator sdk\nOperator SDK Operator SDK 是 Operator framework 中的一部分，能有效且自動化的管理 kubernetes native apps, operator 的管理工具。\n複雜的 kubernetes application 是非常難管理的，寫 operator 也是很有挑戰，不僅要處理大量 kubernetes 底層的 API，要寫很多樣版。 operator SDK 使用 controller-runtime 的 library 讓編寫 native application 變得簡單許多\n 可以使用上層的 API 與抽象來編寫 operator 邏輯 快速使用 code generation 有擴充套件  Workflow 這邊以 golang 為例說明\n 安裝 operator sdk 定義新的 API resource (custom resource definition) 定義 controller 來監測 custom resource 編寫 reconciling 邏輯來 sync desired state 與 current state 使用 sdk cli 進行測試 使用 sdk cli 來 build，並產生部屬用的 manifests  安裝請依照 安裝說明 操作即可。\n這邊使用 sdk cli 來增加新的 crd\n# Add a new API for the custom resource AppService $ operator-sdk add api --api-version=app.example.com/v1alpha1 --kind=AppService 產生的 go 源碼會放在 pkg 中，可以依自己需求調整 crd 的結構\n這邊使用 sdk cli 產生對應 crd 的 controller，裏頭已經寫好大部分的 code gene 與 reconcile 的樣板，直接修改就可使用，非常方便\n# Add a new controller that watches for AppService $ operator-sdk add controller --api-version=app.example.com/v1alpha1 --kind=AppService 修改完，直接使用 sdk cli build 成 image，然後推到 image hub 上\n# Build and push the app-operator image to a public registry such as quay.io $ operator-sdk build quay.io/example/app-operator $ docker push quay.io/example/app-operator 部屬前檢查一下 manefests 檔案，特別是 crd.yaml 與 operator.yaml，如果源碼有調整記得做對應的修改。\n# Setup Service Account $ kubectl create -f deploy/service_account.yaml # Setup RBAC $ kubectl create -f deploy/role.yaml $ kubectl create -f deploy/role_binding.yaml # Setup the CRD $ kubectl create -f deploy/crds/app.example.com_appservices_crd.yaml # Deploy the app-operator $ kubectl create -f deploy/operator.yaml 這樣便部屬了 operator，operator 會監看指定的 custom resource，並依照 controller 的邏輯進行 reconcile。\n這邊以增加 custom resource 為例\n# Create an AppService CR # The default controller will watch for AppService objects and create a pod for each CR $ kubectl create -f deploy/crds/app.example.com_v1alpha1_appservice_cr.yaml 增加一個 cr 到 kubernetes 上，這時 operator 會偵測到 cr 的變化，並且依照 reconcile 的邏輯 sync\n檢查一下 cr 與 operator 的狀態\n# Verify that a pod is created $ kubectl get pod -l app=example-appservice NAME READY STATUS RESTARTS AGE example-appservice-pod 1/1 Running 0 1m 詳細的操作步驟可以看 這邊\n小結 事實上，operator sdk 的功能還有非常多，細講又要花好幾篇文章講，之後有機會會放在我的個人網站上。\n另外 operator sdk 也歡迎外部的 Issue 與 PR，團隊的人非常 nice 會願意花時間跟社群朋友溝通，有興趣請來 contribute。\n這系列鐵人文章，說實在沒有什麼很深入的技術討論，多半資料都是各個項目的官方文件翻譯，加上一些個人的經驗與解讀，並不是含金量很高的文章。然而我個人在接觸這些項目時，卻往往因為找不到細節操作的步驟分享文章，在許多小細節上撞牆很久，也因此才有了這系列文章。\n這系列文就只是踩雷之旅，讓後人如果有用到這些文章，生活能過得開心一點，這 30 天的時間就有了價值。\n鐵人挑戰賽的最後一天，感謝各路大德一路相隨，讓我在假日也能心甘情願地坐下來寫文章。游於藝天一篇真的很逼人，有幾天的文章品質是有蠻多問題的，也感謝大德們協助捉錯，給予很多建議。\n謝謝各位。\n","date":1571131692,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571152745,"objectID":"54b720c892ae7c12540db96b3821221b","permalink":"https://chechiachang.github.io/post/kubernetes-custom-resource-with-operator-sdk/","publishdate":"2019-10-15T17:28:12+08:00","relpermalink":"/post/kubernetes-custom-resource-with-operator-sdk/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":[],"title":"Kubernetes Custom Resources with Operator SDK","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  CRD 內容 Deploy CRD Use custom resource  Recap 在上次的 cert-manager 內容中我們走過 cert-manager 的安裝步驟，其中有一個步驟是 apply cert-manager 的 manigests 檔案 *.yaml)\nhttps://github.com/jetstack/cert-manager/tree/release-0.11/deploy/manifests\n$ git clone https://github.com/jetstack/cert-manager $ git checkout release-0.11 $ ls deploy/manifest 00-crds.yaml 01-namespace.yaml BUILD.bazel\tREADME.md\thelm-values.yaml 我們快速看一下這個 00-crds.yaml，這個 yaml 非常長，直接跳到 certificates.certmanager.k8s.io\n希望看 golang 源碼文件的話，可以搭配godoc.org/k8s.io/apiextensions 來閱讀，更能理解 definition。\n在看之前先注意幾件事，CRD 內除了 schema 外，還定義了許多不同情境的使用資料。\n CRD 內定義了 custom resource 的資料儲存 .spec.validation.openAPIV3Schema，使用 custom resource 會透過 validator 驗證 .openAPIV3Schema 內定義了 .spec，以及 rumtime 中紀錄 .status 的資料  controller 可以把狀態 sync 到 custom resource 的 .status 中紀錄 controller 可以比對 .spec 與 .status 來決定是否要 sync 以及如何 sync   CRD 內定義了與 server 以及 client 互動的方式，  names 中定義各種使用情境的 custom resource 名稱 additionalPrinterColumns 中添加 kubectl 中的顯示內容    // 這邊使用的是 v1beta1 的 API (deprecated at v1.16) ，新版開發建議使用 apiextension.k8s.io/v1 的 api apiVersion: apiextensions.k8s.io/v1beta1 kind: CustomResourceDefinition metadata: creationTimestamp: null name: certificates.cert-manager.io spec: // 使用 kubectl 會額外顯示的資訊內容，透過 jsonpath 去 parse 顯示 additionalPrinterColumns: - JSONPath: .status.conditions[?(@.type==\u0026quot;Ready\u0026quot;)].status name: Ready type: string - JSONPath: .spec.secretName name: Secret type: string - JSONPath: .spec.issuerRef.name name: Issuer priority: 1 type: string - JSONPath: .status.conditions[?(@.type==\u0026quot;Ready\u0026quot;)].message name: Status priority: 1 type: string - JSONPath: .metadata.creationTimestamp description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. name: Age type: date group: cert-manager.io // 定義 CRD 在不同情境下使用的名稱 names: kind: Certificate listKind: CertificateList plural: certificates shortNames: - cert - certs singular: certificate scope: Namespaced subresources: status: {} validation: // openAPIV3Schema 中是 custom resource 實際操作會使用的內容 // properties 使用 . .description .type ，分別定義名稱，描述，檢查型別 openAPIV3Schema: description: Certificate is a type to represent a Certificate from ACME properties: apiVersion: description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources' type: string kind: description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds' type: string // custom resource runtime 中的 metadata metadata: type: object // custom resource 使用時的 spec，定義 custom resoure 的 desired status spec: ... // custom controller 監測 custom resource 的 current status，這邊的資料完全視 controller 實作來產生，如果沒有實作 sync status，也可以沒有資料 status: ... type: object // 這個是 CRD 物件的 version，可以定義多個不同 version 的 CRD，調用時需要註明版本 version: v1alpha2 versions: - name: v1alpha2 served: true storage: true // 這個是 CRD 物件的 status，描述 CRD 部署到 API server 的狀態，例如 CRD 儲存適用 configmap 的儲存空間，這邊顯示在 API server 上的儲存狀態。不要跟 custom resource 的 status 弄混了 status: acceptedNames: kind: \u0026quot;\u0026quot; plural: \u0026quot;\u0026quot; conditions: [] storedVersions: [] helm-values.yaml 與 01-namespace.yaml 很單純，前者是使用 helm 部署的可設定參數，預設只有 kubernetes resources，後者則是為之後的 cert-manager 元件新增一個 kubernetes namespace。\n小結 CRD 內容 (apiextensions/v1beta1)  CRD 顯示名稱，內容 CRD spec 驗證  custom resource custom resource schema   CRD 自身部署狀態  部署 部署相較定義本身就非常簡單，直接 kubectl apply 到 kubernetes 上\n使用 custom resource 有了 CRD，我們便可以使用 CRUD API，互動模式與其他 build-in kubernetes resources 相同，只是內容會照 CRD 上的定義調整\nkubectl get certificates.certmanager.k8s.io kubectl get certificates kubectl get certs --all-namespaces kubectl get cert -n cert-manager NAMESPACE NAME READY SECRET AGE cert-manager ingress-nginx-tls True ingress-nginx-tls 221d 這邊看到的內容可能會有些落差，因為我當初用的版本比較舊，但內容大同小異。\n底下的 describe 內容已經跟上面的 CRD 版本差太多，對不起來了。但我也懶得再佈一組，還要重做 dnsName 與 authotization challenge\n直接讓大家感受一下舊版的內容XD\n$ kubectl describe cert ingress-nginx-tls Name: ingress-nginx-tls Namespace: cert-manager API Version: certmanager.k8s.io/v1alpha1 Kind: Certificate Metadata: Creation Timestamp: 2019-03-06T06:48:26Z Generation: 4 Owner References: API Version: extensions/v1beta1 Block Owner Deletion: true Controller: true Kind: Ingress Name: ingress-nginx Self Link: /apis/certmanager.k8s.io/v1alpha1/namespaces/default/certificates/ingress-nginx-tls Spec: Acme: Config: Domains: chechiachang.com Http 01: Ingress: Ingress Class: nginx Dns Names: chechiachang.com Issuer Ref: Kind: ClusterIssuer Name: letsencrypt-prod Secret Name: ingress-nginx-tls // 當前的 status，controller sync 上來 // controller 會比對 .spec 與 .status，判斷是否需要做事，ex. renew Status: Acme: Order: URL: https://acme-v02.api.letsencrypt.org/acme/order/* Conditions: Last Transition Time: 2019-09-02T03:52:03Z Message: Certificate renewed successfully Reason: CertRenewed Status: True Type: Ready Last Transition Time: 2019-09-02T03:52:01Z Message: Order validated Reason: OrderValidated Status: False Type: ValidateFailed Events: \u0026lt;none\u0026gt; 想要新增，可以回去看 cert-manager tutorial，這個是新版的文件\n當然，不爽這個 cert resource 也可以幹掉\n$ kubectl delete cert ingress-nginx-tls -n cert-manager 以上\n小結  簡介 CRD 與 CRD 內容 操作 custom resource  ","date":1570975388,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570979696,"objectID":"2fd647f6106a569fee9efe5f209d1984","permalink":"https://chechiachang.github.io/post/kubernetes-custom-resource-deployment/","publishdate":"2019-10-13T22:03:08+08:00","relpermalink":"/post/kubernetes-custom-resource-deployment/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":[],"title":"Kubernetes Custom Resource Deployment","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  custom resources custom controllers  簡介 custom resources Kubernetes 預先定義許多 resource ，這些 resource 是 kubernetes API 預先設置的 API objects，例如 kubernetes pods resource 包含許多 pods 物件。\nCustom resoure 則是透過擴充 kubernetes API ，讓自定義的物件也可以在 kubernetes 上使用。上篇 cert-manager 就使用了許多 custom resource，這些 resource 在一般安裝的 kubernetes 上沒有安裝，需要安裝 custom resource difinition，向 kubernetes cluster 定義新的 custom resource。例如 certificates.certmanager.k8s.io 就是 cert-manager 自定義的資源，用來代表產生 x509 certificate 的內容。\n越來越多的 kubernetes core 方法，如今也使用 custom resources 來定義，讓 kubernetes 核心元件更加模組化。\ncustom resource 可以在運行中的 kubernetes 集群中註冊 (registration) ，也可以動態註銷，custom resource 並不會影響集群本身的運作。只要向 kubernetes 註冊完 custom resource，就可以透過 API 與 kubectl 控制 custom resource，就像操作 Pod resource 一樣。\nCustom controllers custom resource 一但註冊，就可以依據 resource 的 CRD (custom resource definition) 來操作，因次可以儲存客製化的資料內容。然而在很多情形，我們並不只要 custom resource 來讀寫，而是希望 custom resource 能執行定義的工作，如同 Pod resource 可以在 kubernetes 集群上控制 Pod，在 Pod resource 上描述的 desired state kubernetes 會透過定義在 Pod API 中的 sync 邏輯，來達到 current state 與 desired state 的平衡。\n我們希望 custom resource 也能做到上述的功能，提供 declarative API，讓使用者不需編寫完整的程式邏輯，只要透過控制 custom resource，就可以透過 controller 內定義的邏輯，來實現 desired state。使用者只需要專注在控制 custom resource 上的 desired state，讓 controller 處理細節實作。\n例如：我們在 cert-manager 中設定 certificates.certmanager.k8s.io 資源，來描述我們希望取得 x509 certificate 的 desired state，但我們在 certificates.certmanager 上面沒有寫『透過 Let's Encrypt 取得 x509 certificate』的實現邏輯，仍然能透過 cert-manager 產生 x509 certiticate，因為 cert-manager 內部已經定義 certificates.certmanager.k8s.io 的 custom controller。\n基本的 custom resource 操作\n 註冊 custom resource definition，讓 kubernetes API 看得懂 custom resource  不然 API 會回覆 error: the server doesn't have a resource type   有 CRD 便可以 apply custom resource 到集群中 部署 custom controller，監測 custom resource 的 desired state 內容，並實現達到 desired state 的業務邏輯  沒有 custom controller，custom resource 就只是可以 apply 與 update 的資料儲存結構，沒有 cert-manager 中 controller 的邏輯，也還是生不出 x509 certificate。    kubectl get chechiachang error: the server doesn't have a resource type \u0026quot;chechiachang\u0026quot; custom controller 也可以跟其他的 kubernetes resource 互動，例如 cert-manager 在產生 certificate 的時候，會把產生的 certificate 檔案放在 secret 中，cert-manager 會依據 order 中定義的 lifecycle ，持續檢查 certificate 的有效性，如果接近過期，則會觸發新的一輪 order。\n我們也可以寫一個操作 Configmap 與 Deployment Resource 的 custom controller，來進行 deploymnet 的 Image 更新。\n我需要 custom resource 嗎 kubernetes 在should I add custom resource 有列表分析該不該使用 custom resource ，將你的 API 邏輯整合到 kubernetes API 上。幾個判斷參考:\n API 是 declarative model，如果不是可能不適合跟 kubernetes API 整合，獨立成為一個自己運行的服務即可 需要使用 kubernetes 需要使用 kubectl 控制 API 需要使用 kubernetes 支援的功能 正哉開發全新功能，因為整合舊的服務到 kubernetes API 工程浩大  也許 configmap/secret 就可以解決 如果只是需要將資料儲存在 kubernetes 上，有一個 build-int 的 kubernetes resource 很適合，就是 configmap。可以瘀考以下條件，判斷是否 configmap 搭配能監看 configmap 的 controller 就可以達成需求。\n 已經有完整的 config file，例如 mysql.cnf, nginx.conf\u0026hellip; 主要用途是把檔案掛載到 Pod 中的 process 使用 使用時的格式，是整個檔案放在 Pod 中，或是使用環境變數塞到 Pod 裡面，而不是透過 kubernetes API 存取 (ex 使用 kubectl) 更新 configmpa 時更新 Pod，會比更新 custom resource 時更新 Pod 容易  如果使用 CRD 或 Aggregated kubernetes API，大多符合下列條件\n 使用 kubernetes libraries 與客戶端 (ex kubectl) 操作 custom resource 需要 top level 的 kubernetes 支援，例如可以 kubectl get cheachiachang 自動化 kubernetes 物件 需要用到 .spec, .status, .metadata，這些比較 desired state 與 currenty state 的功能 需要抽象類別來管理一群 controlled resource  Custom Resource Definition Custom Resoure Definition 讓使用者可以定義 custom resource，定義 custom resource 的格式包括名稱與 data schema，然後交給 kubernetes API 去處理 custom resource 的儲存。\n也就是說，透過 CRD 我們不用寫 custom resource 的 API，例如 cert-manager 不用寫 certificates.certmanager.k8s.io 的 API，而是向 kubernetes API server 註冊 CRD，讓 kubernetes API server 看得懂 custom source 的定義，並且直接使用 kubernetes API server，進行 custom resource 的 CRUD。\n我們可以透過 kubectl (API server) 操作 certificates.certmanager.k8s.io，這個請求也是送到 kubernetes API server。\nAPI server aggregation 能夠透過註冊 CRD ，就可以使用原來的 kubernetes API 來進行 CRUD ，是因為 kubernetes API 對於普通的 API 操作提供泛型 (generic) 介面，直接使用 CRUD 的邏輯。\n由於是 kubernetes Aggregated API ，所有 kubernetes 的 clients 都一起兼容新註冊的 custom resource，不用在 API 要定義，在冊戶端也要定義。註冊完的 custom resource definition，可以直接透過 kubectl 存取。\n小結  custom resource 簡介 custom resource 使用的情境與條件 custom resource definition 與 Aggregated API  ","date":1570958892,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570964185,"objectID":"5667ffcc77c1bc09b4ca82c915a1b19e","permalink":"https://chechiachang.github.io/post/kubernetes-custom-resources-basic/","publishdate":"2019-10-13T17:28:12+08:00","relpermalink":"/post/kubernetes-custom-resources-basic/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":[],"title":"Kubernetes Custom Resources Basic","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n Recap 昨天我們實際使用 cert-manager，為 nginx ingress controller 產生 certificates，過程中我們做了幾件事\n 設置 Let's Encript prod site 的 Issuer 設置 certificates.certmanager.k8s.io 資源來定義 certificate 的取得方式 或是在 ingress 中配置 tls，讓 cert-manager 自動透過 ingress-shim 產生 certifcates.cert-manager，並且產生 certificate  以上是使用 cert-manager 產生 certificate 的基本操作，剩下的是由 cert-manager 完成。實際上 cert-manager 在產生出 certificate 之前還做了很多事情，我們今天就詳細走過完整流程，藉此了解 cert-manager 配合 issuing certificate 的流程\n使用者設置 Issuer\n使用者設定 certificate -\u0026gt; cert-manager 根據 certificate -\u0026gt; 產生 certificate\nCertificateRequests certificaterequests.certmanager 是 cert-manager 產生 certificate 過程中會使用的資源，不是設計來讓人類操作的資源。\n當 cert-manager 監測到 certificate 產生後，會產生 certificaterequests.certmanager.k8s.io 資源，來向 issuer request certificate，這個過程與使用其他客戶端 (ex. certbot) 來向 3rd party CA server request certificate 時的內容相同，只是這邊我們使用 kubernetes resource 來定義。\n包含的 certificate request，會以 pem encoded 的形式，再變成 base64 encoded 存放在 resource 中。這個 pem key 也會從到遠方的 CA sercer (Let's Encrypt prod) 來 request certificate\n如果 issuance 成功，certificaterequest 資源應該會被 cert-manager 吃掉，不會被人類看到。\n一個 certificaterequests.certmanager 大概長這樣\napiVersion: cert-manager.io/v1alpha2 kind: CertificateRequest metadata: name: my-ca-cr spec: csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FUR .................................. LQo= isCA: false duraton: 90d issuerRef: name: ca-issuer # We can reference ClusterIssuers by changing the kind here. # The default value is Issuer (i.e. a locally namespaced Issuer) kind: Issuer group: cert-manager.io 這個 certificaterequests.certmanager 會讓 cert-manager 嘗試向 Issuer (lets-encrypt-prod) request certificate。\nOrder orders.certmanager.k8s.io 被 ACME 的 Issuer 使用，用來管理 signed TLD certificate 的 ACME order，這個 resource 也是 cert-manager 自行產生管理的 resource，不需要人類來更改。\n當一個 certificates.certmanager 產生，且需要使勇 ACME isser 時，certmanager 會產生 orders.certmanager ，來取得 certificate。\nChallenges challenges.certmanager 資源是 ACME Issuer 管理 issuing lifecycle 時，用來完成單一個 DNS name/identifier authorization 時所使用的。用來確定 issue certiticate 的客戶端真的是 DNS name 的擁有者。\n當 cert-manager 產生 order 時，order controller 接到 order ，就會為每一個需要 DNS certificate 的 DNSname ，產生 challenges.certmanager。\n這段也是 order controller 自動產生，並不需要使用者參與。\nACME certificate issuing user -\u0026gt; 設定好 issuers.certmanager\nuser -\u0026gt; 產生 certificates.certmanager -\u0026gt; 選擇 Issuer -\u0026gt;\ncert-manager -\u0026gt; 產生 certificaterequest -\u0026gt;\ncert-manager 根據 certiticfates.certmanager 產生 orders.certmanager -\u0026gt;\norder controller 根據 order ，並且跟每一個 DNS name target，產生一個 challenges.certmanager\nchallenges.certmanager 產生後，會開啟這個 DNS name challenge 的 lifecycle\n challenges 狀態為 queued for processing，在佇列中等待， 如果沒有別的 chellenges 在進行，challenges 狀態變成 scheduled，這樣可以避免多個 DNS challenge 同時發生，或是相同名稱的 DNS challenge 重複 challenges 與遠端的 ACME server \u0026lsquo;synced\u0026rsquo; 當前的狀態，是否 valid  如果 ACME 回應這個 DNS name 的 challenge 還是有效的，則直接把 challenges 的狀態改成 valid，然後移出排程佇列。 如果 challenges 狀態仍然為 pending，challenge controller 會依照設定 present 這個 challenge，使用 HTTP01 或是 DNS01，challenges 被標記為 presented challenges 先執行 self check，確定 challenge 狀態已經傳播給 dns servers，如果 self check 失敗，則會依照 interval retry ACME authorization 關聯到 challenge    cert-manager 處理 \u0026lsquo;scheduled\u0026rsquo; challenges.certmanager -\u0026gt; ACME challenge\n","date":1570873285,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570960865,"objectID":"e2f22cd6982af17606c017e4a9b81109","permalink":"https://chechiachang.github.io/post/cert-manager-complete-workflow/","publishdate":"2019-10-12T17:41:25+08:00","relpermalink":"/post/cert-manager-complete-workflow/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":[],"title":"Cert Manager Complete Workflow","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 今天我們來實際使用 cert-manager，為 nginx ingress controller 產生 certificates with ACME Issuer\nCA Terminology 先把實際執行 CA 簽發的名詞定義一下，以免跟 cert-manager 的資源搞混\n Certificate: 憑證，x509 certificate，cert-manager 自動管理的目標，透過 let's encript 取得的 x509 certificates CA (Certificate Authority): issue signed certificate 的機構 issue: 頒發，指 CA 產生 certificate 與 key (今天的範例格式是 .crt 與 .key) Sign vs self-signed: 簽核，自己簽核，使用信任的 CA issue certificate，或是使用自己產生的 CA self-sign，然後把 CA 加到可以被信任的 CA 清單中。  Let's Encript CA issues signed certificates\nKubernetes in-cluster CA issues self-signed certificates\ncert-manager 的 CRD 資源，使用來描述 cert-manager 如何執行上述操作，CRD 底下都會加上 ``*.certmanager.k8s.io` 方便辨識。\n設定 Issuer Issuer 要怎麼翻成中文XD，憑證頒發機構？\n總之在開始簽發 certificates 前，要先定義 issuers.certmanager.k8s.io ，代表一個能簽發 certificate CA，例如 Let's Encript，或是 kubernetes 內部也有內部使用的憑證簽發，放在 secrets 中。\n這些 Issuer 會讓 certificates.certmanager.k8s.i8o 使用，定義如何取得 certificate 時，選擇 Issuer。\ncert-manager 上可以定義單一 namespace 的 issuers.certmanager 與集群都可使用的 clusterissuers.certmanager\ncert-manager 有支援幾種的 issuer type\n CA: 使用 x509 keypair 產生certificate，存在 kubernetes secret Self signed: 自簽 certificate ACME: 從 ACME (ex. Let's Encrypt) server 取得 ceritificate Vault: 從 Vault PKI backend 頒發 certificate Venafi: Venafi Cloud  Certificate 有了簽發憑證的單位，接下來要定義如何取得 certificate。certificates.certmanager.k8s.io 是 CRD，用來告訴 cert-manager 要如何取得 certificate\ncertifcates.certmanager.k8s.io 提供了簡單範例\napiVersion: cert-manager.io/v1alpha2 kind: Certificate metadata: name: acme-crt spec: secretName: acme-crt-secret duration: 90d renewBefore: 30d dnsNames: - foo.example.com - bar.example.com acme: config: - http01: ingressClass: nginx domains: - foo.example.com - bar.example.com issuerRef: name: letsencrypt-prod # We can reference ClusterIssuers by changing the kind here. # The default value is Issuer (i.e. a locally namespaced Issuer) kind: Issuer 上面這個 certificate.certmanger 告訴 cert-manager\n 針對 foo.example.com 與 bar.example.com 兩個 domainsc 使用 letsencript-prd Issuer 去取得 certificate key pair 成功後把 ceritifcate 與 key 存在 secret/acme-crt-secret 中(以 tls.key, tls.crt 的形式) 與 certificate.certmanager 都放在相同 namespace 中，產生 certificate.certmanager 的時候要注意才不會找不到 secret 這邊指定了 certificate 的有效期間與 renew 時間 (預設值)，有需要可以更改  配合 Ingress 設置 tls 有上述的設定，接下來可以請求 tls certificate\n記得我們上篇 Nginx Ingress Controller 提到的 ingreess 設定嗎？這邊準備了一個適合配合 nginx ingress 使用的 tls 設定\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: my-nginx-ingress annotations: kubernetes.io/ingress.class: \u0026quot;nginx\u0026quot; cert-manager.io/issuer: \u0026quot;letsencrypt-prod\u0026quot; spec: tls: - hosts: - foo.example.com secretName: my-nginx-ingrss-tls rules: - host: foo.example.com http: paths: - path: / backend: serviceName: chechiachang-backend servicePort: 80 這個 ingress apply 後，就會根據 spec.tls 的 hosts 設定，自動產生一個 certificate.certmanager 資源，並在這個資源使用 letsencryp-prod。\n不用我們手動 apply 新的 ceritificate，這邊是 cert-manager 使用了 annotation 來觸發 Ingress-shim，簡單來說，當 ingress 上有使用 cert-manager.io 的 annotation 時，cert-manager 就會根據 ingress 設定內容，抽出 spec.tls 與 isuer annotation，來產生同名的 certificates.certmanager，這個 certificateas.certmanager 會觸發接下的 certificate 頒發需求。\n只要部署 Issuer 與 Ingress 就可以自動產生 certificate。當然，希望手動 apply certificates.certmanager 也是行得通。\n把產生了 certificate.certmanager 拉出來看\nkubectl describe certificate my-nginx-ingress Name: my-nginx-ingress Namespace: default API Version: cert-manager.io/v1alpha2 Kind: Certificate Metadata: Cluster Name: Creation Timestamp: 2019-10-10T17:58:37Z Generation: 0 Owner References: API Version: extensions/v1beta1 Block Owner Deletion: true Controller: true Kind: Ingress Name: my-nginx-ingress Resource Version: 9295 Spec: Dns Names: example.your-domain.com Issuer Ref: Kind: Issuer Name: letsencrypt-prod Secret Name: my-nginx-ingress-tls Status: Acme: Order: URL: https://acme-prod-v02.api.letsencrypt.org/acme/order/7374163/13665676 Conditions: Last Transition Time: 2019-10-10T18:05:57Z Message: Certificate issued successfully Reason: CertIssued Status: True Type: Ready Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal CreateOrder 1d cert-manager Created new ACME order, attempting validation... Normal DomainVerified 1d cert-manager Domain \u0026quot;foo.example.com\u0026quot; verified with \u0026quot;http-01\u0026quot; validation Normal IssueCert 1d cert-manager Issuing certificate... Normal CertObtained 1d cert-manager Obtained certificate from ACME server Normal CertIssued 1d cert-manager Certificate issued Successfully 把 certificate 從 secret 撈出來看\n$ kubectl describe secret my-nginx-ingress-tls Name: my-nginx-ingress-tls Namespace: default Labels: cert-manager.io/certificate-name=my-nginx-ingrsss-tls Annotations: cert-manager.io/alt-names=foo.example.com cert-manager.io/common-name=foo.example.com cert-manager.io/issuer-kind=Issuer cert-manager.io/issuer-name=letsencrypt-prod Type: kubernetes.io/tls Data ==== tls.crt: 3566 bytes tls.key: 1675 bytes 如此便可以透過 ingress 設定 nginx 使用 https\n小結  了解 *.certmanager.k8s.io CRD 定義與意義 設定 Issuer 與 certificate 透過 ingress-shim 直接部署 ingress 來產生 certificate  ","date":1570764274,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570960865,"objectID":"06bdd9a0432e81de7a1e8e3339560454","permalink":"https://chechiachang.github.io/post/cert-manager-how-it-work/","publishdate":"2019-10-11T11:24:34+08:00","relpermalink":"/post/cert-manager-how-it-work/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":[],"title":"Cert Manager How It Work","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Cert-manager Introduction Deploy cert-manager  簡介 cert-manager TLS certificate 管理很重要，但在 kubernetes 上管理 TLS certificates 很麻煩。\n以往我們使用 Let's Encrypt 提供的免費自動化憑證頒發，搭配 kube-lego 來自動處理 certificate issuing，然而隨著 kube-lego 已不再更新後，官方建議改使用 Cert-manager 來進行 kubernetes 上的憑證自動化管理。\ncert-manager 是 kubernetes 原生的憑證管理 controller。是的他的核心也是一個 controller，透過 kubernetes object 定義 desired state，監控集群上的實際狀態，然後根據 resource object 產生憑證。cert-manager 做幾件事情\n 在 kubernetes 上 使用 CRD (Customized Resource Definition) 來定義 certificate issuing 的 desired state 向 let's encrypt 取得公開的憑證 在 kubernetes 上自動檢查憑證的有效期限，並自動在有效時限內 renew certificate。  安裝 官方文件有提供 詳細步驟 可以直接使用 release 的 yaml 部屬，也可以透過 helm。\n使用 yaml 部屬 # Create a namespace to run cert-manager in kubectl create namespace cert-manager # Disable resource validation on the cert-manager namespace kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true 開一個獨立的 namespace 來管理 cert-manager resources\n取消 namespcae 中的 kubernetes validating webhook。由於 cert-manager 本身就會使用 ValidatingWebhookConfiguration 來為 cert-manager 定義的 Issuer, Certificate resource 做 validating。然而這會造成 cert-manager 與 webhook 的循環依賴 (circling dependency)\n# Install the CustomResourceDefinitions and cert-manager itself kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.1/cert-manager.yaml # Install the CustomResourceDefinitions and cert-manager itself kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.1/cert-manager.yaml 這個 yaml 裡面還有幾個元件\n Cluster Role-bindings CustomResourceDefinition  certificaterequests.certmanager.k8s.io certificates.certmanager.k8s.io challenges.certmanager.k8s.io clusterissuers.certmanager.k8s.io issuers.certmanager.k8s.io orders.certmanager.k8s.io    這些元件的細節，留待運作原理分析時再詳解。\nhelm deployment 這邊也附上使用 helm 安裝的步驟\n#!/bin/bash # Install the CustomResourceDefinition resources separately kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.10/deploy/manifests/00-crds.yaml # Create the namespace for cert-manager kubectl create namespace cert-manager # Label the cert-manager namespace to disable resource validation kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true # Add the Jetstack Helm repository helm repo add jetstack https://charts.jetstack.io # Update your local Helm chart repository cache helm repo update # Install the cert-manager Helm chart helm install \\ --name cert-manager \\ --namespace cert-manager \\ --version v0.10.1 \\ jetstack/cert-managerNAMESPACE=cert-manager 部屬完檢查一下\nkubectl get pods --namespace cert-manager NAME READY STATUS RESTARTS AGE cert-manager-5c6866597-zw7kh 1/1 Running 0 2m cert-manager-cainjector-577f6d9fd7-tr77l 1/1 Running 0 2m cert-manager-webhook-787858fcdb-nlzsq 1/1 Running 0 2m 這邊部屬完，會獲得完整的 cert-manager 與 cert-manager CRD，但 certificate 的 desired state object 還沒部屬。也就是關於我們要如何 issue certificate 的相關描述，都還沒有 deploy， cert-manager 自然不會工作。關於 issuing resources configuration，我們下次再聊。\n","date":1570695130,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570960865,"objectID":"3f98908995cd96338dfb703e6f67fe27","permalink":"https://chechiachang.github.io/post/cert-manager-deployment/","publishdate":"2019-10-10T16:12:10+08:00","relpermalink":"/post/cert-manager-deployment/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":["kubernetes","cert-manager","ssl","tls"],"title":"Cert Manager Deployment on Kubernetes","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊該了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Jenkin-x on Kubernetes Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n Nginx Ingress Controller  簡介 nginx \u0026amp; Ingress Controller 部屬並設定 nginx ingress controller  Nginx Introduction Nginx 是一款高效能、耐用、且功能強大的 load balancer 以及 web server，也是市占率最高的 web server 之一。\n 高效能的 web server，遠勝傳統 apache server 的資源與效能 大量的模組與擴充功能 有充足的安全性功能與設定 輕量 容易水平擴展  Ingress \u0026amp; Ingress Controller 這邊簡單講一下 kubernetes ingress。當我們在使用 kubernetes 時需要將外部流量 route 到集群內部，這邊使用 Ingress 這個 api resource，來定義外部到內部的設定，例如:\n service 連接 load balance 設定 SSL/TLS 終端 虛擬主機設定  一個簡單的 ingress 大概長這樣\napiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: name: test-ingress annotations: nginx.ingress.kubernetes.io/rewrite-target: / spec: rules: - http: paths: - path: /testpath backend: serviceName: test servicePort: 80 除了一般的 k8s 資源，nginx 主要的設定會落在 spec，以及依賴底下實作不同，額外設定的 annotation。\n這邊可以看到 spec.rule 定義了外部 http 流量，引導到 backend service 的路徑。\nannotations 下已經標註的 nginx.ingress 的 annotation，來快速增加額外的設定。\nIngress \u0026amp; Ingress Controller 雖然已經指定 nginx 的 annotation，但這邊要注意，ingress resource 本身是不指定底層的實現 (ingress controller)，也就是說，底下是 nginx 也好，traefik 也行，只要能夠實現 ingress 裏頭設定的 routing rules 就可以。\n只設定好 ingress，集群上是不會有任何作用的，還需要在集群上安裝 ingress controller 的實作，實作安裝完了以後，會依據 ingress 的設定，在 controller 裏頭實現，不管是 routing、ssl/tls termination、load balancing 等等功能。如同許多 Kubernetes resource 的設計理念一樣，這邊也很優雅的用 ingress 與 ingress controller，拆分的需求設定與實作實現兩邊的職責。\n例如以 nginx ingress controller，安裝完後會依據 ingress 的設定，在 nginx pod 裡設定對應的 routing rules，如果有 ssl/tls 設定，也一併載入。\nKubernetes 官方文件提供了許多不同的 controller 可以依照需求選擇。\n但如果不知道如何選擇，個人會推薦使用 nginx ingress controller，穩定、功能強大、設定又不至於太過複雜，基本的設定就能很好的支撐服務，不熟悉的大德們比較不容易被雷到。\n底下我們就要來開始使用 nginx ingress controller。\nDeployment 我們這邊使用的 ingress-nginx 是 kubernetes org 內維護的專案，專案內容主要是再 k8s 上執行 nginx，抽象與實作的整合，並透過 configmap 來設定 nginx。針對 nginx ingress kubernetes 官方有提供非常詳細的說明文件 ，剛接觸 nginx 的大德可以透過這份文件，快速的操作 nginx 的設定，而不用直接寫 nginx.conf 的設定檔案。\n repo 版本是 nginx-0.26.1 Image 版本是 quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1  Helm 我們這邊用 helm 部屬，Nginx Ingress Controller Stable Chart，讓各位大德用最簡單的步驟，獲得一個功能完整的 nginx ingress controller。\n與前面幾個 helm chart 一樣，我們可以先取得 default values.yaml 設定檔，再進行更改。\n$ wget https://raw.githubusercontent.com/helm/charts/master/stable/nginx-ingress/values.yaml $ vim values.yaml 安裝時也可以使用 \u0026ndash;set 來變更安裝 chart 時的 parameters\n$ helm install stable/nginx-ingress \\ --set controller.metrics.enabled=true \\ -f values.yaml 安裝完後，resource 很快就起來。\nkubectl get all --selector app=nginx-ingress NAME READY STATUS RESTARTS AGE pod/nginx-ingress-controller-7bbcbdcf7f-tx69n 1/1 Running 0 216d pod/nginx-ingress-default-backend-544cfb69fc-rnn6h 1/1 Running 0 216d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx-ingress-controller LoadBalancer 10.15.246.22 34.35.36.37 80:30782/TCP,443:31933/TCP 216d service/nginx-ingress-default-backend ClusterIP 10.15.243.19 \u0026lt;none\u0026gt; 80/TCP 216d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx-ingress-controller 1/1 1 1 216d deployment.apps/nginx-ingress-default-backend 1/1 1 1 216d NAME DESIRED CURRENT READY AGE replicaset.apps/nginx-ingress-controller-7bbcbdcf7f 1 1 1 216d replicaset.apps/nginx-ingress-default-backend-544cfb69fc 1 1 1 216d kubectl get configmap -l app=nginx-ingress NAME DATA AGE nginx-ingress-controller 2 216d kubectl get ingress NAME HOSTS ADDRESS PORTS AGE ingress-nginx api.chechiachang.com 34.35.36.37 80, 443 216d 兩個 Pods\n Nginx ingress controller 是主要的 nginx pod，裡面跑的是 nginx Nginx default backend 跑的是 default backend，nginx 看不懂了 route request 都往這邊送。  Service\n nginx-ingress-contrller 是我們在 GCP 上，在集群外部的 GCP 上的對外接口。如果在不同平台上，依據預設 service load balancer 有不同實作。 在 gcp 上，會需要時間來啟動 load balancer，等 load balancer 啟動完成，service 這邊就可以取得外部的 ip，接受 load balancer 來的流量 另外一個 service 就是 default backend 的 service  踩雷 第一個雷點是 helm chart install 帶入的 parameters，有些 parameter 是直接影響 deployment 的設定，如果沒注意到，安裝完後沒辦法透過 hot reload 來處理，只能幹掉重來。建議把這份表格都看過一次，再依照環境與需求補上。\n$ helm install stable/nginx-ingress \\ --set controller.metrics.enabled=true \\ --set controller.service.externalTrafficPolicy=Local \\ -f values.yaml 這邊開了 prometheus metrics exporter，以及 source IP preservation。\nNginx Config 再安裝完後，外部的 load balancer 啟用後，就可以透過 GCP 的 external ip 連入 nginx，nginx 依照設定的 rule 向後端服務做集群內的 load balancing 與 routing。\n如果在使用過程中，有需要執行更改設定，或是 hot reload config，在 kubernetes 上要如何做呢? 我們下回分解。\n","date":1570493530,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570547333,"objectID":"3a0840e35ab10a3ed8124e9dcd32c2b4","permalink":"https://chechiachang.github.io/post/kubernetes-nginx-ingress-controller/","publishdate":"2019-10-08T08:12:10+08:00","relpermalink":"/post/kubernetes-nginx-ingress-controller/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊該了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":["kubernetes","nginx","ci","cd"],"title":"Kubernetes Nginx Ingress Controller","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我們就繼續搬，繼續踩。剩下的時間大概會有四個題目。\n Nginx Ingress Controller Cert-manager Jenkin-x on Kubernetes Kubernetes CRD \u0026amp; Operator-sdk  由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Nginx Ingress Controller 運作原理 設定 Nginx Ingress Controller  運作原理 昨天講完 nginx ingress controller 部屬，今天來談談 controller 是如何運作的。\n Nginx 使用 config file (nginx.conf) 做全域設定，為了讓 nginx 能隨 config file 更新，controller 要偵測 config file 變更，並且 reload nginx 針對 upstream (後端 app 的 endpoint) 變更，使用 lua-nginx-module 來更新。因為 kubernetes 上，service 後的服務常常會動態的變更，scaling，但 endpint ip list 又需要更新到 nginx，所以使用 lua 額外處理  在 kubernetes 上要如何做到上述兩件事呢?\n 一般 controller 都使用同步 loop 來檢查 current state 是否與 desired state desired state 使用 k8s object 描述，例如 ingress, services, configmap 等等 object Nginx ingress controller 這邊使用的是 client-go 中的 Kubernetes Informer 的 SharedInformer，可以根據 object 的更新執行 callback 由於無法檢查每一次的 object 更動，是否對 config 產生影響，這邊直接每次更動都產生全新的 model 如果新產生的 model 與現有相同，就跳過 reload 如果 model 只影響 endpoint，使用 nginx 內部的 lua handler 產生新的 endpoint list，來避免因為 upstream 服務變更造成的頻繁 reload 如果新 Model 影響不只 endpoint，則取代現有 model，然後觸發 reload  具體會觸發 reload 的事件，請見官方文件\n除了監測 objects，build model，觸發 reload，之前 controller 還會將 ingress 送到 kubernetes validating admission webhook server 做驗證，避免描述 desired state 的 ingress 有 syntax error，導致整個 controller 爆炸。\nConfiguration 要透過 controller 更改 nginx 設定，有以下三種方式\n 更改 configmap，對全域的 controller 設定 更改 ingress 上的 annotation，這些 annotation 針對獨立 ingress 生效 有更深入的客製化，是上述兩者達不到或尚未實作，可以使用 Custom Template 來做到，把 nginx.tmpl mount 進 controller  Configmap 由於把全域設定放到 configmap 上，nginx ingress controller 非常好調度與擴展，controller 官方說明文件 除了列出目前已經支援的設定外，也直接附上 nginx 官方的文件說明連結，讓使用者查詢時方便比對。\n當需要更改需求，可以 google nginx 的關鍵字，找到 nginx 上設定的功能選項後，來 controller 的文件，找看看目前是否已經支援。有時候有需要對照 nginx 官方文件，來正確設定 controller。\nAnnotation 有很多 Nginx 的設定是根據 ingress 不同而有調整，例如針對這個 ingress 做白名單，設定 session，設定 ssl 等等，這些針對特定 ingress 所做的設定，可以直接寫在 ingress annotation 裡面。\n例如下面這個 Ingress\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress-nginx annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: 'true' certmanager.k8s.io/cluster-issuer: letsencrypt-prod kubernetes.io/ingress.allow-http: \u0026quot;true\u0026quot; ingress.kubernetes.io/force-ssl-redirect: \u0026quot;true\u0026quot; nginx.ingress.kubernetes.io/whitelist-source-range: \u0026quot;34.35.36.37\u0026quot; nginx.ingress.kubernetes.io/proxy-body-size: \u0026quot;20m\u0026quot; ingress.kubernetes.io/proxy-body-size: \u0026quot;20m\u0026quot; # https://github.com/Shopify/ingress/blob/master/docs/user-guide/nginx-configuration/annotations.md#custom-nginx-upstream-hashing nginx.ingress.kubernetes.io/load-balance: \u0026quot;ip_hash\u0026quot; # https://kubernetes.github.io/ingress-nginx/examples/affinity/cookie/ nginx.org/server-snippets: gzip on; nginx.ingress.kubernetes.io/affinity: \u0026quot;cookie\u0026quot; nginx.ingress.kubernetes.io/session-cookie-name: \u0026quot;route\u0026quot; nginx.ingress.kubernetes.io/session-cookie-hash: \u0026quot;sha1\u0026quot; nginx.ingress.kubernetes.io/session-cookie-expires: \u0026quot;3600\u0026quot; nginx.ingress.kubernetes.io/session-cookie-max-age: \u0026quot;3600\u0026quot;  nginx.ingress.kubernetes.io  whitelist-source-range: 只允許白名單 ip load-balance: \u0026ldquo;ip_hash\u0026rdquo;: 更改預設 round_robin 的 load balance，為了做 session cookie affinity: \u0026ldquo;cookie\u0026rdquo;: 設定 upstream 的 session affinity session-cookie-name: \u0026ldquo;route\u0026rdquo; session-cookie-hash: \u0026ldquo;sha1\u0026rdquo; session-cookie-expires: \u0026ldquo;3600\u0026rdquo; session-cookie-max-age: \u0026ldquo;3600\u0026rdquo;    如果後端 server 有 session 需求，希望相同 source ip 來的 request 能持續到相同的 endpoint。才做了以上設定。\nhelm configuration helm 的 configuration 也是重要的設定，這裡在安裝時決定了 nginx ingress controller 的 topology、replicas、resource、k8s runtime 設定如 healthz \u0026amp; readiness、其實都會影響 nginx 具體的設定。這部分就會有很多考量。有機會我們再來分享。\n","date":1570493530,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570721344,"objectID":"be46bbf331b0864f51c3886b4933e802","permalink":"https://chechiachang.github.io/post/kubernetes-nginx-ingress-config/","publishdate":"2019-10-08T08:12:10+08:00","relpermalink":"/post/kubernetes-nginx-ingress-config/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 這邊改了一些大綱，原本的內容還有一些 kubernetes 的設定，以及 GCP 相關服務的介紹。但既然我們的主題是把東西搬上 k8s 的踩雷旅程，那我","tags":["kubernetes","nginx","ci","cd"],"title":"Kubernetes Nginx Ingress Controller Config","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Prometheus / Grafana (5)  GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 redis-ha 的監測數據 Node Exporter 與 kube metrics exporter 輸出 kafka 的監測數據 自幹 exporter    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 如果要透過 prometheus 來監控集群的運行狀況，有兩個 exporter 是必裝的，一個是把 node 狀態 export 出來的 node exporter，一個是把 kubernetes 集群狀態 export 出來的 kube state metrics exporter。\n Node Exporter 簡介 kube metrics exporter 安裝與設定  Node Exporter Node Exporter 是 prometheus 官方維護的一個子項目，主要在把類 unix 硬體 kernel 的 metrics 送出來。官方也支援 windows node 與 nvidia gpu metrics，可以說是功能強大。\n為了能夠監測 kubernetes node 的基礎設施狀態，通常都會使用 node exporter。\nnode exporter 安裝，我們在安裝 prometheus helm chart 時就一並安裝了。這邊看一下設定與運行。\nCollectors Node exporter 把不同位置收集到的不同類型的 metrics ，做成各自獨立的 colletor，使用者可以根據求需求來啟用或是不啟用 collector，完整的 collector 目錄 在這邊。\n如果有看我們第一部份的 ELK part，應該會覺得這裡的設定，跟 metricbeat 非常像，基本上這兩者做的事情是大同小異的，收集 metrics 來源都是同樣的類 unix 系統，只是往後送的目標不一樣 (雖然現在兩者都可以兼容混搭了)。如果有接觸過其他平台的 metrics collector，也會發現其實大家做的都差不多。\nTextfile Collector Prometheus 除了有 scrape 機制，讓 prometheus 去 exporter 撈資料外，還有另外一個機制，叫做 Pushgateway，這個我們在部屬 prometheus 時也部屬了一個。這邊簡單說明一下。\n經常性執行的服務(redis, kafka,\u0026hellip;)會一直運行，prometheus 透過這些服務的 metrics 取得 runtime metrics，作為監控資料。可是有一些 job 是暫時性的任務，例如果一個 batch job，這些服務不會有一直運行的 runtime metrics，也不會有 exporter。但這時又希望監控這些 job 的狀態，就可以使用 Pushgateway。\nPushgateway 的作用機制，就是指定收集的目標資料夾，需要監測的 batch job，只要把希望監測的資料，寫到該資料夾。Pushgateway 會依據寫入的資料，轉成 time series metrics，並且 export 出來。\n這種去 tail 指定目錄檔案，然後把 metrics 後送的機制，是否跟 filebeat 有一點類似? 只是 filebeat 一般取得資料後，會主動推送到 ELK 上，prometheus pushgateway 會暴露出 metrics 後，讓 prometheus server 來 scrape。\nPushgateway 也會在收集資料時打上需要的 label，方面後段處理資料。\nKubernetes State Metrics (Exporter) Node Exporter 將 kubernetes 集群底下的 Node 的硬體狀態，例如 cpu, memory, storage,\u0026hellip; expose 出來，然而我們在維運 kubernetes 還需要從 api server 獲得集群內部的資料，例如說 pod state, container state, endpoints, service, \u0026hellip;等，這邊可以使用 kube-state-metrics 來處理。\nkube-state-metrics 是 kubernetes 官方維護的專案，做的事情就是向 api server 詢問 kubernetes 的 state，例如 pod state, deployment state，然後跟 prometheus exporter 一，開放一個 http endpoint，讓需要的服務來 scrape metrics。\n工作雲裡也很單純，kubernetes api server 可以查詢 pod 當下的狀態，kube-state-metrics 則會把當下的狀態依照時間序，做成 time series 的 metrics，例如這個 pod 什麼時候是活著，什麼時候因為故障而 error。\nkube-state-metrics 預設的輸出格式是 plaintext，直接符合 Prometheus client endpoint 的格式\nDeployment 如果依照第一篇安裝 prometheus helm 的步驟，現在應該已經安裝完 kube-state-metrics 了。如果沒有安裝，也可以依照官方說明的基本範例安裝。\ngit clone git@github.com:kubernetes/kube-state-metrics.git cd kube-state-metrics kubectl apply -f examples/standard/*.yaml 安裝完可以看到\n$ kubectl get pods --selector 'app=prometheus,component=kube-state-metrics' NAME READY STATUS RESTARTS AGE prometheus-kube-state-metrics-85f6d75f8b-7vlkp 1/1 Running 0 201d $ kubectl get svc --selector 'app=prometheus,component=kube-state-metrics' NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE prometheus-kube-state-metrics ClusterIP None \u0026lt;none\u0026gt; 80/TCP 201d 我們可以透過 service 打到 pod 的 /metrics 來取得 metrics。\nkubectl exec -it busybox sh curl prometheus-kube-state-metrics:8080 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Kube Metrics Server\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Kube Metrics\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href='/metrics'\u0026gt;metrics\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href='/healthz'\u0026gt;healthz\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; curl prometheus-kube-state-metrics:8081 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Kube-State-Metrics Metrics Server\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Kube-State-Metrics Metrics\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href='/metrics'\u0026gt;metrics\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 這邊有兩套 metrics，一個是 kube-state-metrics 自己自我監測的 metrics，在 8081，另外一個才是 kube metrics，在 8080，兩個都要收，記得不要收錯了。\n$ curl prometheus-kube-state-metrics:8080/metrics 打下去就可以看到超多 metrics 。 Metrics 的清單與說明文件，有用到的 metrics 使用前都可以來查一下定義解釋。\n理論上不用每個 metrics 都 expose 出來，有需要可以把不會用到的 metrics 關一關，可以節省 kube-state-metrics 的 cpu 消耗。\nResource Recommendation kube-state-metrics 很貼心的還附上建議的資源分配\nAs a general rule, you should allocate 200MiB memory 0.1 cores For clusters of more than 100 nodes, allocate at least 2MiB memory per node 0.001 cores per node Scaling kube-state-metrics 還有提供 horizontal scaling 的解決方案，如果你的集群很大，node 數量已經讓 kube-state-metrics 無法負荷，也可以使用 sharding 的機制，把 metrics 的工作散布到多個 kube-state-metrics，再讓 prometheus 去收集統整。這部分我覺得很有趣，但還沒實作過，我把文件 放在這邊，有緣大德有時做過請來討論分享。\nDashboard metrics 抓出來，當然要開一下 dashboard，這邊使用的是這個kubernetes cluster，支援\n node exporter kube state metrics nginx ingress controller  三個願望一次滿足~\n小結  跑 kubernetes 務必使用這兩個 exporter kube-state-metrics 整理得很舒服，有時間可以多看看這個專案  ","date":1570407130,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570504579,"objectID":"829ba08c14e8f8b3f14ad4827984c1cf","permalink":"https://chechiachang.github.io/post/prometheus-kube-state-metrics-exporter/","publishdate":"2019-10-07T08:12:10+08:00","relpermalink":"/post/prometheus-kube-state-metrics-exporter/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Prometheus / Grafana (5) GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 redis-ha 的監測數據 Node Exporter 與 kube metrics exporter 輸出 kafka 的監測數據 自幹 exporter 由","tags":["kubernetes","redis","ci","cd"],"title":"Prometheus \u0026 Kubernetes State Metrics Exporter","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Prometheus / Grafana (5)  GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 redis-ha 的監測數據 自幹 exporter 輸出 kafka 的監測數據 輸出 kubernetes 的監測數據    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Exporter 工作原理簡介 Prometheus exporter library  Exporter workflow 上次講到 exporter 可以從服務端把運行資料抽出來，並開成 http endpoint，讓 prometheus 來 scrape metrics。那 exporter 本身是如何取得服務內部的 metrics 呢? 我們今天就稍微看一下。\nRedis Exporter 我們今天以 Redis Exporter 為例，研究一下外部的 exporter 是如何取得 redis 內部的 metrcs。\nRedis exporter 是用 golang 寫的一個小程式，總共算算才 1000 行，而且很多都是對 redis 內部 metrics 的清單，以及轉化成 prometheus metrics 的 tool functions，主要的邏輯非常簡單。我們簡單看一下源碼。\nCollect 是主要的收集邏輯，就是執行 scrapeRedisHost(ch) ，然後把收集到的資訊，使用 Prometheus Go Client Library 的工具將資料註冊成 prometheus metrics\nfunc (e *Exporter) Collect(ch chan\u0026lt;- prometheus.Metric) { e.Lock() defer e.Unlock() e.totalScrapes.Inc() if e.redisAddr != \u0026quot;\u0026quot; { start := time.Now().UnixNano() var up float64 = 1 // 從 host scrape 資料，然後塞進 channel streaming 出來。 if err := e.scrapeRedisHost(ch); err != nil { up = 0 e.registerConstMetricGauge(ch, \u0026quot;exporter_last_scrape_error\u0026quot;, 1.0, fmt.Sprintf(\u0026quot;%s\u0026quot;, err)) } else { e.registerConstMetricGauge(ch, \u0026quot;exporter_last_scrape_error\u0026quot;, 0, \u0026quot;\u0026quot;) } e.registerConstMetricGauge(ch, \u0026quot;up\u0026quot;, up) e.registerConstMetricGauge(ch, \u0026quot;exporter_last_scrape_duration_seconds\u0026quot;, float64(time.Now().UnixNano()-start)/1000000000) } ch \u0026lt;- e.totalScrapes ch \u0026lt;- e.scrapeDuration ch \u0026lt;- e.targetScrapeRequestErrors } scrapeRedisHost 內部的主要邏輯，又集中在執行 Info\n // 執行 info infoAll, err := redis.String(doRedisCmd(c, \u0026quot;INFO\u0026quot;, \u0026quot;ALL\u0026quot;)) if err != nil { infoAll, err = redis.String(doRedisCmd(c, \u0026quot;INFO\u0026quot;)) if err != nil { log.Errorf(\u0026quot;Redis INFO err: %s\u0026quot;, err) return err } } 也就是說當我們在 redis-cli 連入 redis 時，可以執行 Info command，取得 redis 內部的資訊，包含節點設店與狀態，集群設定，資料的統計數據等等。然後 exporter 這邊維護持續去向 redis 更新 info ，並且把 info data 轉化成 time series 的 metrcs，再透過 Prometheus Client promhttp 提供的 http endpoint library，變成 http endpoint。\n首先看一下 redis info command 的文件，這邊有說明 info 的 option ，以及 option 各自提供的資料，包括 server 狀態，賀戶端連線狀況，系統資源，複本狀態等等。我們也可以自己透過 info 取得資料。\n$ kubectl get po | grep redis redis-2-redis-ha-server-0 3/3 Running 0 11d redis-2-redis-ha-server-1 3/3 Running 0 11d redis-2-redis-ha-server-2 3/3 Running 0 11d $ kubectl exec -it redis-2-redis-ha-server-0 sh $ redis-cli -h haproxy-service -a REDIS_PASSWORD $ haproxy-service:6379\u0026gt; $ haproxy-service:6379\u0026gt; info server # Server redis_version:5.0.5 redis_git_sha1:00000000 redis_git_dirty:0 redis_build_id:4d072dc1c62d5672 redis_mode:standalone os:Linux 4.14.127+ x86_64 arch_bits:64 multiplexing_api:epoll atomicvar_api:atomic-builtin gcc_version:8.3.0 process_id:1 run_id:63a97460b7c3745577931dad406df9609c4e2464 tcp_port:6379 uptime_in_seconds:976082 uptime_in_days:11 ... $ haproxy-service:6379\u0026gt; info clients # Clients connected_clients:100 client_recent_max_input_buffer:2 client_recent_max_output_buffer:0 blocked_clients:1 Redis exporter 收集這些數據，透過 prometheus client library 把資料轉成 time series prometheus metrics。然後透過 library 放在 http enpoint 上。\n配合上次說過的 redis overview dashboard，可以直接在 Grafana 上使用\n這邊 dashboard 顯示幾個重要的 metrics\n Uptime Memory Usage，要設定用量太高自動報警 Command 的執行狀況，回應時間 訊息的流量，以及超出 time-to-live 的資料清除。  都是需要好好加上 alert 的核心 metrics\n貢獻 exporter 其他服務的 exporter 工作原理也相似，如果服務本身有內部的 metrics，可以透過 client command 或是 API 取得，exporter 的工作就只是轉成 time series data。\n如果有比較特殊的 metrics 沒有匯出，例如說自家的 metrics ，但又希望能放到 prometheus 上監測，例如每秒收到多少 request count，回應速度，錯誤訊息的統計\u0026hellip;\u0026hellip;等，這點也可以使用 client library 自幹 exporter 然後 expose http endpoint，這樣在 prometheus 上也可以看到自家產品的 metrics，非常好用。有機會我們來聊自幹 exporter。\n","date":1570320730,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570504579,"objectID":"cc33c22cd5350b13f33cd79c7acd0d9b","permalink":"https://chechiachang.github.io/post/prometheus-exporter-library-redis-exporter/","publishdate":"2019-10-06T08:12:10+08:00","relpermalink":"/post/prometheus-exporter-library-redis-exporter/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Prometheus / Grafana (5) GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 redis-ha 的監測數據 自幹 exporter 輸出 kafka 的監測數據 輸出 kubernetes 的監測數","tags":["kubernetes","redis","ci","cd"],"title":"Prometheus Exporter Library \u0026 Redis Exporter","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Prometheus / Grafana (5)  GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 kubernetes 的監測數據 輸出 redis-ha 的監測數據 輸出 kafka 的監測數據    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Prometheus Introduction Deploy Prometheus  Prometheus Introduction 生產環境與非生產環境，其中的一指標就是有沒有足夠完整的服務監測系統，這句話可以看出服務監測對於產品化是多麼重要。而監控資料 (metrics) 的收集與可視化工具其實非常多，例如上周介紹的 ELK Stack，這次我們要來介紹另外一個很多人使用的 prometheus。\nPromethues 在官網上提到 是一個 Monitoring system and time series database\n 可以收集高維度的資料 使用自己的 PromQL 做有效且精簡的資料查詢 內建資料瀏覽器，並且與 Grafana 高度整合 支援 sharding 與 federation，來達到水平擴展 有許多隨插即用的整合 exporter，例如 redis-exporter, kafka-exporter，kubernetes-exporter ，都可以直接取得資料 支援 alert，使用 PromQL 以及多功能的告警，可以設定精準的告警條件  與 ELK 做比較 基本上 Prometheus 跟 ELK 比，其實是很奇怪的一件事，但這也是最常被問的一個問題。兩者在本質上是完全不同的系統。\n Prometheus 是 based on time series database 的資料收集系統 ELK 是基於全文搜索引擎的資料查詢系統  是的，他們都能做 metrics 收集，在有限的尺度下，能達到一樣的效果。但這樣說的意思就等於是在說 mesos DC/OS 與 kubenetes 都能跑 container cluster 一樣，底下是完全不一樣的東西。\n兩者的差異使用上差非常多\n metrics 結構: ELK 借助全文搜索引擎，基本上送什麼資料近來都可以查找。Prometheus metrics 拉進來是 time series 的 key-value pairs。 維護同樣的 metrics，prometheus 的使用的儲存空間遠小於 elasticsearch prometheus 針對 time based 的搜尋做了很多優化，效能很高 Prometheus 對於記憶體與 cpu 的消耗也少很多 Elasticsearch 資源上很貴，是因為在處理大量 text log 的時候，他能夠用後段的 pipeline 處理內容，再進行交叉比對，可以從 text 裡面提取很多未事先定義的資料 Elasticsearch 的維護工作也比較複雜困難  如果要收集服務運行資料，可以直接選 prometheus。如果有收集 log 進行交叉比對，可以考慮 elk。\nHelm 我們這邊用 helm 部屬，之所以用 helm ，因為這是我想到最簡單的方法，能讓輕鬆擁有一套功能完整的 prometheus。所以我們先用。\n沒用過 helm 的大德可以參考 Helm Quickstart，先把 helm cli 與 kubernetes 上的 helm tiller 都設定好\nDeploy Prometheus 我把我的寶藏都放在這了https://github.com/chechiachang/prometheus-kubernetes\n下載下來的 .sh ，跑之前養成習慣貓一下\ncat install.sh #!/bin/bash HELM_NAME=prometheus-1 helm upgrade --install ${HELM_NAME} stable/prometheus \\ --namespace default \\ --values values-staging.yaml Configuration Prometheus Stable Chart\nvalues.yaml 很長，但其實各個元件設定是重複的,設定好各自的 image, replicas, service, topology 等等\nalertmanager: enabled: true kubeStateMetrics: enabled: true nodeExporter: enabled: true server: enabled: true pushgateway: enabled: true 底下有更多 runtime 的設定檔\n 定義好 global 的 scrape 間距，越短 metrics 維度就越精準 PersistenVolume 強謝建議開起來，維持歷史的資料  加上 storage usage 的 self monitoring（之後會講) 才不會滿出來 server 掛掉   server 的 scrapeConfigs 是 server 去收集的 job 設定。稍後再來細講。  server: global: ## How frequently to scrape targets by default ## scrape_interval: 10s ## How long until a scrape request times out ## scrape_timeout: 10s ## How frequently to evaluate rules ## evaluation_interval: 10s persistentVolume: ## If true, Prometheus server will create/use a Persistent Volume Claim ## If false, use emptyDir ## enabled: true ## Prometheus server data Persistent Volume access modes ## Must match those of existing PV or dynamic provisioner ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/ ## accessModes: - ReadWriteOnce ## Prometheus server data Persistent Volume annotations ## annotations: {} ## Prometheus server data Persistent Volume existing claim name ## Requires server.persistentVolume.enabled: true ## If defined, PVC must be created manually before volume will be bound existingClaim: \u0026quot;\u0026quot; ## Prometheus server data Persistent Volume mount root path ## mountPath: /data ## Prometheus server data Persistent Volume size ## size: 80Gi alertmanagerFiles: serverFiles: 部屬完看一下\nkubectl get pods --selector='app=prometheus' NAME READY STATUS RESTARTS AGE prometheus-alertmanager-694d6694c6-dvkwd 2/2 Running 0 8d prometheus-kube-state-metrics-85f6d75f8b-7vlkp 1/1 Running 0 8d prometheus-node-exporter-2mpjc 1/1 Running 0 8d prometheus-node-exporter-kg7fj 1/1 Running 0 51d prometheus-node-exporter-snnn5 1/1 Running 0 8d prometheus-pushgateway-5cdfb4979c-dnmjn 1/1 Running 0 8d prometheus-server-59b8b8ccb4-bplkx 2/2 Running 0 8d kubectl get services --selector='app=prometheus' NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE prometheus-alertmanager ClusterIP 10.15.241.66 \u0026lt;none\u0026gt; 80/TCP 197d prometheus-kube-state-metrics ClusterIP None \u0026lt;none\u0026gt; 80/TCP 197d prometheus-node-exporter ClusterIP None \u0026lt;none\u0026gt; 9100/TCP 197d prometheus-pushgateway ClusterIP 10.15.254.0 \u0026lt;none\u0026gt; 9091/TCP 197d prometheus-server ClusterIP 10.15.245.10 \u0026lt;none\u0026gt; 80/TCP 197d kubectl get endpoints --selector='app=prometheus' NAME ENDPOINTS AGE prometheus-alertmanager 10.12.6.220:9093 197d prometheus-kube-state-metrics 10.12.6.222:8080 197d prometheus-node-exporter 10.140.0.30:9100,10.140.0.9:9100,10.140.15.212:9100 197d prometheus-pushgateway 10.12.6.211:9091 197d prometheus-server 10.12.3.14:9090 197d 簡單說明一下\n prometheus-server 是主要的 api-server 以及 time series database alertmanager 負責告警工作 pushgateway 提供 client 端主動推送 metrics 給 server 的 endpoint kube-state-metrics 是開來收集 cluster wide 的 metrics, 像是 pods running counts, deployment ready count, total pods number 等等 metrics node-exporter 是 daemonsets, 把每一個 node 的 metrics, 像是 memory, cpu, disk\u0026hellip;等資料,收集出來  主要服務存取就是透過 prometheus-server\nAccess Prometheus server 除了直接 exec -it 進去 prometheus-server 以外，由於 prometheus 本身有提供 web portal, 所以我們這邊透過 port forwarding 打到本機上\nPROMETHEUS_POD_NAME=$(kc get po -n default --selector='app=prometheus,component=server' -o=jsonpath='{.items[0].metadata.name}') kubectl --namespace default port-forward ${PROMETHEUS_POD_NAME} 9090 透過 browser 就可以連入操作\nhttp://localhost:9090 也可以透過 HTTP API 用程式接入控制\nPrometheus Web Prometheus 本慎提供的 UI 其實功能就很強大\n 可以查到 (已經匯入存在) 的 metrics 可以在上面執行 PromQL 查詢語法 查詢運行的 status 查詢目前所有收集的 targets 的狀態,有收集器掛了也可以在這邊看到  小結  輕鬆自架 prometheus Prometheus 頁面有精簡，但是功能完整的 graph 製圖 但大家通常會使用 Grafana 搭配使用, 用過都說讚, 我們明天繼續  ","date":1570176730,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570504579,"objectID":"186b9887b0842c060fef6fc56e437d6b","permalink":"https://chechiachang.github.io/post/prometheus-deployment-on-kubernetes/","publishdate":"2019-10-04T16:12:10+08:00","relpermalink":"/post/prometheus-deployment-on-kubernetes/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Prometheus / Grafana (5) GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 kubernetes 的監測數據 輸出 redis-ha 的監測數據 輸出 kafka 的監測數據 由於","tags":["kubernetes","redis","ci","cd"],"title":"Prometheus Deployment on Kubernetes","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Prometheus / Grafana (5)  GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 kubernetes 的監測數據 輸出 redis-ha 的監測數據 輸出 kafka 的監測數據    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Grafana Introduction Deploy Grafana  Grafana Introduction 上偏我們簡單介紹了 Prometheus，prometheus 的 Web Portol 已經附上簡單的 Query 與 Graph 工具，但一般我們在使用時，還是會搭配 Grafana 來使用。\nGrafana 在官網上提到 是一個 Analytics system，可以協助了解運行資料，建立完整的 dashboard。\n 支援許多圖表，直線圖，長條圖，區域分析，基本上需要的都有 在圖表上定義 alter，並且主動告警，整合其他通訊軟體 對後端 data source 的整合，可以同時使用 ELK, prometheus, influxdb 等 30 多種的資料來源 有許多公開的 plugin 與 dashboard 可以匯入使用  總之功能強大，至於用起來的感覺，個人是非常推薦。如果有大得想要試玩看看，可以直接到 Grafana Live Demo 上面試玩\n 一般使用都會圍繞 dashboard 為核心，透過單一畫面，一覽目前使用者需要讀取的資料 左上角的下拉選單，可以選擇不同的 dashboards  與 Kibana 做比較 雖然大部分使用上，我們都會使用 ELK 一套，而 Prometheus + Grafana 另一套。但其實兩邊的 data source 都可以互接。例如 grafana 可以吃 elasticsearch 的 data source，而 kibana 有 prometheus module。\n我們這邊基於兩款前端分析工具，稍微做個比較，底層的 data source 差異這邊先不提。\n 都是開源: 兩者的開源社群都非常強大 兩者內建的 dashboard 都非常完整，而且不斷推出新功能 Log vs Metrics:  Kibana 的 metrics 也是像 log 一樣的 key value pairs，能夠 explore 未定義的 log Grafana 的 UI 專注於呈現 time series 的 metrics，並沒有提供 data 的欄位搜尋，而是使用語法 Query 來取得數據   Data source:  Grafana 可以收集各種不同的後端資料來源 ELK 主要核心還是 ELK stack，用其他 Module 輔助其他資料源    Deploy Grafana 我把我的寶藏都放在這了https://github.com/chechiachang/prometheus-kubernetes\n下載下來的 .sh ，跑之前養成習慣貓一下\ncd grafana cat install.sh #!/bin/bash HELM_NAME=grafana-1 helm upgrade --install grafana stable/grafana \\ --namespace default \\ --values values-staging.yaml Helm 我們這邊用 helm 部屬，Grafana Stable Chart\nConfiguration 簡單看一下設定檔\nvim values-staging.yaml replicas: 1 deploymentStrategy: RollingUpdate Grafana 是支援 Grafana HA ，其實也非常簡單，就是把 grafana 本身的 dashboard database 從每個 grafana 一台 SQLite，變成外部統一的 MySQL，統一讀取後端資料，前端就可水平擴展。\nreadinessProbe: httpGet: path: /api/health port: 3000 livenessProbe: httpGet: path: /api/health port: 3000 initialDelaySeconds: 60 timeoutSeconds: 30 failureThreshold: 10 image: repository: grafana/grafana tag: 6.0.0 pullPolicy: IfNotPresent ## Optionally specify an array of imagePullSecrets. ## Secrets must be manually created in the namespace. ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/ ## # pullSecrets: # - myRegistrKeySecretName 一些 Pod 的基本配置， health check 使用內建的 api，有需要也可以直接打 api\nsecurityContext: runAsUser: 472 fsGroup: 472 extraConfigmapMounts: [] # - name: certs-configmap # mountPath: /etc/grafana/ssl/ # configMap: certs-configmap # readOnly: true 有要開外部 ingress，需要 ssl 的話可以從這邊掛進去\n## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service). ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it. ## ref: http://kubernetes.io/docs/user-guide/services/ ## service: type: LoadBalancer port: 80 targetPort: 3000 # targetPort: 4181 To be used with a proxy extraContainer annotations: {} labels: {} ingress: enabled: false annotations: {} # kubernetes.io/ingress.class: nginx # kubernetes.io/tls-acme: \u0026quot;true\u0026quot; labels: {} path: / hosts: - chart-example.local tls: [] # - secretName: chart-example-tls # hosts: # - chart-example.local 這邊可以開 service load balancer, 以及 ingress，看實際使用的需求\npersistence: enabled: true initChownData: true # storageClassName: default accessModes: - ReadWriteOnce size: 10Gi # annotations: {} # subPath: \u0026quot;\u0026quot; # existingClaim: Persistent Volume 作為本地儲存建議都開起來，\n# Administrator credentials when not using an existing secret (see below) adminUser: admin # adminPassword: strongpassword # Use an existing secret for the admin user. admin: existingSecret: \u0026quot;\u0026quot; userKey: admin-user passwordKey: admin-password 帳號密碼建議使用 secret 掛進去\ndatasources: {} # datasources.yaml: # apiVersion: 1 # datasources: # - name: Prometheus # type: prometheus # url: http://prometheus-prometheus-server # access: proxy # isDefault: true ## Configure grafana dashboard providers ## ref: http://docs.grafana.org/administration/provisioning/#dashboards ## ## `path` must be /var/lib/grafana/dashboards/\u0026lt;provider_name\u0026gt; ## dashboardProviders: {} # dashboardproviders.yaml: # apiVersion: 1 # providers: # - name: 'default' # orgId: 1 # folder: '' # type: file # disableDeletion: false # editable: true # options: # path: /var/lib/grafana/dashboards/default ## Configure grafana dashboard to import ## NOTE: To use dashboards you must also enable/configure dashboardProviders ## ref: https://grafana.com/dashboards ## ## dashboards per provider, use provider name as key. ## dashboards: {} # default: # some-dashboard: # json: | # $RAW_JSON # custom-dashboard: # file: dashboards/custom-dashboard.json # prometheus-stats: # gnetId: 2 # revision: 2 # datasource: Prometheus # local-dashboard: # url: https://example.com/repository/test.json # local-dashboard-base64: # url: https://example.com/repository/test-b64.json # b64content: true Data source, Dashboard 想要直接載入，可以在這邊設定，或是 grafana 起來後，透過 Web UI 進去新增也可以\n## Grafana's primary configuration ## NOTE: values in map will be converted to ini format ## ref: http://docs.grafana.org/installation/configuration/ ## grafana.ini: paths: data: /var/lib/grafana/data logs: /var/log/grafana plugins: /var/lib/grafana/plugins provisioning: /etc/grafana/provisioning analytics: check_for_updates: true log: mode: console grafana_net: url: https://grafana.net 然後是 grafana.ini 核心 runtime 設定，更多設定可以參考官方文件\nDeployment 部屬完看一下\nkubectl get po --selector='app=grafana' Access 如果沒有透過 service load balancer 打出來，一樣可以使用 kubectl 做 port forwarding，權限就是 context 的權限，沒有 cluster context 的使用者就會進步來\nGRAFANA_POD_NAME=$(kc get po -n default --selector='app=grafana' -o=jsonpath='{.items[0].metadata.name}') kubectl --namespace default port-forward ${GRAFANA_POD_NAME} 3000 http://localhost:3000 由於我們透過 service load balancer，gcp 會在外部幫忙架一個 load balancer， 可以直接透過 load balancer ip 存取，如果想設定 dns，指向這個 ip 後記得去調整 grafana 的 server hostname。\n使用 secret 的密碼登入，username: grafana，這個是系統管理員\nkubectl get secret --namespace default grafana -o jsonpath=\u0026quot;{.data.admin-password}\u0026quot; | base64 --decode ; echo Configuration 近來畫面後先到左邊的Configuration 調整\n 產生新的 user org 與 user，把 admin 權限控制在需要的人手上 把 prometheus data source 加進來，就可以直接看到 prometheus 裡面的資料。 切換到非管理員的 user 繼續操作  Import Dashboard Grafana 網站上已經有超多設置好的 Dashboard 可以直接 import，大部分的服務都已經有別人幫我們把視覺畫圖表拉好，使用社群主流的 exporter 的話，參數直接接好。我們匯入後再進行簡單的客製化調整即可。\n我們鐵人賽有用到的服務，都已經有 dashboard\n kubernetes Cluster: 6417  https://grafana.com/dashboards/6417   Kafka Exporter Overview: 7589  https://grafana.com/dashboards/7589   Prometheus Redis: 763  https://grafana.com/dashboards/763   Kubernetes Deployment Statefulset Daemonset metrics: 8588  https://grafana.com/dashboards/8588   Haproxy Metrics Servers: 367  https://grafana.com/dashboards/367   Go to grafana lab to find more dashboards  Export Dashboard dashboard 會依照登入使用者的需求做調整，每個腳色需要看到的圖表都不同，基本上讓各個腳色都能一眼看到所需的表格即可\n自己的調整過的 dashboard 也可以匯出分享\n小結 到這邊就可以正常使用 grafana了，資料來源的 exporter 我們會搭配前幾周分享過的服務，一起來講\n","date":1570147930,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570504579,"objectID":"67579dc1af760b6a50c4faff1e99b97e","permalink":"https://chechiachang.github.io/post/prometheus-deploy-grafana/","publishdate":"2019-10-04T08:12:10+08:00","relpermalink":"/post/prometheus-deploy-grafana/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Prometheus / Grafana (5) GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 kubernetes 的監測數據 輸出 redis-ha 的監測數據 輸出 kafka 的監測數據 由於","tags":["kubernetes","redis","ci","cd"],"title":"Prometheus Deploy Grafana","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Prometheus / Grafana (5)  GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 kubernetes 的監測數據 輸出 redis-ha 的監測數據 輸出 kafka 的監測數據    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Prometheus scrape scrape_configs Node exporter  Scrape Prometheus 收集 metrics 的方式，是從被監測的目標的 http endpoints 收集 (scrape) metrics，目標服務有提供 export metrics 的 endpoint 的話，稱作 exporter。例如 kafka-exporter 就會收集 kafka 運行的 metrics，變成 http endpoint instance，prometheus 從 instance 上面收集資料。\nPromethesu 自己也是也提供 metrics endpoint，並且自己透過 scrape 自己的 metrics endpoint 來取得 self-monitoring 的 metrics。把自己當作外部服務監測。下面的設定就是直接透過 http://localhost:9090/metrics 取得。\nglobal: scrape_interval: 15s # By default, scrape targets every 15 seconds. # Attach these labels to any time series or alerts when communicating with # external systems (federation, remote storage, Alertmanager). external_labels: monitor: 'codelab-monitor' # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=\u0026lt;job_name\u0026gt;` to any timeseries scraped from this config. - job_name: 'prometheus' # Override the global default and scrape targets from this job every 5 seconds. scrape_interval: 5s static_configs: - targets: ['localhost:9090'] 透過 Grafana -\u0026gt; explore 就可以看到 Prometheus 的 metrics\n而使用 metrics 時最好先查到說明文件，確定 metrics 的定義與計算方法，才可以有效的製圖。關於 Prometheus Exporter 的 metrics 說明 可以到這裡來找。\nDashboard 收集到 metrics 之後就可以在 prometheus 中 query，但一般使用不會一直跑進來下 query，而是會直接搭配 dashboard 製圖呈現，讓資料一覽無遺。\n例如 prometheus 自身的 metrics 也已經有搭配好的 Prometheus overview dashboard 可以使用。\n使用方法非常簡單，直接透過 Grafana import dashboard，裡面就把重要的 prometheus metrics 都放在 dashboard 上了。不能更方便了。\nExporters Prometheus 支援超級多 exporter，包含 prometheus 自身直接維護的 exporter，還有非常多外部服務友也開源的 exporter 可以使用，清單可以到這裡看\n有希望自己公司的服務，也使用 prometheus\nNode Exporter prometheus/node_exporter 是 Prometheus 直接維護的 project，主要用途就是將 node / vm 的運行 metrics export 出來。有點類似 ELK 的 metricbeat。\n我們這邊是在 kubernetes 上執行，所以直接做成 daemonsets 在 k8s 上跑，部屬方面在 deploy prometheus-server 的 helm chart 中，就已經附帶整合，部屬到每一台 node 上。\n如果是在 kubernetes 外的環境，例如說 on premise server，或是 gcp instance，希望自己部屬 node exporter 的話，可以參考這篇教學文章。\n我們這邊可以看一下 config，以及 job 定義。\nvim values-staging.yaml # Enable nodeExporter nodeExporter: create: true prometheus.yml: rule_files: - /etc/config/rules - /etc/config/alerts scrape_configs: # Add kubernetes node job - job_name: 'kubernetes-nodes' # Default to scraping over https. If required, just disable this or change to # `http`. scheme: https # This TLS \u0026amp; bearer token file config is used to connect to the actual scrape # endpoints for cluster components. This is separate to discovery auth # configuration because discovery \u0026amp; scraping are two separate concerns in # Prometheus. The discovery auth config is automatic if Prometheus runs inside # the cluster. Otherwise, more config options have to be provided within the # \u0026lt;kubernetes_sd_config\u0026gt;. tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt # If your node certificates are self-signed or use a different CA to the # master CA, then disable certificate verification below. Note that # certificate verification is an integral part of a secure infrastructure # so this should only be disabled in a controlled environment. You can # disable certificate verification by uncommenting the line below. # insecure_skip_verify: true bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token kubernetes_sd_configs: - role: node relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/$1/proxy/metrics kubernetes_sd_config: 可以透過 kubernetes API 來取得 scrape target，以這邊的設定，是使用 node role 去集群取得 node，並且每一台 node 都當成一個 target，這樣就不用把所有 node 都手動加到 job 的 instance list 裡面。\n從 node role 取得的 instance 會使用 ip 標註或是 hostname 標註。node role 有提供 node 範圍的 meta labels，例如 __meta_kubernetes_node_name, _meta_kubernetes_node_address 等等，方便查找整理資料。\nrelabel_configs: 針對資料做額外標記，方便之後在 grafana 上面依據需求 query。\n","date":1570147930,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570504579,"objectID":"7f6aa0a7ad98beaecd30f2fbc0b51037","permalink":"https://chechiachang.github.io/post/prometheus-scrape/","publishdate":"2019-10-04T08:12:10+08:00","relpermalink":"/post/prometheus-scrape/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Prometheus / Grafana (5) GKE 上自架 Prometheus / Grafana GKE 上自架 Grafana 與設定 使用 exporter 監測 GKE 上的各項服務 輸出 kubernetes 的監測數據 輸出 redis-ha 的監測數據 輸出 kafka 的監測數據 由於","tags":["kubernetes","redis","ci","cd"],"title":"Prometheus Deploy Grafana","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n 在 GKE 上部署 Redis HA  使用 helm 部署 redis-ha Redis HA with sentinel Redis HA with HAproxy 集群內部的 HA 設定，網路設定 應用端的基本範例，效能調校 在 GKE 上維運 redis    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  redis-sentinel  redis sentinel 與 redis 使用相容的 api，直接使用 redis-cli 透過 26479 port 連入，可以連到 sentinel，透過 sentinel 可以取得 redis master 的狀態與連線設定。\nredis-cli -h redis-redis-ha -p 26479 上篇我們的 redis-ha 安裝完變這樣\n$ kubectl get po | grep redis NAME READY STATUS RESTARTS AGE redis-1-redis-ha-server-0 3/3 Running 0 3d4h redis-1-redis-ha-server-1 3/3 Running 0 3d5h redis-1-redis-ha-server-2 3/3 Running 0 3d4h 有三個 Pod，裡面都是一個 redis, sentinel, 跟 exporter，這篇文章會專注講 sentinel 的功能與機制\nRedis Sentinel redis-sentinel 為 Redis 提供高可用服務，實務上可以透過 sentinel 在錯誤發生時，自動進行 failover。除此之外 sentinel 也提供監測，通知，與 redis 的設定。\n Monitoring: 持續檢測 master 與 slave instances 的狀態 Notification: 有事件發生可以發出通知 Automatic failover: 如果 master 失效自動啟動 failover 程序，將一個 slave 指排為 master，並設定其他 slave 使用新的 master Configuration provider: 為客戶端提供 service discovery，客戶可以通過 sentinel 取得 master 的連線資料。  Distributed Sentinel 本身是一個分散式系統，如我們的範例所示，三個 Pod 立面個含有一個 sentinel，組成 3 個 instace 的 sentinel cluster。\n 錯誤檢測是由多個 sentinel 判定，要有多個 sentinel 都接收 master 已失效的訊息，才會判定成失效。這樣可以降低 false positive 的機率。 分散讓 sentinel 本身也具備高可用性，可以承受一定程度的錯誤。用來 fail over 的系統，不能因為自身的單點錯誤(single point failure) 而倒是整個 redis 失效。  Fundamental  一個耐用的 sentinel 需要至少三個 instance 最好把 instance 分散在多個獨立的隔離區域，意思是說，三個不會放在同一台機器上，或是放在同一個區域內，因為一個區域網路故障就全死。 app 使用 sentinel 的話，客戶端要支援 有時常測試的 HA 環境，才是有效的 HA  Configuration Sentinel specific configuration options 在上篇我們跳過 sentinel 的設定，這邊說明一下\nsentinel: port: 26379 quorum: 2 config: ## Additional sentinel conf options can be added below. Only options that ## are expressed in the format simialar to 'sentinel xxx mymaster xxx' will ## be properly templated. ## For available options see http://download.redis.io/redis-stable/sentinel.conf down-after-milliseconds: 10000 ## Failover timeout value in milliseconds failover-timeout: 180000 parallel-syncs: 5 ## Custom sentinel.conf files used to override default settings. If this file is ## specified then the sentinel.config above will be ignored. # customConfig: |- # Define configuration here resources: {} # requests: # memory: 200Mi # cpu: 100m # limits: # memory: 200Mi Quorum  quorum 是每次確定 master 失效時，需要達成共識的 sentinel 數量。 Quorum 使用在錯誤檢測，確定錯誤真的發生後，sentinel 會以多數決(majority) 的方式選出 sentinel leader，讓 leader 處理 failover。  以我們的例子為例，總共三個，確認 master 死掉只要兩個 sentinel 達成共識即可啟動 failover 程序。可以直接測試一下。\nkubectl logs -f redis-1-redis-ha-server-0 kubectl delete po redis-1-redis-ha-server-1 log 一個 Pod ，然後直接把另一個 Pod 幹掉 這樣會有 1/3 的機率砍到 master，砍中的話可以看到 redis failover ，選出新的 master 的過程。\n這邊要注意，由於我們的 sentinel 與 redis 是放在同樣一個 Pod，幹掉的同時也殺了一個 sentinel，只剩 2 個，剛好達成共識。如果 quorum 是三，就要等第三個 sentinel 回來才能取得 quorum。\nsentinel 與 redis 的配置位置，之後的 topology 會討論。\nConfigurations  down-after-milliseconds: 超過多少時間沒回應 ping 或正確回應，才覺得 master 壞了 parallel-syncs: failover 時，要重新與新 master sync 的 slave 數量。數量越多 sync 時間就越久，數量少就有較多 slave 沒 sync 資料，可能會讓 client read 到舊的資料  雖然 sync 是 non-blocking ，但在 sync 大筆資料時，slave 可能會沒有回應。設定為 1 的話，最多只會有一個 slave 下線 sync。    這些參數也可以透過 redis-cli 直接連入更改，但我們是在 kubernetes 上跑，臨時的更改不易保存，所以盡可能把這些configurations 放在 configmap 裡面。\nSentinel command 6379 port 連入 redis，26379 連入 redis sentinel。都是使用 redis-cli，兩者兼容的 protocol。\n# 使用 kubectl 連入，多個 container 要明確指出連入的 container kubectl exec -it redis-1-redis-ha-server-0 --container redis sh redis-cli -h redis-redis-ha -p 26479 # 近來先 ping 一下 $ ping PONG # 列出所有 master 的資訊，以及設定資訊 sentinel master redis-2-redis-ha:26379\u0026gt; sentinel masters 1) 1) \u0026quot;name\u0026quot; 2) \u0026quot;mymaster\u0026quot; 3) \u0026quot;ip\u0026quot; 4) \u0026quot;10.15.242.245\u0026quot; 5) \u0026quot;port\u0026quot; 6) \u0026quot;6379\u0026quot; 7) \u0026quot;runid\u0026quot; 8) \u0026quot;63a97460b7c3745577931dad406df9609c4e2464\u0026quot; 9) \u0026quot;flags\u0026quot; 10) \u0026quot;master\u0026quot; 11) \u0026quot;link-pending-commands\u0026quot; 12) \u0026quot;0\u0026quot; 13) \u0026quot;link-refcount\u0026quot; 14) \u0026quot;1\u0026quot; 15) \u0026quot;last-ping-sent\u0026quot; 16) \u0026quot;0\u0026quot; 17) \u0026quot;last-ok-ping-reply\u0026quot; 18) \u0026quot;479\u0026quot; 19) \u0026quot;last-ping-reply\u0026quot; 20) \u0026quot;479\u0026quot; 21) \u0026quot;down-after-milliseconds\u0026quot; 22) \u0026quot;5000\u0026quot; 23) \u0026quot;info-refresh\u0026quot; 24) \u0026quot;5756\u0026quot; 25) \u0026quot;role-reported\u0026quot; 26) \u0026quot;master\u0026quot; 27) \u0026quot;role-reported-time\u0026quot; 28) \u0026quot;348144787\u0026quot; 29) \u0026quot;config-epoch\u0026quot; 30) \u0026quot;13\u0026quot; 31) \u0026quot;num-slaves\u0026quot; 32) \u0026quot;2\u0026quot; 33) \u0026quot;num-other-sentinels\u0026quot; 34) \u0026quot;2\u0026quot; 35) \u0026quot;quorum\u0026quot; 36) \u0026quot;2\u0026quot; 37) \u0026quot;failover-timeout\u0026quot; 38) \u0026quot;180000\u0026quot; 39) \u0026quot;parallel-syncs\u0026quot; 40) \u0026quot;5\u0026quot; # 取得集群中的 master 訊息，目前有一個 master $ sentinel master mymaster # 取得集群中的 slaves 訊息，目前有兩個 slave $ sentinel slaves mymaster # 取得集群中的 master 訊息 $ sentinel sentinels mymaster # 檢查 sentinel 的 quorum $ sentinel ckquorum mymaster OK 3 usable Sentinels. Quorum and failover authorization can be reached # 強迫觸發一次 failover sentinel failover mymaster Sentinel Connection 有支援的客戶端設定，以Golang FZambia/sentinel 為例，透過 sentinel 取得 redis-pool。\n# 使用獨立的 pod service 連入 sentinel，協助彼此識別 sntnl := \u0026amp;sentinel.Sentinel{ Addrs: []string{\u0026quot;redis-2-redis-ha-announce-0:26379\u0026quot;, \u0026quot;redis-2-redis-ha-announce-0:26379\u0026quot;, \u0026quot;redis-2-redis-ha-announce-0:26379\u0026quot;}, MasterName: \u0026quot;mymaster\u0026quot;, Dial: func(addr string) (redis.Conn, error) { timeout := 500 * time.Millisecond c, err := redis.DialTimeout(\u0026quot;tcp\u0026quot;, addr, timeout, timeout, timeout) if err != nil { return nil, err } return c, nil }, } # 產生 connection pool return \u0026amp;redis.Pool{ MaxIdle: 3, MaxActive: 64, Wait: true, IdleTimeout: 240 * time.Second, Dial: func() (redis.Conn, error) { # 透過 sentinel 取得 master address，如果 master 死了，再執行可以拿到新的 master masterAddr, err := sntnl.MasterAddr() if err != nil { return nil, err } c, err := redis.Dial(\u0026quot;tcp\u0026quot;, masterAddr) if err != nil { return nil, err } return c, nil }, TestOnBorrow: func(c redis.Conn, t time.Time) error { if !sentinel.TestRole(c, \u0026quot;master\u0026quot;) { return errors.New(\u0026quot;Role check failed\u0026quot;) } else { return nil } }, } 這邊要注意，客戶端 (golang) 處理 connection 的 exception，要記得重新執行 sntnl.MasterAddr() 來取得 failover 後新指派的 master。\nClient 測試 寫一個 golang redis 的 client 跑起來。這個部分我們在 kafka的章節做過類似的事情，可以簡單湊一個玩玩。\n延伸問題 使用上面的 golang 範例，確實是能透過 sentinel 取得 master，再向 master 取得連線。但這邊有兩個問題\n 客戶端需要支援 sentinel 客戶端要感知 sentinel 的位址連線，才能知道所有 sentinel 的位置，設定又產生耦合  不能彈性的調度 sentinel，如果需要增加或是減少 sentinel，客戶端需要重新設定 雖然 sentinel 有 HA，可是客戶端對 sentinel 的設定沒有 HA，萬一已知的所有 sentinel 掛了就全掛    有沒有更優雅的方式使用 sentinel，我們下篇會討論使用 HAProxy 來完成\n","date":1569748478,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570101852,"objectID":"3b7392f1fc5e928f13bd9525f174bf1f","permalink":"https://chechiachang.github.io/post/redis-ha-sentinel/","publishdate":"2019-09-29T17:14:38+08:00","relpermalink":"/post/redis-ha-sentinel/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 在 GKE 上部署 Redis HA 使用 helm 部署 redis-ha Redis HA with sentinel Redis HA with HAproxy 集群內部的 HA 設定，網路設定 應用端的基本範例，效能調校 在 GKE 上維運 redis 由於我比","tags":[],"title":"Redis Ha Sentinel","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n 在 GKE 上部署 Redis HA  使用 helm 部署 redis-ha Redis HA with sentinel Redis HA with HAproxy 集群內部的 HA 設定，網路設定 應用端的基本範例，效能調校 在 GKE 上維運 redis    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n今天的文會比較短，因為我早上在綠島已經水肺潛水潛了三趟，有點累哈哈\n Redis introduction Redis 是常用的 in-memory 的資料儲存庫，可作為資料庫，快取，message broker 使用，都非常好用。Redis 官方支援 high availability，使用的是 redis-sentinel ，今天我們就來部署一個有完整 sentinel 的 redis-ha。\nRedis 另外提供了一個 solution Redis cluster (multiple writer solution)，作為增加資料輸出帶寬，與增加資料耐用度的分散式解決方案，與 redis sentinel 所處理的 ha 問題是不相同的。有機會我們也來談。\nDeploy 我把我的寶藏都在這了https://github.com/chechiachang/go-redis-ha\n下載下來的 .sh ，跑之前養成習慣貓一下\ncat install.sh #!/bin/bash HELM_NAME=redis-1 # Stable: chart version: redis-ha-3.6.1\tapp version: 5.0.5 helm upgrade --install ${HELM_NAME} stable/redis-ha --version 3.6.1 -f values-staging.yaml Helm 我們這邊用 helm 部屬，之所以用 helm ，因為這是我想到最簡單的方法，能讓輕鬆擁有一套功能完整的 kafka。所以我們先用。\n沒用過 helm 的大德可以參考 Helm Quickstart，先把 helm cli 與 kubernetes 上的 helm tiller 都設定好\nRedis-ha helm chart github\nInstall 這邊是用 upgrade \u0026ndash;install，已安裝就 upgrade，沒安裝就 install，之後可以用這個指令升版\nhelm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml values-staging 完整的 values.yaml 在 helm chart github\nimage: repository: redis tag: 5.0.5-alpine pullPolicy: IfNotPresent ## replicas number for each component replicas: 3 servers: serviceType: ClusterIP # [ClusterIP|LoadBalancer] annotations: {} auth: true ## Redis password ## Defaults to a random 10-character alphanumeric string if not set and auth is true ## ref: https://github.com/kubernetes/charts/blob/master/stable/redis-ha/templates/redis-auth-secret.yaml ## #redisPassword: ## Use existing secret containing key `authKey` (ignores redisPassword) existingSecret: redis-credentials ## Defines the key holding the redis password in existing secret. authKey: auth 這邊有準備 secret/redis-credentials 裡面的 key[auth] 存放 redis 密碼，要連入的 pod 需要掛載 secret 並把 auth 匯入。\nVersion 這邊使用的版本：\n chart version: redis-ha-3.6.1 app version: 5.0.5 Redis Image: redis:5.0.5-alpine Redis exporter: oliver006/redis_exporter:v0.31.0  安裝完變這樣\n$ kubectl get po | grep redis NAME READY STATUS RESTARTS AGE redis-1-redis-ha-server-0 3/3 Running 0 3d4h redis-1-redis-ha-server-1 3/3 Running 0 3d5h redis-1-redis-ha-server-2 3/3 Running 0 3d4h describe pod 可以看到裡面有三個 container\n redis: 主要的 redis sentinel: 維護 redis 可用性的服務，會監測 redis 狀態，並把連線指派到新的 master redis-exporter: 把 redis 的運行資料(metrics) 送出到 promethues  Networking Service\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR redis-redis-ha ClusterIP None \u0026lt;none\u0026gt; 6379/TCP,26379/TCP,9121/TCP 46m app=redis-ha,release=redis redis-redis-ha-announce-0 ClusterIP 10.3.243.81 \u0026lt;none\u0026gt; 6379/TCP,26379/TCP 46m app=redis-ha,release=redis,statefulset.kubernetes.io/pod-name=redis-redis-ha-server-0 redis-redis-ha-announce-1 ClusterIP 10.3.250.151 \u0026lt;none\u0026gt; 6379/TCP,26379/TCP 46m app=redis-ha,release=redis,statefulset.kubernetes.io/pod-name=redis-redis-ha-server-1 redis-redis-ha-announce-2 ClusterIP 10.3.242.59 \u0026lt;none\u0026gt; 6379/TCP,26379/TCP 46m app=redis-ha,release=redis,statefulset.kubernetes.io/pod-name=redis-redis-ha-server-2 nslookup redis-redis-ha Name: redis-redis-ha Address 1: 10.0.0.42 redis-redis-ha-server-1.redis-redis-ha.default.svc.cluster.local Address 2: 10.0.1.13 redis-redis-ha-server-2.redis-redis-ha.default.svc.cluster.local Address 3: 10.0.2.8 redis-redis-ha-server-0.redis-redis-ha.default.svc.cluster.local Name: redis-redis-ha-server-1.redis-redis-ha.default.svc.cluster.local Address 1: 10.0.0.43 redis-redis-ha-server-1.redis-redis-ha.default.svc.cluster.local 連線 所有連線透過 redis-redis-ha service 連入\nredis-cli -h redis-redis-ha -p 6479 -a \u0026lt;password\u0026gt; 或是直接指定 redis instance 連入。\nredis-cli -h redis-redis-ha-announce-0 -p 6479 -a \u0026lt;password\u0026gt; redis-cli -h redis-redis-ha-announce-1 -p 6479 -a \u0026lt;password\u0026gt; redis-cli -h redis-redis-ha-announce-2 -p 6479 -a \u0026lt;password\u0026gt; 但上面兩者會有問題，redis 只有 master 是 writable，連入 slave 會變成 readonly，如果沒有任何 probe 機智，那就是每次連線時有 2/3 機率會連到 readonly 的 redis slave 。所以連線前要先找到正確的 master\nSentinel Sentinel 是 redis 官方提供的 HA solution，主要負責監控 redis 的狀態，並控制 redis master 的 failover 機制，一但超過 threshold，sentinel 就會把 master failover 到其他 slave 上。並把 master 連線指向新 master。\nredis sentinel 與 redis 使用相容的 api，直接使用 redis-cli 透過 26479 port 連入，可以連到 sentinel，透過 sentinel 可以取得 redis master 的狀態與連線設定。\nredis-cli -h redis-redis-ha -p 26479 App 端支援 sentinel 需要有支援 sentinel 的 redis client library，例如: python redis-py 有支援 sentinel 的設定。\n這邊就會比較麻煩，因為不是所有的語言對 redis-sentinel 的支援性都夠好，或是沒辦法設定到妮旺使用的情境上。\n如果你找得到支援性良好的套件，恭喜你。不然就像我們公司，與我們的需求有衝突，只好自己 fork library。\n所以說直接使用有支援 redis-sentinel 可能會遇到一些問題。那也沒有更好的解決方法？我們下次說明使用 HAproxy 的高可用方案。\nBenchmark 部署完後，可以跑一下 benchmark，看看在 kubernetes 上運行的效能有沒有符合需求。\nRun a redis pod with sleep command NOTE: CPU usage (rapidly) increasing during benchmark DON'T DO THIS on PRODUCTION\nkubectl run test-redis --image redis:5.0.5-alpine --command sleep 36000 kubectl exec -it test-redis-xxxxxxxxx-xxxxx sh Benchmark\nredis-benchmark --help redis-benchmark \\ -h haproxy-service.local \\ -p 6379 \\ -c 100 \\ -d 30 \\ -n 1000000 ====== MSET (10 keys) ====== 100000 requests completed in 2.32 seconds 50 parallel clients 3 bytes payload keep alive: 1 85.37% \u0026lt;= 1 milliseconds 98.06% \u0026lt;= 2 milliseconds 99.18% \u0026lt;= 3 milliseconds 99.62% \u0026lt;= 4 milliseconds 99.93% \u0026lt;= 5 milliseconds 100.00% \u0026lt;= 5 milliseconds 43066.32 requests per second ","date":1569654863,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570101852,"objectID":"e90d5e88607730f7f1339cca8c3be585","permalink":"https://chechiachang.github.io/post/redis-ha-deployment/","publishdate":"2019-09-28T15:14:23+08:00","relpermalink":"/post/redis-ha-deployment/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 在 GKE 上部署 Redis HA 使用 helm 部署 redis-ha Redis HA with sentinel Redis HA with HAproxy 集群內部的 HA 設定，網路設定 應用端的基本範例，效能調校 在 GKE 上維運 redis 由於我比","tags":[],"title":"Redis Ha Deployment","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continuerd\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Kafka's quorum set  Kafka 的 quorum set 這篇跟上篇其實再講 quorum，應該連在一起，但礙於篇幅（以及我個人的時間ＱＱ）拆成了兩篇。各位有需要可以回顧一下。\nReplicated log commit decision 上篇提到了兩個維持 replicated log 的 model\n 有更新進來，leader 等待所有 follower 都 ack，才 commit。 有更新進來，leader 取得所有 node (2n+1) 中的多數 node 回應(n+1)，就 commit。而 leader election 時，必須比對 node 上的 log，決定誰是 electable leader(有最完整 log 的 follower)，這樣稱為共識(Quorum)  前者的好處是，所有 node 都有完整的 log 後，leader 才會 commit，回覆給客戶 commit 的資訊，所以每個 follower 都是 leader electable 人人都可以當 leader，leader 一故障就選擇新的 leader 即可。壞處就是 leader 在等待所有 follow ack 的時間會非常久，而且時間複雜度可能會隨 cluster size scale，或是變成要等最慢的 node 回應(worst case)。這樣在 node 數量多的時候非常不經濟。\n後者的好處是，n+1 node ack 後就 commit，leader commit 的速度是由前段班的回應速度決定。leader 出現故障，仍能維持多數 node 的資料正確。\nLeader election decision Leader Election 的問題也是類似，如果選擇 leader 時，所有的 follower 都比對過 log，這樣花的時間會很久。要知道，這是個分散式的架構，沒有中心化的 controller，也就是 follower 彼此需要交互比對。而且時間隨 follower 數量 scale。 造成topic partition 沒有 leader 的時間(downtime)太長。\n如果使用 majority，也就是當 leader 死掉，產生新的 leader election 時，只詢問 n+1 個 follower ，然後從選出 log 最完整的人當 leader， 這樣過程中每個 follower 彼此比對，確認，然後才選出 leader，確認 leader 的結果，所花的時間會大幅縮短。\n當然，這麼做產生的 tradeoff，就是萬一取得多數決的 n+1 個 follower 裡面，沒有最完整的 log ，那從裡頭選出來的 leader 自然也沒有完整 log，選出來的 leader 就會遺失資料。\n一個完整的 Quorum 機制 這不是 kafka 的機制，但我們順帶聊聊。\n commit decision 使用多數決(majority) leader election 也使用多數決  總共有 2n+1 replicas，leader 取得 n+1 ack 才能 commit message。然後 leader election 時，從至少 n+1 個 follower 中取得多數決才能選出 leader。有過半的完整log，加上取得過半數的人確認，兩者產生 overlap。這樣的共識就確保有完整的 log 的 follower 一定會出現在 leader election 中，確保選出來的 leader 有完整 log。\n好處如前面描述，整體效能由前段班的速度決定。\n壞處是，很容易就沒有足夠的 electable leader。要容忍 1 個錯誤，需要 3 個完整備份，要容忍 2 個錯誤需要 5 個備份。在實務上，只靠依賴夠多的 redundency 容錯非常的不實際：每一次寫入需要 5 倍寫入跟硬碟空間，但整體效能只有 1/5。資料量大就直接ＧＧ。所以 quorum 才會只存在分散式集群(ex. zookeeper)，而不會直接用在儲存系統。\nKafka's approach Kafka 不使用 majority vote，而是去動態維護一套 in-sync replicas(ISR) ，這些 ISR 會跟上 leader 的進度，而只有這些 ISR 才能是 leader eligible。一個 update 只有在所有 ISR 都 ack 後才會 commit。\nISR 的狀態不放在 kafka 而放在 zookeeper 上，也就是目前哪些 node 是 ISR 的記錄存在 zookeeper。這件事對維持 kafka 節點上，leader 能夠分散在各個 kafka node 上(leader rebalance)是很重要的。\nkafka's approach 與 majority vote，在等待 message commit ack 上所花的成本是一樣的。 然而在 leader election 上，kafka 的 ISR 確保了更多個 eligiable leader 的數量，持續維持在合理的數量，而不會要維持大量個 redundency。ISR 放在外部，更方便 kafka 做 leader rebalance，增加穩定度。\nUnclean leader election 如果 leaders 都死光了會怎樣？\n只要有一個 replica in-sync，Kafka 就保證資料的完整性。然而所有可用的 leaders 都死了，這個就無法保證。\n如果這個情形發生了，kafka 會做以下處理\n 等 ISR 中有人完全回復過來，然後選這個 node 作為 leader(有資料遺失的風險) 直接選擇第一個回覆的 node (不一定在 ISR 中)，先回覆的就指派為 leader  前者犧牲 availability （回覆前沒有 leader 可作讀寫）來確保資料是來自 ISR，雖然錯誤中無法讀寫(downtime)，但可以確定錯誤前跟錯誤後的資料都來自 ISR\n後者犧牲 consistency （來自非 ISR 的 leader 可能導致資料不正確），然而卻能更快的從錯誤中回覆，減少 downtime\n0.11.0.0 後的 kafka 預設是選擇前者，也就是 consistency over availability，當然這可以在設定更改。\nAvailability and Durability Guarantees 近一步考慮 client 的影響。\nProducer 在寫入時可以選擇 message 需要多少 acknowledge，0, 1 or all，ack=all 指的是 message 收到所有 in-sync replicas 的 ack\n 如果 2 replicas 中有 1 個故障，這時寫入只要收到 1 個 ISR 的 ack，就達成 ack=all 但如果不幸剩下一個 replicas 也死了 (0/0 ack)，寫入的資料就會遺失  有些使用情境，會希望資料的耐用度(Durability)優先於可用性(Availability)，可以透過以下兩個方式設定\n 禁用 unclean leader election，效果是如果所有的 replicas 都失效，則整個 partition 都失效，直到前一個 leader 回復正常。 指定可接受的最少 ISR，如果 partition 中的 ISR 低於這個數量，就停止寫入這個 partition，直到 ISR 的數量回覆。  這樣雖然犧牲了可用性，卻可以最大程度地確保資料的可靠性。\n複本管理 上面的討論都只是再說一個 topic，實務中 kafka 中會有大量的 topic ，乘上 partition number 與 replication factor，成千上萬的複本分散在集群中，kafka 會試圖分散 replicas 到集群中，並讓 leader 的數量平均在 node 上\n","date":1569509432,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571229622,"objectID":"41f41742dce349323e911d4ba01bc009","permalink":"https://chechiachang.github.io/post/kafka-ha-continued/","publishdate":"2019-09-26T22:50:32+08:00","relpermalink":"/post/kafka-ha-continued/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka HA Continued","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continuerd\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Zookeeper Multi-server setup Kafka Multi-broker setup  Zookeeper Multi-Server 為了維持 zookeeper 有效運作，cluster 必須維持 majority (多數)，也就是至少一半的機器在線。如果總共 3 台，便可以忍受 1 台故障仍保有 majority。如果是 5 台就可以容忍 2 台故障。一般來說都建議使用基數數量。Zookeeper Multi Server Setup\n普遍情況，3 台 zookeeper 已經是 production ready 的狀態，但如果為了更高的可用性，以方便進行單節點停機維護，可以增加節點數量。\nTopology 需要將 zookeeper 放在不同的機器上，不同的網路環境，甚至是不同的雲平台區域上，以承受不同程度的故障。例如單台機器故障，或是區域性的網路故障。\n我們這邊會使用 Kubernetes PodAntiAffinity，要求 scheduler 在部屬時，必須將 zookeeper 分散到不同的機器上。設定如下：\nvim values-staging.yaml zookeeper: enabled: true resources: ~ env: ZK_HEAP_SIZE: \u0026quot;1G\u0026quot; persistence: enabled: false image: PullPolicy: \u0026quot;IfNotPresent\u0026quot; url: \u0026quot;\u0026quot; port: 2181 ## Pod scheduling preferences (by default keep pods within a release on separate nodes). ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity ## By default we don't set affinity: affinity: # Criteria by which pod label-values influence scheduling for zookeeper pods. podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; labelSelector: matchLabels: release: zookeeper 使用 podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution，如果 topologyKey 已經有指定 label 的 pod 存在，則無法部署，需要數到其他台機器。\nkubectl get pods --output wide | grep zookeeper NAME READY STATUS RESTARTS AGE IP NODE kafka-0-zookeeper-0 1/1 Running 0 42d 10.8.12.4 gke-chechiachang-pool-1-e06e6d00-pc98 kafka-0-zookeeper-1 1/1 Running 0 42d 10.8.4.4 gke-chechiachang-pool-1-e06e6d00-c29q kafka-0-zookeeper-2 1/1 Running 0 42d 10.8.3.6 gke-chechiachang-pool-1-e06e6d00-krwc 效果是 zookeeper 都分配到不同的機器上。\nGuarantees Zookeeper 對於資料一致性，有這些保障 Consistency Guarantees\n 順序一致性：資料更新的順序，與發送的順序一致 原子性：資料更新只有成功或失敗，沒有部份效果 系統一致性：可戶端連到 server 看到的東西都是一樣，無關連入哪個 server 可靠性：  客戶端的更新請求，一但收到 server 回覆更新成功，便會持續保存狀態。某些錯誤會造成客戶端收不到回覆， 可能是網路問題，或是 server 內部問題，這邊就無法確定 server 上的狀態，是否被更新了，或是請求已經遺失了。 從客戶讀取到的資料都是以確認的資料，不會因為 server 故障回滾(Roll back)而回到舊的狀態    Kafka 的設定 ## The StatefulSet installs 3 pods by default replicas: 3 resources: limits: cpu: 200m memory: 4096Mi requests: cpu: 100m memory: 1024Mi kafkaHeapOptions: \u0026quot;-Xmx4G -Xms1G\u0026quot; 設定 broker 的數量，以及 Pod 提供的 resource，並且透過 heapOption 把記憶體設定塞進 JVM\naffinity: affinity: podAntiAffinity: requiredDuringSchedulingIgnoredDuringExecution: - labelSelector: matchExpressions: - key: app operator: In values: - kafka topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; podAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 50 podAffinityTerm: labelSelector: matchExpressions: - key: app operator: In values: - zookeeper 這邊下了兩個 affinity\n podAntiAffinity 盡量讓 kafka-broker 分散到不同機器上 podAffinity 讓 broker prefer 跟 zookeeper 放在一起  分散的理由同上，不希望一台機器死了，就讓多個 broker 跟著死\n要和 zookeeper 放在一起，就要看需求與實際環境調整\nconfigurationOverrides: \u0026quot;default.replication.factor\u0026quot;: 3 \u0026quot;offsets.topic.replication.factor\u0026quot;: 2 # Increased from 1 to 2 for higher output \u0026quot;offsets.topic.num.partitions\u0026quot;: 3 \u0026quot;confluent.support.metrics.enable\u0026quot;: false # Disables confluent metric submission \u0026quot;auto.leader.rebalance.enable\u0026quot;: true \u0026quot;auto.create.topics.enable\u0026quot;: true \u0026quot;message.max.bytes\u0026quot;: \u0026quot;16000000\u0026quot; # Extend global topic max message bytes to 16 Mb 這邊再把 broker 運行的設定參數塞進去，參數的用途大多與複本與高可用機制有關下面都會提到。\nKafka 的複本機制 kafka 的副本機制 預設將各個 topic partition 的 log 分散到 server 上，如果其中一台 server 故障，資料仍然可用。\n兩個重要的設定\n num.partitions=N default.replication.factor=M  kafka 預設使用複本，所有機制與設計都圍繞著複本。如果（因為某些原因）不希望使用複本，可將 replication factor 設為 1。\nreplication 的單位是 topic partition，正常狀況下\n 一個 partition 會有一個 leader，以及零個或以上個 follower leader + follower 總數是 replication factor 所有讀寫都是對 leader 讀寫 leader 的 log 會同步到 follower 上，leader 與 follower 狀態是一樣的  Election \u0026amp; Load balance 通常一個 topic 會有多個 partition，也就是說，每個 topic 會有多個 partition leader，分散負載\n通常 topic partition 的總數會比 broker 的數量多\n 以上一篇範例，我們有三個 kafka-0-broker 各自是一個 Pod 有 topic: ticker 跟預設的 __consumer_offset__，乘上 partition number 的設定值(N)，會有 2N 個 partitions partitiion 會有各自的複本，kafka 會盡量將相同 topic 的複本分散到不同 broker 上 kafka 也會盡量維持 partition 的 leader 分散在不同的 broker 上，這個部分 kafka 會透過算法做 leader election，也可手動使用腳本做 Balancing leadership  總之，topic 的 partition 與 leader 會分散到 broker 上，維持 partition 的可用性。\nsync  node 要能夠維持 zookeeper 的 session (zookeeper 有 heartbeat 機制) follower 不能落後 leader 太多  kafka 能保障資料不會遺失，只要至少一個 node 是在 sync 的狀態。例如本來有三個 partition，其中兩個 partition 不同步，只要其中一個 partition 是同步，便能作為 leader 持續提供正確的 message。\nReplicated Logs kafka 透過 replicated log 維持分散式的 partition\n複本間要維持共識(consensus)的最簡單機制，就是單一 leader 決定，其他 follower 跟隨。然而萬一 leader 死了，選出的新 leader 卻還沒跟上原先 leader 的資料。這時便使用 replicated log，來確保新的 leader 就算原先沒跟上，也能透過 replicated log 隨後跟上且不遺失資料。維持 log 一直都同步的前提，就是 leader 要一直確認 followers 的 log 都有跟上，這個其實就是變相的多 leader，效能消耗較大。\n另一個維持 log 機制，如果希望 follower 彼此的 log 應該先進行比對，讓資料交接過程有 overlap，這個過程稱為 Quorum。一個常用的方式是多數決(majority)\n 如果總共有 2n+1 的 node，leader 要向 n+1 個 follower 取得共識，才確定這個 log 已經 commit 了 leader 總是維持 n+1 follower 的 log 有跟上，因此可以容忍最多 n 個 node 死了，集群整體能有 n+1 的 node 維持著正確的 commited log 不用向所有 node 確認才 commit ，節省了一半的 ack majarity 的另一個好處是，n+1 共識的速度是由前 1/2 快的 node 決定的。由於只要先取得 n+1 就可以 commit，速度快的 node 會先回應，讓整體速度提升。  ","date":1569423032,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569596264,"objectID":"b59cb13a6b01379a58bf929b4cc2b1e9","permalink":"https://chechiachang.github.io/post/kafka-ha-topology/","publishdate":"2019-09-25T22:50:32+08:00","relpermalink":"/post/kafka-ha-topology/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka HA Topology","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continuerd\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  從 Zookeeper 獲取資訊 取得並處理 topic benchmark kafka  zookeeper zookeeper 是 kafka 的分散式協調系統，在 kafka 上多個節點間需要協調的內容，例如：彼此節點的ID，位置與當前狀態，或是跨節點 topic 的設定與狀態。取名叫做 zookeeper 就是在協調混亂的分散式系統，,裡面各種不同種類的服務都要協調，象個動物園管理員。Zookeeper 的官方文件 有更詳細的說明。\nKafka 的節點資訊，與當前狀態，是放在 zookeeper 上，我們可以透過以下指令取得\n# 首先先取得 zkCli 的 cli，這個只有連進任何一台 zookeeper 內部都有 kubectl exec -it kafka-0-zookeeper-0 --container kafka-broker bash # 由於是在 Pod 內部，直接 localhost 詢問本地 /usr/bin/zkCli.sh -server localhost:2181 Connecting to localhost:2181 2019-09-25 15:02:36,089 [myid:] - INFO [main:Environment@100] - Client environment:zookeeper.version=3.4.10-39d3a4f269333c922ed3db283be479f9deacaa0f, built on 03/23/2017 10:13 GMT 2019-09-25 15:02:36,096 [myid:] - INFO [main:Environment@100] - Client environment:host.name=kafka-0-zookeeper-0.kafka-0-zookeeper-headless.default.svc.cluster.local 2019-09-25 15:02:36,096 [myid:] - INFO [main:Environment@100] - Client environment:java.version=1.8.0_131 2019-09-25 15:02:36,100 [myid:] - INFO [main:Environment@100] - Client environment:java.vendor=Oracle Corporation 2019-09-25 15:02:36,100 [myid:] - INFO [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/java-8-openjdk-amd64/jre 2019-09-25 15:02:36,100 [myid:] - INFO [main:Environment@100] - Client environment:java.class.path=/usr/bin/../build/classes:/usr/bin/../build/lib/*.jar:/usr/bin/../share/zookeeper/zookeeper-3.4.10.jar:/usr/bin/../share/zookeeper/slf4j-log4j12-1.6.1.jar:/usr/bin/../share/zookeeper/slf4j-api-1.6.1.jar:/usr/bin/../share/zookeeper/netty-3.10.5.Final.jar:/usr/bin/../share/zookeeper/log4j-1.2.16.jar:/usr/bin/../share/zookeeper/jline-0.9.94.jar:/usr/bin/../src/java/lib/*.jar:/usr/bin/../etc/zookeeper: 2019-09-25 15:02:36,100 [myid:] - INFO [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib 2019-09-25 15:02:36,100 [myid:] - INFO [main:Environment@100] - Client environment:java.io.tmpdir=/tmp 2019-09-25 15:02:36,100 [myid:] - INFO [main:Environment@100] - Client environment:java.compiler=\u0026lt;NA\u0026gt; 2019-09-25 15:02:36,101 [myid:] - INFO [main:Environment@100] - Client environment:os.name=Linux 2019-09-25 15:02:36,101 [myid:] - INFO [main:Environment@100] - Client environment:os.arch=amd64 2019-09-25 15:02:36,101 [myid:] - INFO [main:Environment@100] - Client environment:os.version=4.14.127+ 2019-09-25 15:02:36,101 [myid:] - INFO [main:Environment@100] - Client environment:user.name=zookeeper 2019-09-25 15:02:36,102 [myid:] - INFO [main:Environment@100] - Client environment:user.home=/home/zookeeper 2019-09-25 15:02:36,102 [myid:] - INFO [main:Environment@100] - Client environment:user.dir=/ 2019-09-25 15:02:36,105 [myid:] - INFO [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@42110406 Welcome to ZooKeeper! 2019-09-25 15:02:36,160 [myid:] - INFO [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error) JLine support is enabled 2019-09-25 15:02:36,374 [myid:] - INFO [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/127.0.0.1:2181, initiating session 2019-09-25 15:02:36,393 [myid:] - INFO [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x16d67baf1310001, negotiated timeout = 30000 WATCHER:: WatchedEvent state:SyncConnected type:None path:null [zk: localhost:2181(CONNECTED) 0] 取得 kafka broker 資料\n# List root Nodes $ ls / [cluster, controller, controller_epoch, brokers, zookeeper, admin, isr_change_notification, consumers, log_dir_event_notification, latest_producer_id_block, config] # Brokers 的資料節點 $ ls /brokers [ids, topics, seqid] # List /brokers/ids 得到三個 kafka broker $ ls /brokers/ids [0, 1, 2] # 列出所有 topic 名稱 ls /brokers/topics [ticker] ticker 是上篇範利用到的 topic\n簡單來說，zookeeper 存放這些狀態與 topic 的 metadata\n 儲存核心的狀態與資料，特別是 broker 萬一掛掉，也還需要維持的資料 協調工作，例如協助 broker 處理 quorum，紀錄 partition master 等  # 離開 zkCli quit Kafka 這邊一樣先連線進去一台 broker，取得 kafka binary\nkubectl exec -it kafka-0-0 --container kafka-broker bash ls /usr/bin/ | grep kafka kafka-acls kafka-broker-api-versions kafka-configs kafka-console-consumer kafka-console-producer kafka-consumer-groups kafka-consumer-perf-test kafka-delegation-tokens kafka-delete-records kafka-dump-log kafka-log-dirs kafka-mirror-maker kafka-preferred-replica-election kafka-producer-perf-test kafka-reassign-partitions kafka-replica-verification kafka-run-class kafka-server-start kafka-server-stop kafka-streams-application-reset kafka-topics kafka-verifiable-consumer kafka-verifiable-producer 很多工具，我們這邊只會看其中幾個\ntopic 資訊 Topic 的資訊，跟 zookeeper 要\n# List topics /usr/bin/kafka-topics --list --zookeeper kafka-0-zookeeper ticker 操作 message 從 topic 取得 message\n# This will create a new console-consumer and start consuming message to stdout /usr/bin/kafka-console-consumer \\ --bootstrap-server localhost:9092 \\ --topic engine_topic_soundwave_USD \\ --timeout 0 \\ --from-beginning 如果 ticker 那個 example pod 還在執行，這邊就會收到 ticker 的每秒 message\n如果沒有，也可以開啟另一個 broker 的連線\nkubectl exec -it kafka-0-1 --container kafka-broker bash # 使用 producer 的 console 連入，topic 把 message 塞進去 /usr/bin/kafka-console-producer \\ --broker-list localhost:9092\\ --topic ticker tick [enter] tick [enter] kafka-console-consumer 那個 terminal 就會收到 message\ntick tick 當然也可以使用 consumer group\n# Use consumer to check ticker topics /usr/bin/kafka-console-consumer \\ --bootstrap-server localhost:9092 \\ --topic ticker \\ --group test 有做過上面的操作產生 consumer group，就可以透過 consumer API，取得 consumer group 狀態\n# Check consumer group /usr/bin/kafka-consumer-groups \\ --bootstrap-server localhost:9092 \\ --group ticker \\ --describe Consumer group 'test' has no active members. TOPIC PARTITION CURRENT-OFFSET LOG-END-OFFSET LAG CONSUMER-ID HOST CLIENT-ID ticker 0 23 23 0 - - - Topic 設定操作 Topic 設定文件 在此\n這邊透過 kafka-configs 從 zookeeper 取得 topic 設定，這邊的 max.message.bytes，是這個 topic 每個 message 的最大上限。\n/usr/bin/kafka-configs --zookeeper kafka-0-zookeeper:2181 --describe max.message.bytes --entity-type topics Configs for topic '__consumer_offsets' are segment.bytes=104857600,cleanup.policy=compact,compression.type=producer Configs for topic 'ticker' are __consumer__offsets 是系統的 topic ，紀錄目前 consumer 讀取的位置。\nticker 沒有設定，就是 producer 當初產生 topic 時沒有指定，使用 default 值\n由於我們公司的使用情境常常會超過，所以可以檢查 producer app 那端送出的 message 大小，在比較這邊的設定。當然現在 ticker 的範例，只有一個 0-60 的數值，並不會超過。這個可以在 helm install 的時候，使用 value.yaml 傳入時更改。\n不喜歡這個值，可以更改，這邊增加到 16MB\nTOPIC=ticker /usr/bin/kafka-configs \\ --zookeeper kafka-3-zookeeper:2181 \\ --entity-type topics \\ --alter \\ --entity-name ${TOPIC} \\ --add-config max.message.bytes=16000000 Benchmark 使用內建工具跑 benchmark\nProducer\n/usr/bin/kafka-producer-perf-test \\ --num-records 100 \\ --record-size 100 \\ --topic performance-test \\ --throughput 100 \\ --producer-props bootstrap.servers=kafka:9092 max.in.flight.requests.per.connection=5 batch.size=100 compression.type=none 100 records sent, 99.108028 records/sec (0.01 MB/sec), 26.09 ms avg latency, 334.00 ms max latency, 5 ms 50th, 70 ms 95th, 334 ms 99th, 334 ms 99.9th. Consumer\n/usr/bin/kafka-consumer-perf-test \\ --messages 100 \\ --broker-list=kafka:9092 \\ --topic performance-test \\ --group performance-test \\ --num-fetch-threads 1 ","date":1569423032,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569596264,"objectID":"54492c89374d989bad524ab80b6a13a8","permalink":"https://chechiachang.github.io/post/kafka-operation-scripts/","publishdate":"2019-09-25T22:50:32+08:00","relpermalink":"/post/kafka-operation-scripts/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka Operation Scripts","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) kafka utility scripts, topic operation, kafka benchmark 集群內部的 HA topology 集群內部的 HA 設定，網路設定 Prometheus Metrics Exporter 很重要 效能調校    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  在 Kubernetes 中連線 kafka 使用 golang library 連線到 Kafka 透過 kafka script 操作 kafka  kubernetes 中連線 kafka 先看一看 kafka pods\n$ kubectl get pods --selector='app=kafka' NAME READY STATUS RESTARTS AGE kafka-1-0 1/1 Running 1 26d kafka-1-1 1/1 Running 0 26d kafka-1-2 1/1 Running 0 26d $ kubectl get pods -l 'app=zookeeper' NAME READY STATUS RESTARTS AGE kafka-1-zookeeper-0 1/1 Running 0 26d kafka-1-zookeeper-1 1/1 Running 0 26d kafka-1-zookeeper-2 1/1 Running 0 26d $ kubectl get pods -l 'app=kafka-exporter' NAME READY STATUS RESTARTS AGE kafka-1-exporter-88786d84b-z954z 1/1 Running 5 26d kubectl describe pods kafka-1-0 Name: kafka-1-0 Namespace: default Priority: 0 Node: gke-chechiachang-pool-1-e4622744-wcq0/10.140.15.212 Labels: app=kafka controller-revision-hash=kafka-1-69986d7477 release=kafka-1 statefulset.kubernetes.io/pod-name=kafka-1-0 Annotations: kubernetes.io/limit-ranger: LimitRanger plugin set: cpu request for container kafka-broker Status: Running IP: 10.12.6.178 Controlled By: StatefulSet/kafka-1 Containers: kafka-broker: Image: confluentinc/cp-kafka:5.0.1 Port: 9092/TCP Host Port: 0/TCP Command: sh -exc unset KAFKA_PORT \u0026amp;\u0026amp; \\ export KAFKA_BROKER_ID=${POD_NAME##*-} \u0026amp;\u0026amp; \\ export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092 \u0026amp;\u0026amp; \\ exec /etc/confluent/docker/run Requests: cpu: 100m Liveness: exec [sh -ec /usr/bin/jps | /bin/grep -q SupportedKafka] delay=30s timeout=5s period=10s #success=1 #failure=3 Readiness: tcp-socket :kafka delay=30s timeout=5s period=10s #success=1 #failure=3 Environment: POD_IP: (v1:status.podIP) POD_NAME: kafka-1-0 (v1:metadata.name) POD_NAMESPACE: default (v1:metadata.namespace) KAFKA_HEAP_OPTS: -Xmx4G -Xms1G KAFKA_ZOOKEEPER_CONNECT: kafka-1-zookeeper:2181 KAFKA_LOG_DIRS: /opt/kafka/data/logs KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: false KAFKA_DEFAULT_REPLICATION_FACTOR: 3 KAFKA_MESSAGE_MAX_BYTES: 16000000 KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 KAFKA_JMX_PORT: 5555 Mounts: /opt/kafka/data from datadir (rw) /var/run/secrets/kubernetes.io/serviceaccount from default-token-2tm8c (ro) Conditions: Volumes: datadir: Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace) ClaimName: datadir-kafka-1-0 ReadOnly: false default-token-2tm8c: Type: Secret (a volume populated by a Secret) SecretName: default-token-2tm8c Optional: false 講幾個重點：\n 這邊跑起來的是 kafka-broker，接收 producer 與 consumer 來的 request 這邊用的是 statefulsets，不是完全無狀態的 kafka broker，而把 message 記在 datadir 上，降低故障重啟時可能遺失資料的風險。 啟動時，把 kubernetes 指定的 pod name 塞進環境變數，然後作為當前 broker 的 ID 沒有設定 Pod antiAffinity，所以有可能會啟三個 kafka 結果三個跑在同一台 node 上，這樣 node 故障就全死，沒有HA  Service \u0026amp; Endpoints 看一下 service 與 endpoints zookeeper 與 exporter 我們這邊先掠過不談，到專章講高可用性與服務監測時，再來討論。\n$ kubectl get service -l 'app=kafka' NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kafka-1 ClusterIP 10.15.242.178 \u0026lt;none\u0026gt; 9092/TCP 26d kafka-1-headless ClusterIP None \u0026lt;none\u0026gt; 9092/TCP 26d 兩個 services\n 一個是 cluster-ip service，有 single cluster IP 與 load-balance，DNS 會過 kube-proxy。 一個是 headless service，DNS 沒有過 kube-proxy，而是由 endpoint controller 直接 address record，指向把符合 service selector 的 pod。適合做 service discovery，不會依賴於 kubernetes 的實現。  詳細說明在官方文件\n簡單來說，kafka broker 會做 auto service discovery，我們可以使用 headless service。\n客戶端(consumer \u0026amp; producer) 連入時，則使用 cluster-ip service，做 load balancing。\n$ kubectl get endpoints -l 'app=kafka' NAME ENDPOINTS AGE kafka-1 10.12.1.14:9092,10.12.5.133:9092,10.12.6.178:9092 26d kafka-1-headless 10.12.1.14:9092,10.12.5.133:9092,10.12.6.178:9092 26d Golang Example 附上簡單的 Golang 客戶端，完整 Github Repository 在這邊\npackage main import ( \u0026quot;context\u0026quot; \u0026quot;fmt\u0026quot; \u0026quot;strconv\u0026quot; \u0026quot;time\u0026quot; \u0026quot;github.com/segmentio/kafka-go\u0026quot; // 使用的套件 ) func main() { topic := \u0026quot;ticker\u0026quot; // 指定 message 要使用的 topic partition := 0 // 指定 partition，由於底下連線指定連線到 partition 的 leader，所以需要指定 partition kafkaURL := \u0026quot;kafka-0:9092\u0026quot; // 指定 kafkaURL，也可以透過 os.GetEnv() 從環境變數裡拿到。 // producer 對指定 topic, partition 的 leader 產生連線 producerConn, _ := kafka.DialLeader(context.Background(), \u0026quot;tcp\u0026quot;, kafkaURL, topic, partition) // 程式結束最後把 connection 關掉。不關會造成 broker 累積大量 connection，需要等待 broker 端 timeout 才會釋放。 defer producerConn.Close() //producerConn.SetWriteDeadline(time.Now().Add(10 * time.Second)) // 使用 go routine 跑一個 subprocess for loop，一直產生 message 到 kafka topic，這邊的範例是每秒推一個秒數。 go func() { for { producerConn.WriteMessages( kafka.Message{ Value: []byte(strconv.Itoa(time.Now().Second())), }, ) time.Sleep(1 * time.Second) } }() // make a new reader that consumes from topic-A, partition 0 r := kafka.NewReader(kafka.ReaderConfig{ Brokers: []string{kafkaURL}, Topic: topic, Partition: 0, MinBytes: 10e2, // 1KB MaxBytes: 10e3, // 10KB }) defer r.Close() //r.SetOffset(42) // 印出 reader 收到的 message for { m, err := r.ReadMessage(context.Background()) if err != nil { break } fmt.Printf(\u0026quot;%v message at offset %d: %s = %s\\n\u0026quot;, time.Now(), m.Offset, string(m.Key), string(m.Value)) } } 這邊可以使用 Dockerfile 包成一個 container image，然後丟上 kubernetes\n我稍晚補一下 docker image 跟 deployment 方便大家操作好了。\n或是攋人測試，直接 kubectl run 一個 golang base image 讓它 sleep，然後在連進去\nkubectl run DEPLOYMENT_NAME --image=golang:1.13.0-alpine3.10 sleep 3600 kubectl exec -it POD_NAME sh # 裡面沒有 Git 跟 vim 裝一下 apk add git vim go get github.com/chechiachang/kafka-on-kubernetes cd src/github.com/chechiachang/kafka-on-kubernetes/ vim main.go go build . ./kafka-on-kubernetes 2019-09-24 14:20:46.872554693 +0000 UTC m=+9.154112787 message at offset 1: = 46 2019-09-24 14:20:47.872563087 +0000 UTC m=+9.154121166 message at offset 2: = 47 2019-09-24 14:20:48.872568848 +0000 UTC m=+9.154126926 message at offset 3: = 48 2019-09-24 14:20:49.872574499 +0000 UTC m=+9.154132576 message at offset 4: = 49 2019-09-24 14:20:50.872579957 +0000 UTC m=+9.154138032 message at offset 5: = 50 2019-09-24 14:20:51.872588823 +0000 UTC m=+9.154146892 message at offset 6: = 51 2019-09-24 14:20:52.872594672 +0000 UTC m=+9.154152748 message at offset 7: = 52 2019-09-24 14:20:53.872599986 +0000 UTC m=+9.154158060 message at offset 8: = 53 這樣就連上了，完成一個最簡單的使用範例。\n這個例子太過簡單，上一篇講的 consumer group, partitions, offset 什麼設定全都沒用上。實務上這些都需要好好思考，並且依據需求做調整設定。\nClean up 把測試用的 deployment 幹掉\nkubectl delete deployment DEPLOYMENT_NAME 小結  簡述 kafka 在 kubernetes 上運行的狀況，連線方法 Demo 一個小程式  ","date":1569333589,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569335657,"objectID":"39db1ffb65f569cf5abc8bb5f943f0f0","permalink":"https://chechiachang.github.io/post/kafka-basic-usage/","publishdate":"2019-09-24T21:59:49+08:00","relpermalink":"/post/kafka-basic-usage/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka-basic-usage","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continuerd\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校    於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 寫了部屬，本想談一下 kafka 的高可用性配置，看到大德的留言，才想到應該要先跟各位介紹一下 kafka，跟 kafka 的用途。也感謝大德路過發問，我也會順代調整內容。今天就說明何為 kafka，以及在什麼樣的狀況使用。\n摘要  簡介 kafka 基本元件 Kafka 的工作流程  簡介 Kafka Kafka 是分散式的 streaming platform，可以 subscribe \u0026amp; publish 訊息，可以當作是一個功能強大的 message queue 系統，由於分散式的架構，讓 kafka 有很大程度的 fault tolerance。原版的說明在這邊\n這邊有幾個東西要解釋。\nMessage Queue System 當一個系統開始運作時，裡頭會有很多變數，這些變數其實就是在一定的範圍(scope）內，做訊息(message)的傳遞。例如在 app 寫了一個 function ，傳入一個變數的值給 function。\n在複雜的系統中，服務元件彼此也會有傳遞訊息的需求。例如我原本有一個 api-server，其中一段程式碼是效能瓶頸，我把它切出來獨立成一個 worker 的元件，讓它可以在更高效能地方執行，甚至 horizontal scaling。這種情境，辨可能歲需要把一部分的 message 從 api-server 傳到 worker，worker 把吃效能的工作做完，再把結果回傳給 api-server。這時就會需要一個穩定的 message queue system，來穩定，且高效能的傳遞這些 message。\nMessage Queue System 實做很多，ActiveMQ, RabbitMQ, \u0026hellip; 等，一些 database 做 message queue 在某些應用場景下也十分適合，例如 Redis 是 in-memory key-value database，內部也實做 pubsub，能夠在某些環境穩定的傳送 message。\nRequest-Response vs Publish-Subscribe 訊息的傳送有很多方式，例如 Http request-response 很適合 server 在無狀態(stateless) 下接受來自客戶端的訊息，每次傳送都重新建立新的 http connection，這樣做有很多好處也很多壞處。其中明顯的壞處是網路資源的浪費，以及訊息的不夠即時，指定特定收件人時發件人會造成額外負擔等。\n使用 Pub-sub pattern的好處，是 publisher 不需要額外處理『這個訊息要送給誰』的工作，而是讓 subscriber 來訂閱需要的訊息類別，一有新的 event 送到該訊息類別，直接透過 broker 推播給 subscriber。不僅即時，節省效能，而且訂閱的彈性很大。\nKafka producer \u0026amp; Consumer API Kafka 作為 client 與 server 兩邊的溝通平台，提供了許多 API 葛不同角色使用。Producer 產生 message 到特定 topic 上，consumer 訂閱特定 topics，kafak 把符合條件的訊息推播給 consumer。\n Producer API: 讓 app publish 一連的訊息 Consumer API: 讓 app subscribe 許多特定 topic，並處理訊息串流(stream) Stream API: 讓 app 作為串流中介處理(stream processor) Connect API: 與 producer 與 consumer 可以對外部服務連結  Topics \u0026amp; Logs Topic 是 kafka 為訊息串流提供的抽象，topic 是訊息傳送到 kafka 時賦予的類別(category)，作為 publish 與 consume 的判斷依據。\nPartition 訊息依據 topic 分類存放，並可以依據 replication factor 設定，在 kafka 中存放多個訊息分割(partition)。partition 可以想成是 message queue 的平行化 (parallel)，併發處理訊息可以大幅提昇訊息接收與發送的速度，並且多個副本也提高資料的可用性。\n由於訊息發送跟接收過程可能因為網路與環境而不穩定，這些相同 topic 的 partition 不一定會完全一樣。但 kafka 確保了以下幾點。\nGuarantees 良好配置的 kafka 有以下保證\n 訊息在系統中送出跟被收到的時間不一定，但kafak中，從相同 producer 送出的訊息，送到 topic partition 會維持送出的順序 Consumer 看見的訊息是與 kafka 中的存放順序一致 有 replication factor 為 N 的 topic ，可以容忍(fault-tolerance) N-1 個 kafka-server 壞掉，而不影響資料。  當然，這邊的前提是有良好配置。錯誤的配置可能會導致訊息不穩定，效能低落，甚至遺失。\nProducer Producer 負責把訊息推向一個 topic，並指定訊息應該放在 topic 的哪個 partition。\nConsumer Consumer 會自行標記，形成 consumer group，透過 consumer group 來保障訊息傳遞的次序，容錯，以及擴展的效率。\n Consumer 透過 consumer group 共享一個 group.id。 Consumer group 去所有 partitions 裡拿訊息，所有 partitions 的訊息分配到 consumer group 中的 consumer。  app 在接收訊息時，設置正確的化，在一個 consumer group 中，可以容忍 consumer 失效，仍能確保訊息一指定的次序送達。在需要大流量時，也可調整 consumer 的數量提高負載。\n用例 kafka 的使用例子非常的多，使用範圍非常廣泛。\n基本上是訊息傳遞的使用例子，kafka 大多能勝任。\n小結 這邊只提了 kafka 的基本概念，基本元件，以及 consumer group 機制，為我們底下要談的 configuration 與 topology 鋪路。\n","date":1569247189,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569671000,"objectID":"22e9bed6b5232d7f2a0e7377bf835ae2","permalink":"https://chechiachang.github.io/post/kafka-introduction/","publishdate":"2019-09-23T21:59:49+08:00","relpermalink":"/post/kafka-introduction/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka-introduction","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continuerd\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n","date":1569246929,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569596264,"objectID":"7af6fe4118563e6612bba331c546ce81","permalink":"https://chechiachang.github.io/post/kafka-helm-configuration/","publishdate":"2019-09-23T21:55:29+08:00","relpermalink":"/post/kafka-helm-configuration/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka Helm Configuration","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n ELK Stack  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continuerd\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n 碎念 30 天每天一文真的蠻逼人的，每一篇都是新寫，還要盡可能顧及文章品質，下班趕文章，各位大德寫看看就知道\n 這邊調整了當初想寫的文章，內容應該都會帶到  elk kafka-ha reids-ha prometheus kubernetes on gcp   但不會再一篇 10000 字了，逼死我吧\u0026hellip; 寫不完的部份 30 天候會在IT邦幫忙，或是我的 Github Page https://chechiachang.github.io/補完  寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n 摘要  簡介 kafka 部屬 kafka 到 kubernetes 上  簡介 kafka Kafka 是分散式的 streaming platform，可以 subscribe \u0026amp; publish 訊息，可以當作是一個功能強大的 message queue 系統，由於分散式的架構，讓 kafka 有很大程度的 fault tolerance。\n我們今天就來部屬一個 kafka。\nDeploy 我把我的寶藏都在這了https://github.com/chechiachang/kafka-on-kubernetes\n下載下來的 .sh ，跑之前養成習慣貓一下\ncat install.sh #!/bin/bash # # https://github.com/helm/charts/tree/master/incubator/kafka #HELM_NAME=kafka HELM_NAME=kafka-1 helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator # Stable: chart version: kafka-0.16.2\tapp version: 5.0.1 helm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml Helm 我們這邊用 helm 部屬，之所以用 helm ，因為這是我想到最簡單的方法，能讓輕鬆擁有一套功能完整的 kafka。所以我們先用。\n沒用過 helm 的大德可以參考 Helm Quickstart，先把 helm cli 與 kubernetes 上的 helm tiller 都設定好\nhelm init Helm Chart 一個 helm chart 可以當成一個獨立的專案，不同的 chart 可以在 kubernetes 上協助部屬不同的項目。\n這邊使用了還在 incubator 的chart，雖然是 prod ready，不過使用上還是要注意。\n使用前先把 incubator 的 helm repo 加進來\nhelm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator Install 這邊是用 upgrade \u0026ndash;install，已安裝就 upgrade，沒安裝就 install，之後可以用這個指令升版\nhelm upgrade --install ${HELM_NAME} incubator/kafka --version 0.16.2 -f values-staging.yaml Version 這邊使用的版本：\n chart version: kafka-0.16.2 app version: 5.0.1 kafka Image: confluentinc/cp-kafka:5.0.1 zookeeper Image: gcr.io/google_samples/k8szk:v3 kafka exporter: danielqsj/kafka-exporter:v1.2.0  values-staging 透過 helm chart，把啟動參數帶進去，這邊我們看幾個比較重要的，細節之後的文章在一起討論。\nhttps://github.com/chechiachang/kafka-on-kubernetes/blob/master/values-staging.yaml\nreplicas: 3 安裝三個 kafka，topology 的東西也是敬待下篇XD\n## The kafka image repository image: \u0026quot;confluentinc/cp-kafka\u0026quot; ## The kafka image tag 底層執行的 kafka 是 conluent kafka Configure resource requests and limits ref: http://kubernetes.io/docs/user-guide/compute-resources/ resources: {}\nlimits: cpu: 200m memory: 4096Mi requests: cpu: 100m memory: 1024Mi kafkaHeapOptions: \u0026ldquo;-Xmx4G -Xms1G\u0026rdquo;\n 這邊可以調整在 kubernetes 上面的 limit 跟 request * Deploy 會先去跟 node 問夠不夠，夠的話要求 node 保留這些資源給 Pod * Runtime 超過 limit，Pod 會被 kubernetes 幹掉，不過我們是 JVM，外部 resource 爆掉前，應該會先因 heap 滿而死。一個施主自盡的感覺。 * CPU 蠻省的，吃比較多是 memory。但也要看你的使用情境 prometheus\n 對我們有上 promethues，基本上就是 kafka-exporter 把 kafka metrics 倒出去 prometheus，這個也是詳見下回分解。 # 跑起來了 $ kubectl get po | grep kafka\nNAME READY STATUS RESTARTS AGE kafka-1-0 1/1 Running 0 224d kafka-1-1 1/1 Running 0 224d kafka-1-2 1/1 Running 0 224d kafka-1-exporter-88786d84b-z954z 1/1 Running 0 224d kafka-1-zookeeper-0 1/1 Running 0 224d kafka-1-zookeeper-1 1/1 Running 0 224d kafka-1-zookeeper-2 1/1 Running 0 224d\n","date":1569117521,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569596264,"objectID":"7d396ef1df7199e907e016c9c75e00aa","permalink":"https://chechiachang.github.io/post/kafka-deployment-on-kubernetes/","publishdate":"2019-09-22T09:58:41+08:00","relpermalink":"/post/kafka-deployment-on-kubernetes/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 ELK Stack Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常","tags":[],"title":"Kafka Deployment on Kubernetes","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP  作為範例的 ELK 的版本是當前的 stable release 7.3.1。\n由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n 摘要  簡介 logstash 將 logstash 部屬到 kubernetes 上 設定 logstash pipeline 處理 nginx access log  介紹 Logstash Logstash 是開元的資料處理引擎，可以動態的將輸入的資料做大量的處裡。原先的目的是處理 log ，但目前以不限於處理 log ，各種 ELK beat 或是其他來源的不同監測數據，都能處理。\nLogastash 內部的功能也大多模組化，因此可以組裝不同的 plugin，來快速處理不同來源資料。\n基本上常見的資料來源，logstash 都能夠處理，並且有寫好的 plugin 可以直接使用，細節請見logstash 官方文件\n後送資料庫與最終儲存庫 在開始架設 logstash 要先考慮 pipeline 處理過後送的資料庫，可使用的資料庫非常多，這邊會展示的有：\n ELK Stack 標準配備送到 Elasticsearch  存放會時常查詢的熱資料，只存放一段時間前的資料 太舊的資料自動 Rollout   最終 archieving 的資料庫，這邊使用 GCP 的 Big Query  存放查找次數少，但非常大量的歷史紀錄。    Elasticsearch 在前幾篇已經架設好，GCP Big Query 的設定也事先開好。\n部屬 Logstash kubernetes resource 的 yaml 請參考 我的 github elk-kubernetes\nkubectl apply -f config-configmap.yaml kubectl apply -f pipelines-configmap.yam kubectl apply -f deployment.yaml kubectl apply -f service.yaml 放上去的 resource\n config-configmap:  Logstash 服務本身啟動的設定參數   pipelines-configmap:  Logstash 的 pipelines 設定檔案   Lostagh Deployment  Logastash 的服務 instance 可以動態 scaling，也就是會有複數 Logstash instance 做負載均衡   Logstash service  可透過 kubernetes 內部的 kube-dns 服務 集群內的 filebeat 可以直接透過 logstash.default.svc.chechiachang-cluster.local 的 dns 連線 logstash 集群內的網路，直接使用 http（當然使用 https 也是可以，相關步驟請見前幾篇文章）    簡單講一下 kubernetes service 的負載均衡，關於 kubernetes service 細節這篇附上文件\n$ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE logstash ClusterIP 10.15.254.47 \u0026lt;none\u0026gt; 5044/TCP 182d $ kubectl get endpoints NAME ENDPOINTS AGE logstash 10.12.0.132:5044,10.12.10.162:5044,10.12.9.167:5044 + 12 more... 182d  在 Kubernetes 內部每個 Pod 都能看到 logstash, logstash.default.svc.chechiachang-cluster.local 這兩個 dns DNS 直接指向複數的 logstash endpoints， 每一個 ip 都是 kubernetes 內部配置的一個 Pod 的 IP，開啟 5044 的 logstash port Service 的 load balance 機制視 service 設定，細節可以看這邊  講到最白，就是 filebeat LOGSTASH URL 設定為 http://logstash 就會打到其中一台 logstash\n更改 filebeat configmap\n$ kubectl edit configmap filebeat-configmap # Disable output to elasticsearch output.elasticsearch: enabled: false # Output to logstash output.logstash: hosts: [\u0026quot;logstash:5044\u0026quot;] protocol: \u0026quot;http\u0026quot; username: \u0026quot;elastic\u0026quot; password: 設定 logstash 這邊要先說，logstash 也支援 centralized configuration，如果你的 logstash 不是跑在 Kubernetes 上，沒辦法配置一套 configmap 就應用到全部的 instance，記的一定要使用。\nLogastash 的運行設定 logstash.yml，這邊我們沒有做設定，都是預設值，有需求可以自行更改\n當然之後要調整 batch size 或是 queue, cache 等等效能調校，也是來這邊改，改完 configmap ，rolling update logstash 就可以。\n這邊主要是來講 pipeline 設定。\n$ kubectl describe configmap pipelines-configmap apiVersion: v1 kind: ConfigMap metadata: name: logstash-pipelines namespace: elk labels: k8s-app: logstash data: # Nginx Template # https://www.elastic.co/guide/en/logstash/7.3/logstash-config-for-filebeat-modules.html#parsing-nginx nginx.conf: | ... Configmap 裡面只有一個 pipeline，就是 nginx.conf，我們這邊就只有一條，這邊一段一段看\nInput input { beats { # The lisening port of logstash port =\u0026gt; 5044 host =\u0026gt; \u0026quot;0.0.0.0\u0026quot; } } 設定 Input 來源，是 beat 從 5044 進來\nFilter 接下來一大段是 filter，每個 filter 中間的 block 都是一個 plugin，logstash 支援非常多有趣的 plugin ，處理不同來源的工作，細節請看這篇\nfilter { # Ignore data from other source in case filebeat input is incorrectly configured. if [kubernetes][container][name] == \u0026quot;nginx-ingress-controller\u0026quot; { # Parse message with grok # Use grok debugger in kibana -\u0026gt; dev_tools -\u0026gt; grok_debugger grok { match =\u0026gt; { \u0026quot;message\u0026quot; =\u0026gt; \u0026quot;%{IPORHOST:[nginx][access][remote_ip]} - \\[%{IPORHOST:[nginx][access][remote_ip_list]}\\] - %{DATA:[nginx][access][user_name]} \\[%{HTTPDATE:[nginx][access][time]}\\] \\\u0026quot;%{WORD:[nginx][access][method]} %{DATA:[nginx][access][request_url]} HTTP/%{NUMBER:[nginx][access][http_version]}\\\u0026quot; %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \\\u0026quot;%{DATA:[nginx][access][referrer]}\\\u0026quot; \\\u0026quot;%{DATA:[nginx][access][agent]}\\\u0026quot; %{NUMBER:[nginx][access][request_length]} %{NUMBER:[nginx][access][request_time]} \\[%{DATA:[nginx][access][proxy_upstream_name]}\\] %{DATA:[nginx][access][upstream_addr]} %{NUMBER:[nginx][access][upstream_response_length]} %{NUMBER:[nginx][access][upstream_response_time]} %{NUMBER:[nginx][access][upstream_status]} %{DATA:[nginx][access][req_id]}\u0026quot; } } # Match url parameters if has params grok { match =\u0026gt; { \u0026quot;[nginx][access][request_url]\u0026quot; =\u0026gt; \u0026quot;%{DATA:[nginx][access][url]}\\?%{DATA:[nginx][access][url_params]}\u0026quot; } } # Remove and add fields mutate { remove_field =\u0026gt; \u0026quot;[nginx][access][request_url]\u0026quot; add_field =\u0026gt; { \u0026quot;read_timestamp\u0026quot; =\u0026gt; \u0026quot;%{@timestamp}\u0026quot; } # Add fileset.module:nginx to fit nginx dashboard add_field =\u0026gt; { \u0026quot;[fileset][module]\u0026quot; =\u0026gt; \u0026quot;nginx\u0026quot;} add_field =\u0026gt; { \u0026quot;[fileset][name]\u0026quot; =\u0026gt; \u0026quot;access\u0026quot;} } # Parse date string into timestamp date { match =\u0026gt; [ \u0026quot;[nginx][access][time]\u0026quot;, \u0026quot;dd/MMM/YYYY:H:m:s Z\u0026quot; ] remove_field =\u0026gt; \u0026quot;[nginx][access][time]\u0026quot; } # Split url_parameters with \u0026amp; # /api?uuid=123\u0026amp;query=456 # become # nginx.access.url_params.uuid=123 nginx.access.url_params.query=456 kv { source =\u0026gt; \u0026quot;[nginx][access][url_params]\u0026quot; field_split =\u0026gt; \u0026quot;\u0026amp;\u0026quot; } # Parse useragent useragent { source =\u0026gt; \u0026quot;[nginx][access][agent]\u0026quot; target =\u0026gt; \u0026quot;[nginx][access][user_agent]\u0026quot; remove_field =\u0026gt; \u0026quot;[nginx][access][agent]\u0026quot; } # Search remote_ip with GeoIP database, output geoip information for map drawing geoip { source =\u0026gt; \u0026quot;[nginx][access][remote_ip]\u0026quot; target =\u0026gt; \u0026quot;[nginx][access][geoip]\u0026quot; #fields =\u0026gt; [\u0026quot;country_name\u0026quot;,\u0026quot;city_name\u0026quot;,\u0026quot;real_region_name\u0026quot;,\u0026quot;latitude\u0026quot;,\u0026quot;longitude\u0026quot;,\u0026quot;ip\u0026quot;,\u0026quot;location\u0026quot;] } # ============== # Remove message to reduce data # ============== if [nginx][access][url] { mutate { # source:/var/lib/docker/containers/6e608bfc0a437c038a1dbdf2e3d28619648b58a1d1ac58635f8178fc5f871109/6e608bfc0a437c038a1dbdf2e3d28619648b58a1d1ac58635f8178fc5f871109-json.log remove_field =\u0026gt; \u0026quot;[source]\u0026quot; # Origin message remove_field =\u0026gt; \u0026quot;[message]\u0026quot; #add_field =\u0026gt; { \u0026quot;[nginx][access][message]\u0026quot; =\u0026gt; \u0026quot;[message]\u0026quot;} remove_field =\u0026gt; \u0026quot;[nginx][access][message]\u0026quot; # url_params:client_id=1d5ffd378296c154d3e32e5890d6f4eb\u0026amp;timestamp=1546849955\u0026amp;nonce=9a52e3e6283f2a9263e5301b6724e2c0d723def860c4724c9121470152a42318 remove_field =\u0026gt; \u0026quot;[nginx][access][url_params]\u0026quot; } } } # nginx-ingress-controller } # filter Grok Grok 本身的文件又是一大段，個人建議各路大德，如果要使用，請直接搜尋人家配置好的設定，不要自己寫\n真的要寫的話要善用工具\n Kibana Grok Debugger YOUR_KIBANA_HOST/app/kibana#/dev_tools/grokdebugger 或是不知名大德貢獻線上 Debugger  grok { match =\u0026gt; { \u0026quot;message\u0026quot; =\u0026gt; \u0026quot;%{IPORHOST:[nginx][access][remote_ip]} - \\[%{IPORHOST:[nginx][access][remote_ip_list]}\\] - %{DATA:[nginx][access][user_name]} \\[%{HTTPDATE:[nginx][access][time]}\\] \\\u0026quot;%{WORD:[nginx][access][method]} %{DATA:[nginx][access][request_url]} HTTP/%{NUMBER:[nginx][access][http_version]}\\\u0026quot; %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \\\u0026quot;%{DATA:[nginx][access][referrer]}\\\u0026quot; \\\u0026quot;%{DATA:[nginx][access][agent]}\\\u0026quot; %{NUMBER:[nginx][access][request_length]} %{NUMBER:[nginx][access][request_time]} \\[%{DATA:[nginx][access][proxy_upstream_name]}\\] %{DATA:[nginx][access][upstream_addr]} %{NUMBER:[nginx][access][upstream_response_length]} %{NUMBER:[nginx][access][upstream_response_time]} %{NUMBER:[nginx][access][upstream_status]} %{DATA:[nginx][access][req_id]}\u0026quot; } } 其實就是 nginx 的 access log\n1.2.3.4 - [1.2.3.4] - - [21/Sep/2019:07:21:21 +0000] \u0026quot;GET /v1/core/api/list?type=queued\u0026amp;timestamp=1569050481\u0026amp;nonce=d1e80e00381e0ba6e42d4601912befcf03fbf291748e77b178230c19cd1fdbe2 HTTP/1.1\u0026quot; 200 3 \u0026quot;-\u0026quot; \u0026quot;python-requests/2.18.4\u0026quot; 425 0.031 [default-chechiachang-server-80] 10.12.10.124:8003 3 0.031 200 f43db228afe66da67b2c7417d0ad2c04 預設的 log 送件來，格式是 text，經過 pattern matching 後變成 json-like format，也就是可以從資料結構取得 .nginx.access.remote_ip 這樣的欄位，讓原本的 access log 從 text 變成可以查找的內容。\n原本的 text 送進 elasticsearch 當然也可以查找，但就會在 text 裡面做全文檢索，功能很侷限，效率很差。\nOutput logstash 支援的 output 以及設定在這邊\noutput { elasticsearch { hosts =\u0026gt; [\u0026quot;https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}\u0026quot;] user =\u0026gt; \u0026quot;${ELASTICSEARCH_USERNAME}\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; index =\u0026gt; \u0026quot;%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}\u0026quot; manage_template =\u0026gt; false } } Elasticsearch 的配置很單純\noutput { google_bigquery { project_id =\u0026gt; ${GCP_PROJECT_ID} dataset =\u0026gt; ${GCP_BIG_QUERY_DATASET_NAME} csv_schema =\u0026gt; \u0026quot;path:STRING,status:INTEGER,score:FLOAT\u0026quot; json_key_file =\u0026gt; ${GCP_JSON_KEY_FILE_PATH} error_directory =\u0026gt; \u0026quot;/tmp/bigquery-errors\u0026quot; date_pattern =\u0026gt; \u0026quot;%Y-%m-%dT%H:00\u0026quot; flush_interval_secs =\u0026gt; 30 } } 其中的變數，我們全都用環境變數，在 deployment.yaml 配置，啟動 logstash pods 時代入\nGCP_JSON_KEY_FILE_PATH 這邊要配置一隻 GCP 的服務帳號金鑰，一個有 Big Query 寫入權限的 service account，把 json 使用 kubernetes secret 放到集群上，然後在 pod 上使用 volume from secret 掛載進來。 csv_schema =\u0026gt; \u0026quot;path:STRING,status:INTEGER,score:FLOAT\u0026quot; 這邊要配置之後會存入 Big Query 的 csv 結構\n小結  部屬 Logstash deployment 到 kubernetes 上 設定 pipeline，超多 plugin，族繁不及備載 Grok 配置 Big Query output 配置  ","date":1569050543,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"f544c87ade69ca2c09c57bec61782043","permalink":"https://chechiachang.github.io/post/logstash-on-gke/","publishdate":"2019-09-21T15:22:23+08:00","relpermalink":"/post/logstash-on-gke/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護","tags":[],"title":"Logstash on GKE","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP  作為範例的 ELK 的版本是當前的 stable release 7.3.1。\n由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n 這篇來要 Kubernetes 環境(GKE)裡面的 log 抓出來，送到 ELK 上。\n官方文件 ，寫得很簡易，如果已經很熟 kubernetes 的人可以直接腦補其他的部屬設定。\n這邊有幾個做法，依照 filebeat 部署的位置與收集目標簡單分為：\n node: 處理每一台 node 的 log ，包含 system log 與 node 監測資料(metrics) cluster: 處理 cluster 等級的 log, event 或是 metrics pod: 針對特定 pod 直接去掛一個 sidecar  上面的方法是可以混搭的，kubernetes 個個層級有log 處理流程，我們這邊把 log 送往第三方平台，也是需要依照原本的 log 流程，去收取我們想收集的 log。\n簡單來說，是去對的地方找對的 log。在架構上要注意 scalability 與 resource 分配，不要影響本身提供服務的 GKE ，但又能獲得盡量即時的 log。\n我們這邊直接進入 kubernetes resource 的設定，底下會附上在 GKE 找 log 的過程。\nNode level log harvest 為每一個 node 配置 filebeat，然後在 node 上面尋找 log，然後如我們上篇所敘述加到 input ，就可以把 log 倒出來。\n直覺想到就是透過 daemonsets 為每個 node 部署一個 filebeat pod，然後 mount node 的 log 資料夾，在設置 input。\nDeploy daemonsets kubernetes resource 的 yaml 請參考 我的 github elk-kubernetes\n給予足夠的 clusterrolebinding 到 elk\nkubectl apply -f filebeat/7.3.1/clusterrolebinding.yaml 先更改 filebeat 的設定，如何設定 elasticsearch 與 kibana，請參考上篇。至於 input 的部份已經配置好了。\nvim filebeat/7.3.1/daemonsets-config-configmap.yaml kubectl apply -f filebeat/7.3.1/daemonsets-config-configmap.yaml 部屬 filebeat daemonsets，會每一個 node 部屬一個 filebeat\nkubectl apply -f filebeat/7.3.1/daemonsets.yaml 取得 daemonsets 的狀態\nkubectl --namespcae elk get pods NAME READY STATUS RESTARTS AGE filebeat-bjfp9 1/1 Running 0 6m56s filebeat-fzr9n 1/1 Running 0 6m56s filebeat-vpkm7 1/1 Running 0 6m56s ... 有設定成功的話，kibana 這邊就會收到 kubernetes 上面 pod 的 log\nlog havest for specific pods 由於 kubernetes 上我們可以便利的調度 filebeat 的部屬方式，這邊也可以也可以使用 deployment ，配合 pod affinity，把 filebeat 放到某個想要監測的 pod，這邊的例子是 nginx-ingress-controller。\n Kubernetes 上有一個或多個 nginx ingress controller 部屬一個或多個 filebeat 到有 nginx 的 node 上 filebeat 去抓取 nginx 的 input， 並使用 filebeat 的 nginx module 做預處理  nginx module 預設路徑需要調整，這邊使用 filebeat autodiscover 來處理    一樣 apply 前記得先檢查跟設定\nvim filebeat/7.3.1/nginx-config-configmap.yaml kubectl apply -f filebeat/7.3.1/nginx-config-configmap.yaml 部屬 filebeat deployment 由於有設定 pod affinity ，這個 filebeat 只會被放到有 nginx ingress controller 的這個節點上，並且依照 autodiscover 設定的條件去蒐集 nginx 的 log\nkubectl apply -f filebeat/7.3.1/nginx-deployment.yaml 有設定成功的話，kibana 這邊就會收到 kubernetes 上面 pod 的 log\n另外，由於有啟動 nginx module，logstash 收到的內容已經是處理過得內容。\n GCP fluentd 如果是使用 GKE 的朋友，可以投過開啟 stackdriver logging 的功能，把集群中服務的 log 倒到 stackdriver，基本上就是 node -\u0026gt; (daemonsets) fluentd -\u0026gt; stackdriver。\n這個 fluentd 是 GCP 如果有啟動 Stackdriver Logging 的話，自動幫你維護的 daemonsets，設定不可改，改了會被 overwrite 會去，所以不太方便從這邊動手腳。\nBtw stackdriver 最近好像改版，目前做 example 的版本已經變成 lagency （淚\n但我們先假設我們對這個 pod 的 log 很有興趣，然後把這邊的 log 透過 filebeat 送到 ELK 上XD\n因為 GKE 透過 fluentd 把 GKE 上面的 log 倒到 stackdriver，而我們是想把 log 倒到 ELK，既然這樣我們的 input 來源是相同的，而且很多處理步驟都可以在 ELK 上面互通，真的可以偷看一下 fluentd 是去哪收集 log ，怎麼處理 log pipeline，我們只要做相應設定就好。\n畢竟 google 都幫我們弄得妥妥的，不參考一下他的流程太可惜。\n偷看一下 GKE 上 fluentd 是去哪找 log ，這個是 fluentd gcp configmap，雖然看到這邊感覺扯遠了，但因為很有趣所有我就繼續看下去，各位大德可以跳過XD\nconfigmap 中的這個 input 設定檔，其中一個 source 就是一個資料來源，相當於 filebeat 的 input。這邊這個 source 就是去 /var/log/containers/*.log 收 log\n這邊還做了幾件事：\n 打上 reform.* tag，讓下個 match 可以 收進去 pipeline 處理 附帶 parse 出 time  containers.input.conf \u0026lt;source\u0026gt; @type tail path /var/log/containers/*.log pos_file /var/log/gcp-containers.log.pos # Tags at this point are in the format of: # reform.var.log.containers.\u0026lt;POD_NAME\u0026gt;_\u0026lt;NAMESPACE_NAME\u0026gt;_\u0026lt;CONTAINER_NAME\u0026gt;-\u0026lt;CONTAINER_ID\u0026gt;.log tag reform.* read_from_head true \u0026lt;parse\u0026gt; @type multi_format \u0026lt;pattern\u0026gt; format json time_key time time_format %Y-%m-%dT%H:%M:%S.%NZ \u0026lt;/pattern\u0026gt; \u0026lt;pattern\u0026gt; format /^(?\u0026lt;time\u0026gt;.+) (?\u0026lt;stream\u0026gt;stdout|stderr) [^ ]* (?\u0026lt;log\u0026gt;.*)$/ time_format %Y-%m-%dT%H:%M:%S.%N%:z \u0026lt;/pattern\u0026gt; \u0026lt;/parse\u0026gt; \u0026lt;/source\u0026gt; 他這邊做一些 error handling，然後用 ruby (!) parse，這邊就真的太遠，細節大家可以 google ＸＤ。不過這邊使用的 pattern matching 我們後幾篇在 logstash pipeline 上，也會有機會提到，機制是類似的。\n\u0026lt;filter reform.**\u0026gt; @type parser format /^(?\u0026lt;severity\u0026gt;\\w)(?\u0026lt;time\u0026gt;\\d{4} [^\\s]*)\\s+(?\u0026lt;pid\u0026gt;\\d+)\\s+(?\u0026lt;source\u0026gt;[^ \\]]+)\\] (?\u0026lt;log\u0026gt;.*)/ reserve_data true suppress_parse_error_log true emit_invalid_record_to_error false key_name log \u0026lt;/filter\u0026gt; \u0026lt;match reform.**\u0026gt; @type record_reformer enable_ruby true \u0026lt;record\u0026gt; # Extract local_resource_id from tag for 'k8s_container' monitored # resource. The format is: # 'k8s_container.\u0026lt;namespace_name\u0026gt;.\u0026lt;pod_name\u0026gt;.\u0026lt;container_name\u0026gt;'. \u0026quot;logging.googleapis.com/local_resource_id\u0026quot; ${\u0026quot;k8s_container.#{tag_suffix[4].rpartition('.')[0].split('_')[1]}.#{tag_suffix[4].rpartition('.')[0].split('_')[0]}.#{tag_suffix[4].rpartition('.')[0].split('_')[2].rpartition('-')[0]}\u0026quot;} # Rename the field 'log' to a more generic field 'message'. This way the # fluent-plugin-google-cloud knows to flatten the field as textPayload # instead of jsonPayload after extracting 'time', 'severity' and # 'stream' from the record. message ${record['log']} # If 'severity' is not set, assume stderr is ERROR and stdout is INFO. severity ${record['severity'] || if record['stream'] == 'stderr' then 'ERROR' else 'INFO' end} \u0026lt;/record\u0026gt; tag ${if record['stream'] == 'stderr' then 'raw.stderr' else 'raw.stdout' end} remove_keys stream,log \u0026lt;/match\u0026gt; ssh 進去逛 想看機器上實際的 log 狀況，我們也可以直接 ssh 進去\n先透過 kubectl 看一下 pod\n$ kubectl get daemonsets --namespace kube-system NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE fluentd-gcp-v3.2.0 7 7 7 7 7 beta.kubernetes.io/fluentd-ds-ready=true 196d $ kubectl get pods --output wide --namespace kube-system NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES fluentd-gcp-scaler-1234567890-vfbhc 1/1 Running 0 37d 10.140.0. gke-chechiachang-pool-1-123456789-5gqn \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; fluentd-gcp-v3.2.0-44tl7 2/2 Running 0 37d 10.140.0. gke-chechiachang-pool-1-123456789-wcq0 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; fluentd-gcp-v3.2.0-5vc6l 2/2 Running 0 37d 10.140.0. gke-chechiachang-pool-1-123456789-tp05 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; fluentd-gcp-v3.2.0-6rqvc 2/2 Running 0 37d 10.140.0. gke-chechiachang-pool-1-123456789-5gqn \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; fluentd-gcp-v3.2.0-mmwk4 2/2 Running 0 37d 10.140.0. gke-chechiachang-pool-1-123456789-vxld \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 先透過 kubectl 看一下 node\n$ kubectl get node NAME STATUS ROLES AGE VERSION gke-chechaichang-pool-1-123456789-3bzp Ready \u0026lt;none\u0026gt; 37d v1.13.7-gke.8 gke-chechaichang-pool-1-123456789-5gqn Ready \u0026lt;none\u0026gt; 37d v1.13.7-gke.8 gke-chechaichang-pool-1-123456789-8n8z Ready \u0026lt;none\u0026gt; 37d v1.13.7-gke.8 ... gcloud compute ssh gke-chechaichang-pool-1-123456789-3bzp 如使用其他雲平台的 kubernetes service，或是 bare metal 的集群，請依照各自系統的方式連進去看看。\nssh node 找 log ssh 進去後就可以到處來探險，順便看看 GKE 跑在機器上到底做了什麼事情。\n如果官方有出文件，可能可以不用進來看。各位大德有發現文件請留言跟我說。我個人很喜歡自己架集群起來連就去看，面對照官方文件上寫的東西，當然大部份時候都是文件沒有帶到，有很多發現。\n$ ls /var/log gcp-*-log.pos kube-proxy.log containers/ metrics/ pods/ ... /var/log/containers 看一下，格式是 pod_namespace_container 這邊是 link 到 /var/log/pods/\n$ ls -al /var/log/containers lrwxrwxrwx 1 root root 105 Aug 12 07:42 fluentd-gcp-v3.2.0-st6cl_kube-system_fluentd-gcp-5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac.log -\u0026gt; /var/log/pods/kube-system_fluentd-gcp-v3.2.0-st6cl_b76bed0b-bcd4-11e9-a55c-42010a8c0008/fluentd-gcp/0.log 看到 pods 就覺得是你了，裡面有 pod 資料夾，格式是 namespace_pod_uuid\nls /var/log/pods default_pod-1-1234567890-fxxhp_uuid kube-system_fluentd-gcp-v3.2.0-st6cl_b76bed0b-bcd4-11e9-a55c-42010a8c0008 kube-system_heapster-v1.6.0-beta.1- kube-system_kube-proxy-gke- kube-system_l7-default-backend- kube-system_prometheus-to-sd- 再進去有 container log，格式是 pod_namespace_container.log，也是 link\nls -al /var/log/pods/kube-system_fluentd-gcp-v3.2.0-st6cl_b76bed0b-bcd4-11e9-a55c-42010a8c0008/fluentd-gcp/ lrwxrwxrwx 1 root root 165 Aug 12 07:42 0.log -\u0026gt; /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log 最終 link 到\nsudo su $ ls -alh /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/ total 3.9M drwx------ 4 root root 4.0K Aug 12 07:42 . drwx------ 92 root root 20K Sep 18 11:28 .. -rw-r----- 1 root root 3.8M Sep 18 11:29 5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log drwx------ 2 root root 4.0K Aug 12 07:42 checkpoints -rw------- 1 root root 7.8K Aug 12 07:42 config.v2.json -rw-r--r-- 1 root root 2.3K Aug 12 07:42 hostconfig.json drwx------ 2 root root 4.0K Aug 12 07:42 mounts 頭尾偷喵一下，確定是我們在找的東西\nhead /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log tail /var/lib/docker/containers/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac/5e38c9b63c8d767091b122a9aa48c576a88cc20b4470d9ca18a820afa5c168ac-json.log 這樣就找到我們的 log 了\n小節  使用 filebeat 去查找 透過 kubernetes daemonsets 可以快速佈置一份 filebeat 到所有 node，且設定都是一起更新 透過 kubernetes deployment 可以指定 filebeat 的位置，去跟隨想要監測的服務 如果不熟 log 處理流程，可以直接看偷看大廠的服務，會有很多靈感 沒事可以多跑進 Kubernetes 服務節點逛逛，有很多有趣的東西  ","date":1568883989,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"fa0cedc5d49a28d395b9eeb517eccdc4","permalink":"https://chechiachang.github.io/post/monitoring-gke-with-elk/","publishdate":"2019-09-19T17:06:29+08:00","relpermalink":"/post/monitoring-gke-with-elk/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，","tags":["kubernetes","elk","filebeat","fluentd","log","daemonsets","pod-affinity"],"title":"Monitoring GKE With Elk","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP  作為範例的 ELK 的版本是當前的 stable release 7.3.1。\n由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n ELK 的 beats 是輕量級的系統監測收集器，beats 收集到的 data 經過 mapping 可以送到 Elasticsearch 後，進行彈性的搜尋比對。\nbeat 有許多種類，依據收集的 data 區別：\n Auditbeat: Audit data Filebeat: Log files Functionbeat: Cloud data Heartbeat: Availability Journalbeat: Systemd journals Metricbeat: Metrics Packetbeat: Network traffic Winlogbeat: Windows event logs  這邊先以 filebeat 為例，在 GCE 上收集圓端服務節點上的服務日誌與系統日誌，並在 ELK 中呈現。\nInstallation 安裝及 filebeat 安全性設定的步驟，在這篇Secure ELK Stack 中已經說明。這邊指附上連結，以及官方文件 提供參考。\nConfiguration 這邊談幾個使用方面的設定。\n首先，apt 安裝的 filebeat 預設的 /etc/filebeat/filebeat.yml 不夠完整，我們先到 github 把對應版本的完整載下來。\nwget https://raw.githubusercontent.com/elastic/beats/master/filebeat/filebeat.reference.yml sudo mv filebeat.reference.yml /etc/filebeat/filebeat.yml Beats central management beats 透過手動更改 config 都可以直接設定，但這邊不推薦在此設定，理由是\n 系統中通常會有大量的 filebeat，每個都要設定，數量多時根本不可能 更改設定時，如果不一起更改，會造成資料格式不統一，之後清理也很麻煩  推薦的方式是透過 Kibana 對所有 filebeat 做集中式的的管理配置，只要初始設定連上 kibana，剩下的都透過 kibana 設定。文件在此，我們有空有可以分篇談這個主題。\n不過這邊還是待大家過一下幾個重要的設定。畢竟要在 kibana 上配置，filebeat 的設定概念還是要有。\nmodules filebeat 有許多模組，裡面已經包含許多預設的 template ，可以直接使用 default 的設定去系統預設的路徑抓取檔案，並且先進一步處理，減少我們輸出到 logstash 還要再做 pipeline 預處理，非常方便。\n例如這個 system module 會處理系統預設的 log 路徑，只要開啟 module ，就會自動處理對應的 input。\n- module: system syslog: enabled: true 剩下的就是照需求啟用 module ，並且給予對應的 input。\nELK 為自己的服務設定了不少 module ，直接啟用就可以獲取這協服務元件運行的 log 與監測數值。這也是 self-monitoring 監測數據的主要來源。\n- module: kibana - module: elasticsearch - module: logstash ... input filebeat 支援複數 inputs，每個 input 會啟動一個收集器，而 filebeat 收集目標是 log 檔案。基本上可以簡單理解為 filebeat 去讀取這些 log 檔案，並且在系統上紀錄讀取的進度，偵測到 log 有增加，變繼續讀取新的 log。\nfilebeat 具體的工作機制，可以看這篇How Filebeat works?\n這篇文件也提到 filebeat 是確保至少一次(at-least-once delivery)的數據讀取，使用時要特別注意重複獲取的可能。\n首先把 input 加上 ubuntu 預設的 log 路徑\nfilebeat.inputs: - type: log enabled: true paths: - /var/log/*.log 這邊注意 input 支援多種 type，參照完整設定檔案的說明配合自己的需求使用。\nProcessor 在 filebeat 端先進行資料的第一層處理，可以大幅講少不必要的資料，降低檔案傳輸，以及對 elasticsearch server 的負擔。\noutput output 也是 filebeat 十分重要的一環，好的 filebeat output 設定，可以大幅降低整體 ELK stack 的負擔。壞的設定也會直接塞爆 ELK stask。\noutput.elasticsearch: 直接向後送進 elasticsearch output.logstash: 先向後送到 logstash\n這邊非常推薦大家，所有的 beat 往後送進 elasticsearch 之前都先過一層 logstash，就算你的 logstash 內部完全不更改 data，沒有 pipeline mutation，還是不要省這一層。\n beat 的數量會隨應用愈來越多而線性增加，elasticsearch 很難線性 scale，或是 scale 成本很大 filebeat 沒有好好調校的話，對於輸出端的網路負擔很大，不僅佔用大量連線，傳輸檔案的大小也很大。 logstash 的 queue 與後送的 batch 機制比 filebeat 好使用 filebeat 是收 log 的，通常 log 爆炸的時候，是應用出問題的時候，這時候需要 log 交叉比對，發現 elasticsearch 流量也爆衝，反應很應用 logstash 透過一些方法，可以很輕易的 scale，由於 pipeline 本身可以分散是平行處理，scale logstash 並不會影響資料最終狀態。  load balance 有網友留言詢問 logstash 前面的 load balance 如何處理比較好，我這邊也順便附上。不只是 logstash ，所有自身無狀態(stateless) 的服務都可以照這樣去 scale。\n在 kubernetes 上很好處理，使用 k8s 預設的 service 就輕易作到簡易的 load balance\n 設置複數 logstash instances 使用 kubernetes 內部網路 service 實現 load balancing。  在 GCE 上實現的話，我說實話沒實作過，所以以下是鍵盤實現XD。\n官方文件 建議使用 beats 端設定多個 logstash url 來做 load balancing。\n但我不是很喜歡 beat 去配置多個 logstash url 的作法：beat 要感知 logstash 數量跟 url ，增加減少 logstash instance 還要更改 beats 配置，產生配置的依賴跟耦合。\n最好是在 logstash 前過一層 HAproxy 或是雲端服務的 Load balancer（ex. GCP https/tcp load balancer），beat 直接送進 load balance 的端點。\nautodiscover 如果有使用 container ，例如 docker 或 kubernetes，由於 container 內的 log 在主機上的位置是動態路徑，這邊可以使用 autodiscover 去尋找。\n在 kubernetes 上面的設定，之後會另開一天討論。\ndashboard kibana 預設是空的，沒有預先載入 dashboard，但我們會希望資料送進去，就有設定好的 dashboard ，圖像化把資料呈現出來。這部份需要從 beat 這邊向 kibana 寫入。\n在上面的部份設定好 kibana 的連線資料，沒有設定的話 beat 啟動會警告。\nsetup.dashboards.enabled: true 一起中就會檢查 kibana 是否有匯入 dashboard，沒有的話就匯入。\n也會一併匯入 modules 的 dashboard，例如如果有啟用 nginx module 處理 nginx 的 access log，nginx module 會處理 request source ip ，並透過 geoip database, 將 ip 轉會成經緯度座標。這時如果在 kibana 上有匯入 nginx dashboard，就可以看到圖像化的全球 request 分佈圖。\n小結  取得完整 filebeat 設定檔案並設定 filebeat 盡量透過 beat central management 來管理 beat 的設定檔 啟用對應 module 來更優雅的處理 log 後送到 elasticsearch 前的資料都必須經過精細的處理，送進去後就不好刪改了  ","date":1568805050,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"88ab2f49d8b5530b7adb867cb3b71627","permalink":"https://chechiachang.github.io/post/monitoring-gce-with-elk/","publishdate":"2019-09-18T19:10:50+08:00","relpermalink":"/post/monitoring-gce-with-elk/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，","tags":[],"title":"Monitoring GCE With ELK","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP  對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 有板友問到，要如何選擇要不要用 ELK，其實也這是整篇 ELK 的初衷。這邊分享一下 ELK 與其他選擇，以及選擇解決方案應該考慮的事情。\n其他常用的服務 Prometheus: 開源的 time series metrics 收集系統\nStackdriver: GCP 的 log 與 metrics 平台\nElastic Cloud: ELK 的 Sass\nSelf-hosted ELK\n或是依照需求混搭，各個服務使用的各層套件是可以相容，例如\n  在 GKE 上不用 beat 可以用 fluentd\n  Prometheus -\u0026gt; Stackdriver\n  ELK -\u0026gt; Stackdriver\n  Fluentd -\u0026gt; Prometheus \u0026hellip;\n  Sass vs cloud self-hosted vs on-premised\n  Metrics: ELK vs Prometheus vs Stackdriver\n  Logging: ELK vs Stackdriver\n  取捨原則 各個方法都各有利弊，完全取決於需求\n 已知條件限制，例如安全性考量就是要放在私有網路防火牆內，或是預算 資料讀取方式，有沒有要交叉比對收集的資料，還是單純依照時間序查詢 或是資料量非常大，應用數量非常多 維護的團隊，有沒有想，或有沒有能力自己養 self-host 服務  Sass vs Self-hosted vs On-premised Sass: 指的是直接用 Elasitc Cloud，或是直接使用公有雲的服務(ex. 在 GCP 上使用 stackdriver)\nCloud Self-hosted: 在公有雲上使用 ELK\nOn-Premised: 自己在機房搭設\n安全性 看公司的安全政策，允許將日誌及監控數據，送到私有網路以外的地方嗎？如果在防火牆內，搞不好 port 根本就不開給你，根本不用考慮使用外部服務。\n要知道服務的 log 其實可以看出很多東西．如果有特別做資料分析，敏感的資料，金流相關數據，通常不會想要倒到第三方服務平台。\n可能有做金流的，光是安全性這點，就必須選擇自架。\n成本 金錢成本 + 維護成本\n金錢成本就看各個服務的計費方式\n Elastic Cloud Pricing Self-hosted ELK \u0026amp; Prometheus：機器成本 公有雲服務(ex. GCP Stackdriver): 用量計費  維護成本: 工程師的月薪 * 每個月要花在維護服務的工時比例\n一般 Sass 代管的服務，會降低維護成本，基本上就是做到網頁點一點就可以用。\n如果公司有完整的維護團隊，有機房，服務的使用量也很大，當然 self-hosted 是比較省。 中小型企業以及新創，服務在公有雲上的，直接使用Sass 服務往往比較節省成本，服務直接由 Sass 維護，節省很多機器上管理跟日常維護。\n避免迷思，買外部服務的帳單是顯性的，報帳時看得到，而工程師維護的時間成本是隱性的。self-host 可能省下 Sass 費用，但工程因為分了時間去維護，而影響進度。這部分就看團隊如何取捨。\n易用性 如果應用都跑在公有雲上，可以考慮使用雲平台提供的監測服務，使用便利，而且整合度高。ex GCP 上，要啟用 Stackdriver 是非常輕鬆的事情，只是改一兩個選項，就可以開啟 / 關閉 logging 與 metrics\n如果是 On-premised 自家機房，也許 self-hosted 會更為適合。\n客製化程度 在大多數時候，沒有需要更改到服務的核心設定，都可以不可律客製化程度，直接使用 Sass 的設定，就能滿足大部分需求。可以等有有明確需求後再考慮這一點。短期內沒有特殊需求就可以從簡使用。\n使用GKE 到 Stackdriver 的話，對主機本身的機器是沒有控制權的，執行的 pipeline 也不太能更改 Elastic Cloud 有提供上傳 elasticsearch config 檔案的介面，也就是可以更改 server 運行的參數設定 Self-Hosted 除了上述的設定，還可以依照需求更改 ELK / prometheus 服務，在實體機器上的 topology，cpu 記憶體的資源配置，儲存空間配置等，可以最大化機器的效能。\nScalability 資料流量大，儲存空間消耗多，服務負擔大，可能就會需要擴展。\n一個是資料量的擴展。一個是為了應付服務的負擔，對 ELK 服務元件做水平擴展。\n除了 elasticsearch 以爲的元件，例如 kibana，apm-server, beats 都可以透過 kubernetes 輕易的擴展，唯有 elasticsearch ，由於又牽扯上述資料量的擴展，以及分佈，還有副本管理，index 本身的 lifecycle 管理。Elasticsearch 的 scaling 設定上是蠻複雜的，也有很多工要做。index 的 shards / replicas 設定都要注意到。否則一路 scale 上去，集群大的時候彼此 sharding sync 的效能消耗是否會太重。\nStackdriver 從使用者的角度，是不存在服務節點的擴展問題，節點的維護全都給 Sass 管理。資料量的擴展問題也不大，只要整理資料 pipeline，讓最後儲存的資料容易被查找。\nTimeseries vs non-timeseriese Prometheus 是自帶 time series database，stackdriver 也是 time series 的儲存。ELK 的 elasticsearch 是全文搜索引擎，用了 timestamp 做分析所以可以做到 time series 的資料紀錄與分析。這點在本質上是完全不同的。\n 光只處理 time series data，Prometheus 的 query 效能是比 elasticsearch 好很多 Elasticsearch 有大量的 index 維護，需要較多系統資源處理，在沒有 query 壓力的情形下會有系統自動維護的效能消耗 ELK 的資料不需要預先建模，就可以做到非常彈性的搜尋查找。Stackdriver 的話，無法用未建模的資料欄位交叉查找。  Log 收集方面  Elasticsearch 中的資料欄位透過 tempalte 匯入後，都是有做 index ，所以交叉查找，例如可以從 log text 中包含特定字串的紀錄，在做 aggregate 算出其他欄位的資料分佈。會比較慢，但是是做得到的全文搜索 Stackdriver 可以做基本的 filter ，例如 filter 某個欄位，但不能做太複雜的交叉比對，也不能針對 text 內容作交互查找，需要換出來另外處理。   Metrics 收集方面  (同上) Elasticsearch 可以用全文搜索，做到很複雜的交叉比對，例如：從 metrics 數值，計算在時間範圍的分佈情形(cpu 超過 50% 落在一天 24 小時，各個小時的次數) Stackdriver 只能做基本的 time series 查找，然後透過預先定義好的 field filter 資料，再各自圖像化。 Prometheus 也是必須依照 time series 查找，語法上彈性比 stackdriver 多很多，但依樣不能搜尋沒有 index 的欄位 這邊要替別提，雖然 Elasticsearch 能用全文搜索輕易地做到複雜的查詢語法，但以 metrics 來說，其實沒有太多跳脫 time series 查找的需求。能做到，但有沒有必要這樣做，可以打個問號。      個人心得，如果驗證全新的 business model，或是還不確定的需求，可以使用 ELK 做各種複雜的查詢\n如果需求明確，收進來的 log 處理流程都很明確，也許不用使用 ELK。\n 論系統資源 CP 值以及效能，time series 的 db 都會比 Elasticsearch 好上不少。 Elasticsearch 中也不太適合一直存放大量的資料在 hot 可寫可讀狀態，繪希好很多系統資源。  其他服務 Elastic 有出許多不同的增值服務\n Application Performance Monitoring(APM) Realtime User Monitoring(RUM) Machine Learning(ELK ML)  而 ELK 以外也都有不同的解決方案，例如\n GCP 也出了自己的 APM Sass Google Analytics(GA) 不僅能做多樣的前端使用者行為分析，還能整合 Google 收集到的使用者行為，做更多維度的分析  相較之下 ELK 在這塊其實沒有特別優勢。\nElastic Cloud 我這邊要特別說 Elastic Cloud vs ELK\nElatic Cloud 的運行方式，是代為向公與恩平台(aaws, gcp,\u0026hellip;)，帶客戶向平台租用機器，然後把 ELK 服務部署到租用的機器上。用戶這邊無法直接存取機器，只能透過 ELK 介面或是 Kibana , API 進入 ELK。Elastic Cloud 會監控無誤節點的狀況，並做到一定程度的代管。\n這邊指的一定程度的代管，是 Elastic Cloud 只是代為部署服務，監控。有故障時並不負責排除，如果 ELK 故障，簡單的問題（ex. 記憶體資源不足）會代為重開機器，但如果是複雜的問題，還是要用戶自己處理．但是用戶又沒有主機節點的直接存取權限，所以可能會造成服務卡住無法啟動，只能透過 Elastic Cloud 的管理介面嘗試修復。\n使用服務除了把服務都架設完以外，還是需要定期要花時間處理 performance tuning，設定定期清理跟維護。包括 kafka, redis, mongoDB, cassandra, SQLs\u0026hellip;都是一樣，架構越複雜，效能要求越高，這部分的工都會更多。如果公司有 DBA，或是專職維護工程師，那恭喜就不用煩惱。\nElasticsearch server 目前用起來，算是是數服務中，維護上會花比較多時間的服務。\n 因為引擎本身設計的架構，並不是很多人都熟悉。在使用ELK同時，對ELK底層引擎的運作流程有多熟悉，會直接影響穩定性跟跑出來的效能。 需要好好處理設計資料的儲存，如果使用上沒處理好，會直接讓整個ELK 掛掉。 然後產品本身的維護介面，目前只是在堪用，許多重要的功能也還在開發中。  如果公司有人會管 ELK，個人建議是可以 self-host\n小結  弄清楚需求，如果沒有特殊需求可以走 general solution Sass vs Self-hosted vs On-premised Time series vs non time series  ","date":1568803900,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"ce713ecdf2d61bf6975c1eb8ebc9c7eb","permalink":"https://chechiachang.github.io/post/elastic-or-not-elastic/","publishdate":"2019-09-18T18:51:40+08:00","relpermalink":"/post/elastic-or-not-elastic/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，","tags":[],"title":"ELK or Not ELK","type":"post"},{"authors":[],"categories":[],"content":"簡單講一下 certificate   X.509 是公鑰憑證(public key certificate) 的一套標準，用在很多網路通訊協定 (包含 TLS/SSL)\n  certificate 包含公鑰及識別資訊(hostname, organization, \u0026hellip;等資訊)\n  certificate 是由 certificate authority(CA) 簽署，或是自簽(Self-signed)\n  使用 browser 連入 https server時，會檢查 server 的 certificate 是否有效，確定這個 server 真的是合法的 site\n  在 elastic stack 上，如果有多個 elasticsearch server node 彼此連線，由於 node 彼此是 client 也是 server\n 使用 self-signed CA 產出來的 certificate，連入時會檢查使用的 certificate 是否由同一組 CA 簽署 server 使用 certificate，確定連入 server 的 client 都帶有正確的私鑰與 public certificate，是 authenticated user    附帶說明，X.509 有多種檔案格式\n .pem .cer, .crt, .der .p12 .p7b, .p7c \u0026hellip;  另外檔案格式可以有其他用途，也就是說裡面裝的不一定是 X.509 憑證\nCA $ openssl pkcs12 -in /etc/elasticsearch/config/elastic-stack-ca.p12 -info -nokeys MAC: sha1, Iteration 100000 MAC length: 20, salt length: 20 PKCS7 Data Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 50000 PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 50000 Certificate bag Bag Attributes friendlyName: ca localKeyID: subject=CN = Elastic Certificate Tool Autogenerated CA issuer=CN = Elastic Certificate Tool Autogenerated CA -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- issuer command name 為 Elastic autogen CA subject command name 為 Elastic autogen CA\n https://shazi.info/openssl-%E6%AA%A2%E6%B8%AC-ssl-%E7%9A%84%E6%86%91%E8%AD%89%E4%B8%B2%E9%8D%8A-certificate-chain/\nopenssl s_client -connect google.com https://medium.com/@superseb/get-your-certificate-chain-right-4b117a9c0fce\nopenssl verify -CAfile client-ca.cer client.cer openssl verify -show_chain -CAfile client-ca.cer client.cer Certificate 用 openssl 工具看一下內容，如果有密碼這邊要用密碼解鎖\n$ openssl pkcs12 -in /etc/elasticsearch/config/elastic-certificates.p12 -info -nokeys MAC: sha1, Iteration 100000 MAC length: 20, salt length: 20 PKCS7 Data Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 50000 PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 50000 Certificate bag Bag Attributes friendlyName: elk.asia-east1-b.c.machi-x.internal localKeyID: subject=CN = elk.asia-east1-b.c.machi-x.internal issuer=CN = Elastic Certificate Tool Autogenerated CA -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- Certificate bag Bag Attributes friendlyName: ca 2.16.840.1.113894.746875.1.1: \u0026lt;Unsupported tag 6\u0026gt; subject=CN = Elastic Certificate Tool Autogenerated CA issuer=CN = Elastic Certificate Tool Autogenerated CA -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- ","date":1568686536,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"885fcfbc404704596a33dacbb611a561","permalink":"https://chechiachang.github.io/post/x.509-certificate/","publishdate":"2019-09-17T10:15:36+08:00","relpermalink":"/post/x.509-certificate/","section":"post","summary":"簡單講一下 certificate X.509 是公鑰憑證(public key certificate) 的一套標準，用在很多網路通訊協定 (包含 TLS/SSL) certificate 包含公鑰及識別資訊(hostname, organization, \u0026hellip;","tags":["elk","https","ssl","tls","xpack","kubernetes"],"title":"X.509 certificate","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP  對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n\u0026ndash;\n上篇Self-host ELK stack on GCP 介紹了，elk stack 基本的安裝，安裝完獲得一個只支援 http (裸奔)的 elk stack，沒有 https 在公開網路上使用是非常危險的。這篇要來介紹如何做安全性設定。\n官方的文件在這裡，碎念一下，除非對 ELK 的功能有一定了解，不然這份真的不是很友善。建議從官方文件底下的Tutorial: Getting started with security 開始，過程比較不會這麼血尿。\n總之為了啟用 authentication \u0026amp; https，這篇要做的事情：\n enable x-pack \u0026amp; activate basic license Generate self-signed ca, server certificate, client certificate Configure Elasticsearch, Kibana, \u0026amp; other components to  use server certificate when act as server use client certificate when connect to an ELK server     啟用 X-pack Elasticsearch 的安全性模組由 x-pack extension 提供，在 6.3.0 之後的版本，安裝 elasticsearch 的過程中就預設安裝 x-pack。\n附上啟用的官方文件\n然而，由於舊版的 x-pack 是付費內容，目前的 elasticsearch 安裝完後，elasticsearch.yml 設定預設不啟用 x-pack，也就是說沒看到這篇官方文件的話，很容易就獲得沒有任何 security 功能的 ELK。\n雖然目前已經可以使用免費的 basic license 使用 security 功能，還是希望官方可以 default 啟用 security。\n$ sudo vim /etc/elasticsearch/elasticsearch.yml xpack.security.enabled: true xpack.license.self_generated.type: basic discovery.type: single-node 我們這邊啟用 xpack.security，同時將 self-generated license 生出來，我們這邊只使用基本的 basic subscription。若希望啟用更多功能，可以看官方subcription 方案介紹\n另外，如果不同時設定為 single-node 的話，預設會尋找其他elasticsearch node 來組成 cluster，而我們就必須要在所有 node 上啟用 security，這篇只帶大家做一個 single node cluster，簡化步驟。\n重啟 elasticsearch ，檢查 log，看啟動時有沒有載入 x-pack\nsudo systemctl restart elasticsearch $ tail -f /var/log/elasticsearch/elasticsearch.log [2019-09-16T07:39:49,467][INFO ][o.e.e.NodeEnvironment ] [elk] using [1] data paths, mounts [[/mnt/disks/elk (/dev/sdb)]], net usable_space [423.6gb], net total_space [491.1gb], types [ext4] [2019-09-16T07:39:49,474][INFO ][o.e.e.NodeEnvironment ] [elk] heap size [3.9gb], compressed ordinary object pointers [true] [2019-09-16T07:39:50,858][INFO ][o.e.n.Node ] [elk] node name [elk], node ID [pC22j9D4R6uiCM7oTc1Fiw], cluster name [elasticsearch] [2019-09-16T07:39:50,866][INFO ][o.e.n.Node ] [elk] version[7.3.1], pid[17189], build[default/deb/4749ba6/2019-08-19T20:19:25.651794Z], OS[Linux/4.15.0-1040-gcp/amd64], JVM[Oracle Corporation/OpenJDK 64-Bit Server VM/12.0.2/12.0.2+10] [2019-09-16T07:39:50,878][INFO ][o.e.n.Node ] [elk] JVM home [/usr/share/elasticsearch/jdk] ... [2019-09-16T07:39:59,108][INFO ][o.e.p.PluginsService ] [elk] loaded module [x-pack-ccr] [2019-09-16T07:39:59,109][INFO ][o.e.p.PluginsService ] [elk] loaded module [x-pack-core] ... [2019-09-16T07:39:59,111][INFO ][o.e.p.PluginsService ] [elk] loaded module [x-pack-logstash] [2019-09-16T07:39:59,113][INFO ][o.e.p.PluginsService ] [elk] loaded module [x-pack-voting-only-node] [2019-09-16T07:39:59,114][INFO ][o.e.p.PluginsService ] [elk] loaded module [x-pack-watcher] [2019-09-16T07:39:59,115][INFO ][o.e.p.PluginsService ] [elk] no plugins loaded [2019-09-16T07:40:07,964][INFO ][o.e.x.s.a.s.FileRolesStore] [elk] parsed [0] roles from file [/etc/elasticsearch/roles.yml] [2019-09-16T07:40:10,369][INFO ][o.e.x.m.p.l.CppLogMessageHandler] [elk] [controller/17314] [Main.cc@110] controller (64 bit): Version 7.3.1 (Build 1d93901e09ef43) Copyright (c) 2019 Elasticsearch BV [2019-09-16T07:40:11,776][DEBUG][o.e.a.ActionModule ] [elk] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security [2019-09-16T07:40:14,396][INFO ][o.e.d.DiscoveryModule ] [elk] using discovery type [single-node] and seed hosts providers [settings] [2019-09-16T07:40:16,222][INFO ][o.e.n.Node ] [elk] initialized [2019-09-16T07:40:16,224][INFO ][o.e.n.Node ] [elk] starting ... [2019-09-16T07:40:16,821][INFO ][o.e.t.TransportService ] [elk] publish_address {10.140.0.10:9300}, bound_addresses {[::]:9300} [2019-09-16T07:40:16,872][INFO ][o.e.c.c.Coordinator ] [elk] cluster UUID [1CB6_Lt-TUWEmRoN9SE49w] [2019-09-16T07:40:17,088][INFO ][o.e.c.s.MasterService ] [elk] elected-as-master ([1] nodes joined)[{elk}{pC22j9D4R6uiCM7oTc1Fiw}{Os-2FBjgSTOd1G_I3QYwVQ}{10.140.0.10}{10.140.0.10:9300}{dim}{ml.machine_memory=7836028928, xpack.installed=true, ml.max_open_jobs=20} elect leader, _BECOME_MASTER_TASK_, _FINISH_ELECTION_], term: 9, version: 921, reason: master node changed {previous [], current [{elk}{pC22j9D4R6uiCM7oTc1Fiw}{Os-2FBjgSTOd1G_I3QYwVQ}{10.140.0.10}{10.140.0.10:9300}{dim}{ml.machine_memory=7836028928, xpack.installed=true, ml.max_open_jobs=20}]} [2019-09-16T07:40:17,819][INFO ][o.e.c.s.ClusterApplierService] [elk] master node changed {previous [], current [{elk}{pC22j9D4R6uiCM7oTc1Fiw}{Os-2FBjgSTOd1G_I3QYwVQ}{10.140.0.10}{10.140.0.10:9300}{dim}{ml.machine_memory=7836028928, xpack.installed=true, ml.max_open_jobs=20}]}, term: 9, version: 921, reason: Publication{term=9, version=921} [2019-09-16T07:40:17,974][INFO ][o.e.h.AbstractHttpServerTransport] [elk] publish_address {10.140.0.10:9200}, bound_addresses {[::]:9200} [2019-09-16T07:40:17,975][INFO ][o.e.n.Node ] [elk] started [2019-09-16T07:40:18,455][INFO ][o.e.c.s.ClusterSettings ] [elk] updating [xpack.monitoring.collection.enabled] from [false] to [true] [2019-09-16T07:40:22,555][INFO ][o.e.l.LicenseService ] [elk] license [************************************] mode [basic] - valid [2019-09-16T07:40:22,557][INFO ][o.e.x.s.s.SecurityStatusChangeListener] [elk] Active license is now [BASIC]; Security is enabled Enable user authentication 啟用 security 之前，我們直接連入 Kibana http://10.140.0.10:5601 ，不用任何使用者登入，便可以完整使用 Kibana 功能（包含 admin 管理介面）。\n啟用 security 後，便需要使用帳號密碼登入。在這邊先用工具把使用者密碼產生出來。\n# 互動式 /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive # 自動產生 /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto 密碼生出來後，就把帳號密碼收好，等等會用到。之後初次登入也是使用這些密碼。\nConfigure passwords on client-side 由於已經啟用 authentication，其他 ELK 元件 (Kibana, logstash, filebeat, apm-server,\u0026hellip;) 連入 Elasticsearch 也都會需要各自的帳號密碼驗證。\n以 Kibana 為例，可以直接在 kibana.yml 中直接設定帳號密碼\n$ sudo vim /etc/kibana/kibana.yml elasticsearch.hosts: [\u0026quot;http://localhost:9200\u0026quot;] xpack.security.enabled: true elasticsearch.username: \u0026quot;kibana\u0026quot; elasticsearch.password: \u0026quot;***********\u0026quot; 當然，這邊就是明碼的，看了不太安全。\n或是使用 keystore 把 built-in user 的密碼加密，存在 kibana 的 keystore 裡面，重啟 kibana 時便會載入。\n/usr/share/kibana/bin/kibana-keystore create /usr/share/kibana/bin/kibana-keystore add elasticsearch.username /usr/share/kibana/bin/kibana-keystore add elasticsearch.password 如果有啟用 Filebeat 功能，beat 元件連入 elasticsearch 一樣需要設定\n/usr/share/apm-server/bin/filebeat keystore create /usr/share/apm-server/bin/filebeat add elasticsearch.username /usr/share/apm-server/bin/filebeat add elasticsearch.password 如果有啟用 application performance monitoring(APM) 功能，apm-server 元件連入 elasticsearch 一樣需要設定\n/usr/share/apm-server/bin/apm-server keystore create /usr/share/apm-server/bin/apm-server add elasticsearch.username /usr/share/apm-server/bin/apm-server add elasticsearch.password  Encrypting Communications 上面加了 username/password authentication，但如果沒 https/tls 基本上還是裸奔。接下來要處理連線加密。\n官方 tutorial\n一堆官方文件，我們先跳過XD\n elasticsearch security elastic stack ssl tls elasticsearch configuring tls certutil  分析一下需求跟規格 我們需要為每一個 node 生一組 node certificate，使用 node certificate 產生 client certificates 提供給其他 client，連入時會驗證 client 是否為 authenticated user。\n針對目前這個 single-node ELK stack，我們可能有幾種選擇\n 簽署一個 localhost，當然這個只能在 localhost 上的客戶端元件使用，別的 node 無法用這個連入 簽署一個 public DNS elk.chechiachang.com，可以在公開網路上使用，別人也可以使用這個DNS嘗試連入 簽署一個私有網域的 DNS，例如在 GCP 上可以使用內部dns服務  長這樣 elk.asia-east1-b.c.chechiachang.internal [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal   有需要也可以一份 server certificate 中簽署複數個 site  我們這邊選擇使用內部 dns，elk.asia-east1-b-c-chechaichang.internal，讓這個 single-node elk 只能透過內部網路存取。\n elasticsearch: elk.asia-east1-b.c.chechaichang.internal:9200 kibana: elk.asia-east1-b.c.chechaichang.internal:5601 外部要連近來 kibana，我們使用 vpn 服務連進私有網路  如果想使用外部 dns，讓 elk stack 在公開網路可以使用，ex. elk.chechiachang.com，可以\n GCP 的 load balancer掛進來，用 GCP 的 certificate manager 自動管理 certificate 或是在 node 上開一個 nginx server，再把 certificate 用 certbot 生出來  Generate certificates 先把 X.509 digital certificate 的 certificate authority(CA) 生出來。我們可以設定密碼保護這個檔案\nmkdir -p /etc/elasticsearch/config # CA generated with Elastic tool /usr/share/elasticsearch/bin/elasticsearch-certutil ca \\ -out /etc/elasticsearch/config/elastic-stack-ca.p12 生出來是 PKCS#12 格式的 keystore，包含：\n CA 的 public certificate CA 的基本資訊 簽署其他 node certificates 使用的私鑰(private key)  用 openssl 工具看一下內容，如果有密碼這邊要用密碼解鎖\n$ openssl pkcs12 -in /etc/elasticsearch/config/elastic-stack-ca.p12 -info -nokeys 附帶說明，X.509 有多種檔案格式\n .pem .cer, .crt, .der .p12 .p7b, .p7c \u0026hellip;  另外檔案格式可以有其他用途，也就是說裡面裝的不一定是 X.509 憑證。裡面的內容也不同。\nELK 設定的過程中，由於不是所有的 ELK component 都支援使用 .p12 檔案，我們在設定過程中會互相專換，或是混用多種檔案格式。\nGenerate certificate \u0026laquo;\u0026laquo;\u0026laquo;\u0026lt; HEAD\n我們用 elastic-stack-ca.p12 這組 keystore裡面的 CA 與 private key，為 elk.asia-east1-b.c.chechiachang.internal 簽一個 p12 keystore，裡面有\n node certificate node key CA certificate  這邊只產生一組 server certificate 給 single-node cluster 的 node-1\n=======\n我們用 elastic-stack-ca.p12 這組 keystore裡面的 CA 與 private key，為 elk.asia-east1-b.c.chechiachang.internal 簽一個 p12 keystore，裡面有\n node certificate node key CA certificate  這邊只產生一組 server certificate 給 single-node cluster 的 node-1\n如果 cluster 中有多個 elasticsearch，為每個 node 產生 certificate 時都要使用同樣 CA 來簽署，讓 server 信任這組 CA。\n使用 elasticsearch-certutil 簡化簽署過程，從產生 CA ，到使用 CA 簽署 certificate。另外，再產生 certificate 中使用 Subject Alternative Name(SAN)，並輸入 ip 與 dns。\n# certificate for site: private dns with Elastic CA /usr/share/elasticsearch/bin/elasticsearch-certutil cert \\ --ca /etc/elasticsearch/config/elastic-stack-ca.p12 \\ --name elk.asia-east1-b.c.chechaichang.internal \\ --dns elk.asia-east1-b.c.chechaichang.internal \\ --ip 10.140.0.10 \\ -out /etc/elasticsearch/config/node-1.p12 用 openssl 看一下內容，如果有密碼這邊要用密碼解鎖\n$ openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -info -nokeys server 用這個 certificate ，啟用 ssl。\nclient 使用這個 certificate 產生出來的 client.cer 與 client.key 與 server 連線，server 才接受客戶端是安全的。\n       25f5ab795b9e698333a36fde7ecf23a8ba9d4595 記得把所有權還給 elasticsearch 的使用者，避免 permission denied\n       # Change owner to fix read permission chown -R elasticsearch:elasticsearch /etc/elasticsearch/config 有密碼記得也要用 keystore 把密碼加密後喂給 elasticsearch\n/usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password 關於 X.509 Certifcate 之後有空我們來聊一下\n更新 elasticsearch 設定 Certificates 都生完了，接下來更改 elasticsearch 的參數，在 transport layer 啟用 ssl。啟用 security 後，在 transport layer 啟動 ssl 是必須的。\n$ sudo vim /etc/elasticsearch/elasticsearch.yml xpack.security.enabled: true xpack.security.transport.ssl.enabled: true # use certificate. full will verify dns and ip xpack.security.transport.ssl.verification_mode: certificate xpack.security.transport.ssl.keystore.path: /etc/elasticsearch/config/node-1.p12 xpack.security.transport.ssl.truststore.path: /etc/elasticsearch/config/node-1.p12 啟用 security 與 transport layer 的 ssl，然後指定 keystore路徑，讓 server 執行 client authentication 由於這筆 p12 帶有 CA certificate 作為 trusted certificate entry，所以也可以順便當作 trustore，讓 client 信任這個 CA\nsecurity 這邊提供了 server side (elasticsearch) 在檢查客戶端連線時的檢查模式(vertification mode)，文件有說明，可以設定\n certificate: 檢查 certificate 加密是否有效 full: 簽 node certificate 時可以指定 ip dns，啟用會檢查來源 node ip dns 是否也正確  (Optional) HTTP layer 啟動 ssl\nvim /etc/elasticsearch/elasticsearch.yml xpack.security.http.ssl.enabled: true xpack.security.http.ssl.keystore.path: /etc/elasticsearch/config/node-1.p12 xpack.security.http.ssl.truststore.path: /etc/elasticsearch/config/node-1.p12 /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password 重啟 elasticsearch，看一下 log\nsudo systemctl restart elasticsearch tail -f /var/log/elasticsearch/elasticsearch.log 然後你就發現，原來 kibana 連入 的 http 連線，不斷被 server 這端拒絕。所以以下要來設定 kibana\n Kibana  using kibana with security kibana configuring tls  使用剛剛簽的 server certificate，從裡面 parse 出 client-ca.cer，還有 client.cer 與 client.key\nmkdir -p /etc/kibana/config $ openssl pkcs12 --help Usage: pkcs12 [options] Valid options are: -chain Add certificate chain -nokeys Don't output private keys -nocerts Don't output certificates -clcerts Only output client certificates -cacerts Only output CA certificates -info Print info about PKCS#12 structure -nodes Don't encrypt private keys -in infile Input filename # no certs, no descript openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -nocerts -nodes \u0026gt; /etc/kibana/config/client.key openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -clcerts -nokeys \u0026gt; /etc/kibana/config/client.cer openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -cacerts -nokeys -chain \u0026gt; /etc/kibana/config/client-ca.cer sudo chown -R kibana:kibana /etc/kibana/config/ 更改 kibana 連入 elasticsearch 的連線設定\nsudo vim /etc/kigana/kibana.yml elasticsearch.hosts: [\u0026quot;https://elk.asia-east1-b.c.chechaichang.internal:9200\u0026quot;] xpack.security.enabled: true elasticsearch.ssl.certificate: /etc/kibana/config/client.cer elasticsearch.ssl.key: /etc/kibana/config/client.key elasticsearch.ssl.certificateAuthorities: [ \u0026quot;/etc/kibana/config/client-ca.cer\u0026quot; ] elasticsearch.ssl.verificationMode: full  指定 ssl.certificate, ssl.key 做連線 elasticsearch server 時的 user authentication 由於我們是 self-signed CA，所以需要讓客戶端信任這個我們自簽的 CA  注意這邊 elasticsearch.hosts 我們已經從 http://localhost 換成 https 的內部 dns，原有的 localhost 已經無法使用（如果 elasicsearch 有 enforce https 的話）\n重啟 Kibana，看一下 log\nsudo systemctl restart kibana journalctl -fu kibana 如果沒有一直噴 ssl certificate error 的話，恭喜你成功了\n然而，除了 kibana 以外，我們還有其他的 client 需要連入 elasticsearch\n 把上述步驟在 apm-server, filebeat, 其他的 beat 上也設定 如果在 k8s 上，要把 cer, key 等檔案用 volume 掛進去 \u0026laquo;\u0026laquo;\u0026laquo;\u0026lt; HEAD  Kibana 本身也有 server 的功能，讓其他 client 連入。例如讓 filebeat 自動將 document tempalte 匯入 kibana，我們也需要設定\n kibana server certificate filebeat client to kibana server  =======\nKibana 本身也有 server 的功能，讓其他 client 連入。例如讓 filebeat 自動將 document tempalte 匯入 kibana，我們也需要設定\n kibana server certificate filebeat client to kibana server  就是他們彼此互打，都要有 ca, key, cert\n但基本上的設定都一樣，下面可以不用看下去了XD 如果有用到再查文件就好，這邊直接小結\n 設定 security 前要先想號自己的需求，如何連入，安全性設定到哪邊 使用 utility 自簽 CA，然後產生 server certificate 使用 server certificate 再 parse 出 ca-certificate, client cers, key   kibana 作為 server 工作路徑可能是這樣： app(apm-client library) -\u0026gt; apm-server -\u0026gt; kibana -\u0026gt; elasticsearch\n kibana 連入 elasticsearch時， kibana 是 client 吃 elasticsearch 的憑證 apm-server 連入 kibana時，kibana 是 server，apm-server 吃 kibana 的憑證  首先更改 kibana 設定\n$ sudo vim /etc/kibana/kibana.yml server.ssl.enabled: true server.ssl.certificate: /etc/kibana/config/client.cer server.ssl.key: /etc/kibana/config/client.key 重啟 kibana\njournalctl -fu kibana Apm-server https://www.elastic.co/guide/en/apm/server/7.3/securing-apm-server.html\n應用端的 apm-client (ex. apm-python-client)，連入 apm-server\n 在 http 的狀況下，雖然有使用 secret-token，但還是裸奔 在 https 的狀況下，要把 certificates，然後餵給應用端的client library  更改 apm-server 的設定\nsudo vim /etc/apm-server/apm-server.yml host: \u0026quot;0.0.0.0:8200\u0026quot; secret_token: \u0026lt;設定一組夠安全的 token\u0026gt; rum: enabled: true kibana: protocol: \u0026quot;https\u0026quot; ssl.enabled: true output.kibana: enable: false # can only have 1 output output.elasticsearch: monitoring.elasticsearch: protocol: \u0026quot;https\u0026quot; username: \u0026quot;elastic\u0026quot; password: \u0026quot;*******************\u0026quot; hosts: [\u0026quot;elk.asia-east1-b.c.checahichang.internal:9200\u0026quot;] ssl.enabled: true ssl.verification_mode: full ssl.certificate_authorities: [\u0026quot;/etc/apm-server/config/client-ca.cer\u0026quot;] ssl.certificate: \u0026quot;/etc/apm-server/config/client.cer\u0026quot; ssl.key: \u0026quot;/etc/apm-server/config/client.key\u0026quot; 重啟 apm-server\nsystemctl restart apm-server journalctl -fu apm-server APM library 應用端的設定就需要依據 library 的實做設定，例如 flask-apmagent-python\nELASTIC_APM_SERVER_CERT=/etc/elk/certificates/client.cer apm agent python config server cert\nfilebeat 記得我們在 node 上有安裝 Self-monitoring filebeat，elasticsearch 改成 ssl 這邊當然也連不盡去了，再做同樣操作\nhttps://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html\nsudo apt-get install filebeat mkdir -p /etc/filebeat/config openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -nocerts -nodes \u0026gt; /etc/filebeat/config/client.key openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -clcerts -nokeys \u0026gt; /etc/filebeat/config/client.cer openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -cacerts -nokeys -chain \u0026gt; /etc/filebeat/config/client-ca.cer Restart filebeat\nsystemctl restart filebeat journalctl -fu filebeat  如果你的應用在 kubernetes 上 可以使用下面方法拿到 client.cer ，然後用 secret 塞進 k8s，在用 volume from secrets，掛給監測應用的 filebeat\n mkdir -p /etc/beats/config openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -nocerts -nodes \u0026gt; /etc/beats/config/client.key openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -clcerts -nokeys \u0026gt; /etc/beats/config/client.cer openssl pkcs12 -in /etc/elasticsearch/config/node-1.p12 -cacerts -nokeys -chain \u0026gt; /etc/beats/config/client-ca.cer gcloud compute scp elk:/etc/beats/config/* . client-ca.cer client.cer client.key kubectl -n elk create secret generic elk-client-certificates \\ --from-file=client-ca.cer=client-ca.cer \\ --from-file=client.cer=client.cer \\ --from-file=client.key=client.key kubectl apply -f elk/gke/filebeat/ ","date":1568559633,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"e3558f49cd97b73e5548fe3ea2d48b53","permalink":"https://chechiachang.github.io/post/secure-elk-stack/","publishdate":"2019-09-15T23:00:33+08:00","relpermalink":"/post/secure-elk-stack/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，","tags":["elk","tls","xpack","kubernetes"],"title":"Secure Elk Stack","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP  作為範例的 ELK 的版本是當前的 stable release 7.3.1。\n由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n\u0026ndash;\n簡介 ELK stack 官方說明文件\nELK 的元件  Elasticsearch: 基於 Lucene 的分散式全文搜索引擎 Logstash: 數據處理 pipeline Kibana: ELK stack 的管理後台與數據視覺化工具 Beats: 輕量級的應用端數據收集器，會從被監控端收集 log 與監控數據(metrics)  ELK 的工作流程 beats -\u0026gt; (logstash) -\u0026gt; elasticsearch -\u0026gt; kibana\n 將 beats 放在應用端的主機上，或是在容器化環境種作為 sidecar，跟應用放在一起 設定 beats 從指定的路徑收集 log 與 metrics 設定 beats 向後輸出的遠端目標 (Optional) beats 輸出到 logstash ，先進行數據的變更、格式整理，在後送到 elasticsearch beats 向後輸出到 elasticsearch，儲存數據文件(document)，並依照樣式(template)與索引(index)儲存，便可在 elasticsearch 上全文搜索數據 透過 Kibana，將 elasticsearch 上的 log 顯示  官方不是有出文件嗎 Elastic 官方準備了大量的文件，理論上要跟著文件一步一步架設這整套工具應該是十分容易。然而實際照著做卻遇上很多困難。由於缺乏 get-started 的範例文件，不熟悉 ELK 設定的使用者，常常需要停下來除錯，甚至因為漏掉某個步驟，而需要回頭重做一遍。\n說穿了本篇的技術含量不高，就只是一個踩雷過程。\nLets get our hands dirty.\nWARNING 這篇安裝過程沒有做安全性設定，由於 ELK stack 的安全性功能模組，在v6.3.0 以前的版本是不包含安全性模組的，官方的安裝說明文件將安全性設定另成一篇。我第一次安裝，全部安裝完後，才發現裏頭沒有任何安全性設定，包含帳號密碼登入、api secret token、https/tls 通通沒有，整組 elk 裸奔。\n我這邊分開的目的，不是讓大家都跟我一樣被雷(XD)，而是因為\n 另起一篇對安全性設定多加說明 在安全的內網中，沒有安全性設定，可以大幅加速開發與除錯  雖然沒有安全性設定，但仍然有完整的功能，如果只是在測試環境，或是想要評估試用 self-hosted ELK，這篇的說明已足夠。但千萬不要用這篇上 public network 或是用在 production 環境喔。\n如果希望第一次安裝就有完整的 security 設定，請等待下篇 Secure ELK Stask\n討論需求與規格 這邊只是帶大家過一下基礎安裝流程，我們在私有網路中搭建一台 standalone 的 ELK stack，通通放在一台節點(node)上。\nelk-node-standalone 10.140.0.10 app-node-1 10.140.0.11 ... ... 本機的 ELK stack 元件，彼此透過 localhost 連線\n Elasticsearch: localhost:9200 Kibana: localhost:5601 Apm-server: localhost:8200 Self Monitoring Services  私有網路中的外部服務透過 10.140.0.10\n beats 從其他 node 輸出到 Elasticsearch: 10.140.0.10:9200 beats 從其他 node 輸出到 Apm-server: 10.140.0.10:8200 在內部網路中 透過 browser 存取 Kibana: 10.140.0.10:5601  standalone 的好處:\n 方便 (再次強調這篇只是示範，實務上不要貪一時方便，維運崩潰) 最簡化設定，ELK 有非常大量的設定可以調整，這篇簡化了大部分  Standalone可能造成的問題:\n No High Availablity: 沒有任何容錯備援可以 failover，這台掛就全掛 外部服務多的話，很容易就超過 node 上對於網路存取的限制，造成 tcp drop 或 delay。需要調整 ulimit 來增加網路，當然這在雲端上會給維運帶來更多麻煩，不是一個好解法。  如果要有 production ready 的 ELK\n HA 開起來 把服務分散到不同 node 上, 方便之後 scale out 多開幾台  elasticsearch-1, elasticsearch-2, elasticsearch-3\u0026hellip; kibana-1 apm-server-1, apm-server-2, \u0026hellip;   如果應用在已經容器化, 這些服務元件也可以上 Kubernetes 做容器自動化，這個部份蠻好玩，如果有時間我們來聊這篇  主機設定 Elasticsearch 儲存數據會佔用不少硬碟空間，我個人的習慣是只要有額外占用儲存空間，都要另外掛載硬碟，不要占用 root，所以這邊會需要另外掛載硬碟。\nGCP 上使用 Google Compote Engine 的朋友，可以照 Google 官方操作步驟操作\n完成後接近這樣\n$ df -h $ df --human-readable Filesystem Size Used Avail Use% Mounted on /dev/sda1 9.6G 8.9G 682M 93% / /dev/sdb 492G 63G 429G 13% /mnt/disks/elk $ ls /mnt/disks/elk /mnt/disks/elk/elasticsearch /mnt/disks/elk/apm-server /mnt/disks/elk/kibana 至於需要多少容量，取決收集數據的數量，落差非常大，可以先上個 100Gb ，試跑一段時間，再視情況 scale storage disk。\n開防火牆 需要開放 10.140.0.10 這台機器的幾個 port\n elasticsearch :9200 來源只開放私有網路其他 ip 10.140.0.0/9 apm-server :8200 (同上) kibana :5601 (同上)，如果想從外部透過 browser開，需要 whitelist ip  GCP 上有 default 的防火牆允許規則，私有網路可以彼此連線\n default-allow-internal: :all :10.140.0.0/9 tcp:0-65535  Install Elasticsearch Install Elasticsearch 官方文件 7.3\n我們這邊直接在 ubuntu 18.04 上使用 apt 作為安裝\nsudo apt-get install apt-transport-https wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - add-apt-repository \u0026quot;deb https://artifacts.elastic.co/packages/7.x/apt stable main\u0026quot; sudo apt-get update sudo apt-get install elasticsearch 安裝完後路徑長這樣\n/etc/elasticsearch /etc/elasticsearch/elasticsearch.yml /etc/elasticsearch/jvm.options # Utility /usr/share/elasticsearch/bin/ # Log /var/log/elasticsearch/elasticsearch.log 有需要也可以複寫設定檔，把 log 也移到 /mnt/disks/elk/elasticsearch/logs\n服務控制 透過 systemd 管理，我們可以用 systemctl 控制， 用戶 elasticsearch:elasticsearch，操作時會需要 sudo 權限。\n但在啟動前要先調整數據儲存路徑，並把權限移轉給使用者。\nmkdir -p /mnt/disks/elk/elasticsearch chown elasticsearch:elasticsearch /mnt/disks/elk/elasticsearch 設定檔案 ELK 提供了許多可設定調整的設定,但龐大的設定檔案也十分難上手。我們這邊先簡單更改以下設定檔案\nsudo vim /etc/elasticsearch/elasticsearch.yml # Change Network network.host: 0.0.0.0 # Change data path path.data: /mnt/disks/elk/elasticsearch vim /etc/elasticsearch/jvm-options # Adjust heap to 4G -Xms4g -Xmx4g # Enable xpack.security discovery.seed_hosts: [\u0026quot;10.140.0.10\u0026quot;] discovery.type: \u0026quot;single-node\u0026quot; xpack.security.enabled: true xpack.security.transport.ssl.enabled: true xpack.license.self_generated.type: basic 6.3.0 後的版本已經附上安全性模組 xpack，這邊順便開起來。關於 xpack 的安全性設定，這邊先略過不提。\n有啟用 xpack ，可以讓我們透過 elasticsearch 附帶的工具，產生使用者與帳號密碼。\n/usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto # Keep your passwords safe 然後把啟動 Elasticsearch\nsudo systemctl enable elasticsearch.service sudo systemctl start elasticsearch.service sudo systemctl status elasticsearch.service 看一下 log，確定服務有在正常工作\ntail -f /var/log/elasticsearch/elasticsearch.log 在 node 上試打 Elasticsearch API\n$ curl localhost:9200 { \u0026quot;name\u0026quot; : \u0026quot;elk\u0026quot;, \u0026quot;cluster_name\u0026quot; : \u0026quot;elasticsearch\u0026quot;, \u0026quot;cluster_uuid\u0026quot; : \u0026quot;uiMZe7VETo-H6JLFLF4SZg\u0026quot;, \u0026quot;version\u0026quot; : { \u0026quot;number\u0026quot; : \u0026quot;7.3.1\u0026quot;, \u0026quot;build_flavor\u0026quot; : \u0026quot;default\u0026quot;, \u0026quot;build_type\u0026quot; : \u0026quot;deb\u0026quot;, \u0026quot;build_hash\u0026quot; : \u0026quot;4749ba6\u0026quot;, \u0026quot;build_date\u0026quot; : \u0026quot;2019-08-19T20:19:25.651794Z\u0026quot;, \u0026quot;build_snapshot\u0026quot; : false, \u0026quot;lucene_version\u0026quot; : \u0026quot;8.1.0\u0026quot;, \u0026quot;minimum_wire_compatibility_version\u0026quot; : \u0026quot;6.8.0\u0026quot;, \u0026quot;minimum_index_compatibility_version\u0026quot; : \u0026quot;6.0.0-beta1\u0026quot; }, \u0026quot;tagline\u0026quot; : \u0026quot;You Know, for Search\u0026quot; } Kibana 有了正常工作的 Elasticsearch，接下來要安裝 kibana，由於 apt repository 已經匯入，這邊直接\nsudo apt-get update sudo apt-get install kibana 一樣快速設定一下\n$ vim /etc/kibana/kinana.yml # change server.host from localhost to 0.0.0.0 to allow outside requests server.host: \u0026quot;0.0.0.0\u0026quot; # Add elasticsearch password elasticsearch.username: \u0026quot;kibana\u0026quot; elasticsearch.password: sudo systemctl enable kibana.service sudo systemctl start kibana.service sudo systemctl status kibana.service 檢查 log 並試打一下\nsudo systemctl status kibana $ curl localhost:5601 透過內網 ip 也可以用 browser 存取 使用 elastic 這組帳號密碼登入，可以有管理員權限 可以檢視一下 kibana 的頁面，看一下是否系統功能都上常上線 http://10.140.0.10/app/monitoring#\nFilebeat 以上是 ELK 最基本架構: elasticsearch 引擎與前端視覺化管理工具 Kibana。當然現在進去 kibana 是沒有數據的，所以我們現在來安裝第一個 beat，收集第一筆數據。\n你可能會覺得奇怪: 我現在沒有任何需要監控的應用，去哪收集數據?\nELK 提供的自我監測 (self-monitoring) 的功能，也就是在 node 上部屬 filebeat 並啟用 modules，便可以把這台 node 上的 elasticsearch 運行的狀況，包含cpu 狀況、記憶體用量、儲存空間用量、安全性告警、\u0026hellip;都做為數據，傳到 elasticsearch 中，並在 Kibana monitoring 頁面製圖顯示。\n這邊也剛好做為我們 ELK stack 的第一筆數據收集。\nWARNING: 這邊一樣要提醒， production 環境多半會使用另外一組的 elasticsearch 來監控主要的這組 elastic stack，以維持 elk stack 的穩定性，才不會自己 monitoring 自己，結果 elastic 掛了，metrics 跟錯誤訊息都看不到。\n官方安裝文件\nsudo apt-get update sudo apt-get install filebeat 預設的 filebeat.yml 設定檔案不是完整的，請到官網下載完整版，但官網沒給檔案連結(慘)，只有網頁版 https://www.elastic.co/guide/en/beats/filebeat/7.3/filebeat-reference-yml.html\n我們上 github 把她載下來\n$ wget https://raw.githubusercontent.com/elastic/beats/v7.3.1/filebeat/filebeat.reference.yml $ sudo mv filebeat-reference-y $ sudo vim /etc/filebeat/filebeat.yml # Enable elasticsearch module and kibana module to process metrics of localhost elasticsearch \u0026amp; kibana filebeat.modules: - module: elasticsearch # Server log server: enabled: true - module: kibana # All logs log: enabled: true # The name will be added to metadata name: filebeat-elk fields: env: elk # Add additional cloud_metadata since we're on GCP processors: - add_cloud_metadata: ~ # Output to elasticsearch output.elasticsearch: enabled: true hosts: [\u0026quot;localhost:9200\u0026quot;] protocol: \u0026quot;http\u0026quot; username: \u0026quot;elastic\u0026quot; password: # Configure kibana with filebeat: add template, dashboards, etc... setup.kibana: host: \u0026quot;localhost:5601\u0026quot; protocol: \u0026quot;http\u0026quot; username: \u0026quot;elastic\u0026quot; password: 啟動 filebeat\nsudo systemctl start filebeat 看一下 log，filebeat 會開始收集 elasticsearch 的 log 與 metrics，可以在 log 上看到收集的狀況。\n$ sudo journalctl -fu filebeat Sep 15 06:28:50 elk filebeat[9143]: 2019-09-15T06:28:50.176Z INFO [monitoring] log/log.go:145 Non-zero metrics in the last 30s {\u0026quot;monitoring\u0026quot;: {\u0026quot;metrics\u0026quot;: {\u0026quot;beat\u0026quot;:{\u0026quot;cpu\u0026quot;:{\u0026quot;system\u0026quot;:{\u0026quot;ticks\u0026quot;:1670860,\u0026quot;time\u0026quot;:{\u0026quot;ms\u0026quot;:66}},\u0026quot;total\u0026quot;:{\u0026quot;ticks\u0026quot;:6964660,\u0026quot;time\u0026quot;:{\u0026quot;ms\u0026quot;:336},\u0026quot;value\u0026quot;:6964660},\u0026quot;user\u0026quot;:{\u0026quot;ticks\u0026quot;:5293800,\u0026quot;time\u0026quot;:{\u0026quot;ms\u0026quot;:270}}},\u0026quot;handles\u0026quot;:{\u0026quot;limit\u0026quot;:{\u0026quot;hard\u0026quot;:4096,\u0026quot;soft\u0026quot;:1024},\u0026quot;open\u0026quot;:11},\u0026quot;info\u0026quot;:{\u0026quot;ephemeral_id\u0026quot;:\u0026quot;62fd4bfa-1949-4356-9615-338ca6a95075\u0026quot;,\u0026quot;uptime\u0026quot;:{\u0026quot;ms\u0026quot;:786150373}},\u0026quot;memstats\u0026quot;:{\u0026quot;gc_next\u0026quot;:7681520,\u0026quot;memory_alloc\u0026quot;:4672576,\u0026quot;memory_total\u0026quot;:457564560376,\u0026quot;rss\u0026quot;:-32768},\u0026quot;runtime\u0026quot;:{\u0026quot;goroutines\u0026quot;:98}},\u0026quot;filebeat\u0026quot;:{\u0026quot;events\u0026quot;:{\u0026quot;active\u0026quot;:-29,\u0026quot;added\u0026quot;:1026,\u0026quot;done\u0026quot;:1055},\u0026quot;harvester\u0026quot;:{\u0026quot;open_files\u0026quot;:4,\u0026quot;running\u0026quot;:4}},\u0026quot;libbeat\u0026quot;:{\u0026quot;config\u0026quot;:{\u0026quot;module\u0026quot;:{\u0026quot;running\u0026quot;:0}},\u0026quot;output\u0026quot;:{\u0026quot;events\u0026quot;:{\u0026quot;acked\u0026quot;:1055,\u0026quot;active\u0026quot;:-50,\u0026quot;batches\u0026quot;:34,\u0026quot;total\u0026quot;:1005},\u0026quot;read\u0026quot;:{\u0026quot;bytes\u0026quot;:248606},\u0026quot;write\u0026quot;:{\u0026quot;bytes\u0026quot;:945393}},\u0026quot;pipeline\u0026quot;:{\u0026quot;clients\u0026quot;:9,\u0026quot;events\u0026quot;:{\u0026quot;active\u0026quot;:32,\u0026quot;published\u0026quot;:1026,\u0026quot;total\u0026quot;:1026},\u0026quot;queue\u0026quot;:{\u0026quot;acked\u0026quot;:1055}}},\u0026quot;registrar\u0026quot;:{\u0026quot;states\u0026quot;:{\u0026quot;current\u0026quot;:34,\u0026quot;update\u0026quot;:1055},\u0026quot;writes\u0026quot;:{\u0026quot;success\u0026quot;:35,\u0026quot;total\u0026quot;:35}},\u0026quot;system\u0026quot;:{\u0026quot;load\u0026quot;:{\u0026quot;1\u0026quot;:1.49,\u0026quot;15\u0026quot;:0.94,\u0026quot;5\u0026quot;:1.15,\u0026quot;norm\u0026quot;:{\u0026quot;1\u0026quot;:0.745,\u0026quot;15\u0026quot;:0.47,\u0026quot;5\u0026quot;:0.575}}}}}} 如果數據都有送出，就可以回到 kibana 的頁面，看一下目前這個 elasticsearch 集群，有開啟 monitoring 功能的元件們，是否都有正常工作。\nhttp://10.140.0.10/app/monitoring#\n頁面長得像這樣\n  Standalone cluster 中的 filebeat，是還未跟 elasticsearch 配對完成的數據，會顯示在另外一個集群中，配對完後會歸到 elk cluster 中，就是我們的主要 cluster。\n點進去可以看各個元件的服務情形。\n小結  簡單思考 self-host ELK stack 搭建的架構 在單一 node 上安裝最簡易的 elastic stack 設定元件的 output 位置 設定 self-monitoring  恭喜各位獲得一個裸奔但是功能完整的 ELK, 我們下篇再向安全性邁進。\n","date":1568518983,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569123164,"objectID":"7c82de693b6423525d081c7ff85aa7b3","permalink":"https://chechiachang.github.io/post/self-host-elk-stack-on-gcp/","publishdate":"2019-09-15T11:43:03+08:00","relpermalink":"/post/self-host-elk-stack-on-gcp/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，","tags":["gcp","elk","kubernetes","elasticsearch"],"title":"Self-host ELK stack - Installation","type":"post"},{"authors":[],"categories":[],"content":"各位好，我是Che-Chia Chang，社群上常用的名子是 David Chang。是個軟體工程師，專長的領域是後端開發，開發維運，容器化應用，以及Kubernetes開發管理。目前為 Golang Taiwan Meetup 的 organizer。\n受到友人們邀請（推坑）參加了2020 It邦幫忙鐵人賽，挑戰在30天內，每天發一篇技術分享文章。一方面將工作上遇到的問題與解法分享給社群，另一方面也是給自己一點成長的壓力，把這段時間的心得沈澱下來，因此也了這系列文章。\n本系列文章重點有三：\n  提供的解決方案，附上一步步的操作步驟。希望讓讀者可以重現完整操作步驟，直接使用，或是加以修改\n  著重 Google Cloud Platform，特別是Google Compute Engine (GCE) 與Google Kubernetes Engine (GKE) 兩大服務。這也是我最熟悉的平台，順便推廣，並分享一些雷點。\n  從維運的角度除錯，分析問題，提升穩定性。\n  預定的主題如下（可能會依照實際撰寫狀況微調）\n ELK Stask on GCP (8)  Self-host ELK stack on GCP Secure ELK Stask 監測 Google Compute Engine 上服務的各項數據 監測 Google Kubernetes Engine 的各項數據 是否選擇 ELK 作為解決方案 使用 logstash pipeline 做數據前處理 Elasticsearch 日常維護：數據清理，效能調校，永久儲存 Debug ELK stack on GCP   Kafka HA on Kubernetes(6)  [Deploy kafka-ha]({{ ref \u0026ldquo;/post/kafka-deployment-on-kubernetes\u0026rdquo; }}) [Kafka Introduction]({{ ref \u0026ldquo;/post/kafka-introduction\u0026rdquo; }}) [kafka 基本使用]({{ ref \u0026ldquo;/post/kafka-basic-usage\u0026rdquo; }}) [kafka operation scripts]({{ ref \u0026ldquo;/post/kafka-operation-script\u0026rdquo;}}) [集群內部的 HA topology]({{ ref \u0026ldquo;/post/kafka-ha-topology\u0026rdquo; }}) [集群內部的 HA 細節]({{ ref \u0026ldquo;/post/kafka-ha-continued\u0026rdquo; }}) Prometheus Metrics Exporter 很重要 效能調校   在 GKE 上部署 Redis HA (5)  使用 helm 部署 redis-ha Redis HA with sentinel Redis sentinel topology [Redis HA with HAproxy]({{ ref \u0026ldquo;/post/redis-ha-on-haproxy\u0026rdquo; }}) [Redis HA Failure Recovery]({{ ref \u0026ldquo;/post/redis-ha-failure-recovery\u0026rdquo; }}) Prometheus Metrics Exporter   Prometheus / Grafana (5)  GKE 上自架 Prometheus GKE 上自架 Grafana scrape config \u0026amp; exporter Dive into Redis Exporter 輸出 kube-state 的監測數據   Nginx Ingress (3)  Deploy Nginx Ingress Controller Configure Nginx Ingress   Cert-manager (3)  Deploy cert-manager How cert-manager work Cert-manager complete workflow   Kubernetes CRD \u0026amp; Operator-sdk (3)  Introduction about custom resource Deployment \u0026amp; Usage Deployment \u0026amp; Usage    文章發表於鐵人挑戰頁面，同時發布與本站備份。有任何謬誤，還煩請各方大德\u0026lt;3透過底下的聯絡方式聯絡我，感激不盡。\n Features\n step-by-step guide for deployment: guarentee a running deployment on GCP basic configuration, usage, monitoring, networking on GKE debugging, stability analysis in an aspect of devop  Topics\n ELK stack(8)  Deploy self-hosted ELK stack on GCE instance Secure ELK stack with SSL and role-based authentication Monitoring services on Kubernetes with ELK beats Monitoring services on GCE instances Logstash pipelines and debugging walk through Elasticsearch operations: house-cleaning, tuning, pernament storage Elasticsearch maitainence, trouble shooting Get-Started with Elastic Cloud SASS   General operations on Kubernetes(4)  Kubernetes Debug SOP Kubectl cheat sheet Secure services with SSL by cert-manager Speed up container updating with operator  My operator example     Deploy Kafka HA on Kubernetes(4)  deploy kafka-ha on Kubernertes with helm in-cluster networking configuration for high availability basic app-side usage, performance tuning Operate Kafka: update config, upgrade version, migrate data   Promethus / grafana(5)  Deploy Prometheus / Grafana stack on GCE instance Monitoring services on Kubernetes with exporters Export Kubernetes metrics to Prometheus Export Redis-ha metrics to Prometheus Export Kafka metrics to Prometheus   GCP networking(4)  Firewall basic concept for private network with GCE instances \u0026amp; Kubernetes Load balancer for Kubernetes service \u0026amp; ingress DNS on GCP from Kube-dns to GCP DNS service   GCP log management(3)  Basic usage about GCP logging \u0026amp; GCP Error Report Stackdriver, metrics, alerts Logging on GKE from gcp-fluentd to stackdriver    ","date":1568019363,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571229622,"objectID":"71ec55f87de7a48a942c10d2ee651db0","permalink":"https://chechiachang.github.io/post/2020-ithome-ironman-challenge/","publishdate":"2019-09-09T16:56:03+08:00","relpermalink":"/post/2020-ithome-ironman-challenge/","section":"post","summary":"2020 IT邦幫忙鐵人賽","tags":[],"title":"2020 IT邦幫忙鐵人賽","type":"post"},{"authors":[],"categories":[],"content":"2020 It邦幫忙鐵人賽 系列文章\n 在 GKE 上部署 Redis HA  使用 helm 部署 redis-ha Redis HA with sentinel Redis sentinel topology Redis HA with HAproxy 集群內部的 HA 設定，網路設定 應用端的基本範例，效能調校 在 GKE 上維運 redis    由於我比較熟悉 GCP / GKE 的服務，這篇的操作過程都會以 GCP 平台作為範例，不過操作過程大體上是跨平台通用的。\n寫文章真的是體力活，覺得我的文章還有參考價值，請左邊幫我點讚按個喜歡，右上角幫我按個追縱，底下歡迎留言討論。給我一點繼續走下去的動力。\n對我的文章有興趣，歡迎到我的網站上 https://chechiachang.github.io 閱讀其他技術文章，有任何謬誤也請各方大德直接聯繫我，感激不盡。\n 摘要  Redis Sentinel Topology  Topology  Masters: M1, M2, M3, \u0026hellip;, Mn. Slaves: R1, R2, R3, \u0026hellip;, Rn (R stands for replica). Sentinels: S1, S2, S3, \u0026hellip;, Sn. Clients: C1, C2, C3, \u0026hellip;, Cn. 每個方格代表一台機器或是 VM  2 Sentinels DON'T DO THIS\n+----+ +----+ | M1 |---------| R1 | | S1 | | S2 | +----+ +----+ Configuration: quorum = 1 這個設定下，如果 M1 掛了需要 failover，很有可能 S1 跟著機器一起掛了，S2 會沒有辦法取得多數來執行 failover，整個系統掛掉\n3 VM  +----+ | M1 | | S1 | +----+ | +----+ | +----+ | R2 |----+----| R3 | | S2 | | S3 | +----+ +----+ Configuration: quorum = 2 這是最基本的蛋又兼顧安全設定的設置\n如果 M1 死了 S1 跟著機器故障，S2 與 S3 還可以取得多數，順利 failover 到 R2 或是 R3。\n寫入資料遺失  +----+ | M1 | | S1 | \u0026lt;- C1 (writes will be lost) +----+ | / / +------+ | +----+ | [M2] |----+----| R3 | | S2 | | S3 | +------+ +----+  failover 之前，M1 是 master，Client 的寫入往 M1 寫 M1 網路故障，M2 failover 後成為新的 master，可是 Client 往 M1 寫入的資料並無法 sync 回 M2 等網路修復後，M1 回覆後會變成 R1 變成 slave，由 M2 去 sync R1，變成 R1 在 master 時收到的寫入資料遺失  為了避免這種情形，做額外的設定\n min-slaves-to-write 1 min-slaves-max-lag 10  當 master 發現自己再也無法 sync 到足夠的 slave，表示 master 可能被孤立，這時主動拒絕客戶端的寫入請求。客戶端被拒絕後，會再向 sentinel 取得有效的 master，重新執行寫入請求，確保資料寫到有效的 master 上。\nSentinel 放在 Client 端  +----+ +----+ | M1 |----+----| R1 | | | | | | +----+ | +----+ | +------------+------------+ | | | | | | +----+ +----+ +----+ | C1 | | C2 | | C3 | | S1 | | S2 | | S3 | +----+ +----+ +----+ 有些情形，redis 這端只有兩台可用機器，這種情形可以考慮把 sentinel 放在客戶端的機器上\n 仍然維持了獨立的 3 sentinels 的穩定 sentinel 與 client 所觀察到的 redis 狀態是相同的 如果 M1 死了，要 failover ，客戶端的 3 sentinel 可以正確地執行 failover，不受故障影響  客戶端又不足 3 個  +----+ +----+ | M1 |----+----| R1 | | S1 | | | S2 | +----+ | +----+ | +------+-----+ | | | | +----+ +----+ | C1 | | C2 | | S3 | | S4 | +----+ +----+ Configuration: quorum = 3 +----+ +----+ | M1 |----+----| R1 | | S1 | | | S2 | +----+ | +----+ | | | +----+ | C1 | | S3 | +----+ Configuration: quorum = 2  跟上個例子類似，但又額外確保 3 sentinels 如果 M1 死了，剩下的 sentinel 可以正確 failover  ","date":1566547930,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570114230,"objectID":"cfa1b8c2ca63e605de5e7cb8658a3c44","permalink":"https://chechiachang.github.io/post/redis-ha-topology/","publishdate":"2019-08-23T16:12:10+08:00","relpermalink":"/post/redis-ha-topology/","section":"post","summary":"2020 It邦幫忙鐵人賽 系列文章 在 GKE 上部署 Redis HA 使用 helm 部署 redis-ha Redis HA with sentinel Redis sentinel topology Redis HA with HAproxy 集群內部的 HA 設定，網路設定 應用端的基本範例，效能調校 在 GKE 上維運 redis 由","tags":["kubernetes","redis","ci","cd"],"title":"Redis Ha Topology","type":"post"},{"authors":[],"categories":[],"content":"API resources kubectl api-resources ","date":1561094273,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566547740,"objectID":"cb4f5e8cea40783770693b4e6baf0d66","permalink":"https://chechiachang.github.io/post/kuberentes-source-code/","publishdate":"2019-06-21T13:17:53+08:00","relpermalink":"/post/kuberentes-source-code/","section":"post","summary":"API resources kubectl api-resources ","tags":[],"title":"Kuberentes Source Code","type":"post"},{"authors":null,"categories":null,"content":"","date":1559454714,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559455067,"objectID":"39a764db7449bf949f1eb4b54becb2be","permalink":"https://chechiachang.github.io/project/quantum-computing-journey/","publishdate":"2019-06-02T13:51:54+08:00","relpermalink":"/project/quantum-computing-journey/","section":"project","summary":"","tags":["quantum-computing","ibm-q-experience","tutorial"],"title":"Quantum Computing Journey","type":"project"},{"authors":[],"categories":[],"content":"This post is about my learning steps for quantum-computing.\nFor a quick-start tutorial, check my workshop project throught the project link above.\nResources Courses\nCoursera\non MIT x pro\nQuantum Information Processing from UW Madison\nQuantum Computation by John Preskill\nIBM Q Experience\nhttps://github.com/Qiskit/openqasm\nhttps://github.com/Qiskit/qiskit-tutorials\nIBM Q Experience Day 1 Getting Started with Circuit Composer\nHello Quantum World circuit transformed two qubits, from $ \\vert0\\rangle $ to $ \\frac{\\vert00\\rangle + \\vert11\\rangle}{\\sqrt{2}} $\nQuestions\n [] Hadamard Gate [] Bell states  [] Annotations    ","date":1559442097,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559531117,"objectID":"291a457ec654f749d1a75bb365b864ef","permalink":"https://chechiachang.github.io/post/journey-to-quantum-computing/","publishdate":"2019-06-02T10:21:37+08:00","relpermalink":"/post/journey-to-quantum-computing/","section":"post","summary":"This post is about my learning steps for quantum-computing.\nFor a quick-start tutorial, check my workshop project throught the project link above.\nResources Courses\nCoursera\non MIT x pro\nQuantum Information Processing from UW Madison\nQuantum Computation by John Preskill\nIBM Q Experience\nhttps://github.com/Qiskit/openqasm\nhttps://github.com/Qiskit/qiskit-tutorials\nIBM Q Experience Day 1 Getting Started with Circuit Composer\nHello Quantum World circuit transformed two qubits, from $ \\vert0\\rangle $ to $ \\frac{\\vert00\\rangle + \\vert11\\rangle}{\\sqrt{2}} $","tags":["quantum-computing","ibm-q-experience","tutorial"],"title":"Journey to Quantum Computing","type":"post"},{"authors":[],"categories":null,"content":" Outlines 傳統的 Monolith被分解為分散的微服務，以取得更高的效能與更彈性的管理。當眾多的為服務同時運作，產生複雜的依賴與交流，網路層不再只是有『有通就好』，而是需要精細且彈性的流量管理與監控，來提供穩定的效能。本次主題將基於 Kubernetes 平台上的 Istio ，探討 Service Mesh 的概念與相關應用。\n 何為 Service Mesh ？為何需要 Service Mesh ？ Service Mesh 基本概念 如何Service-to-Service的網路層管理監控 導入 Istio 到 Kubernetes  目標聽眾  微運大量微服務，希望導入Service Mesh 的Operator 想了解微服務生態中竄紅的 Service Mesh  收穫  了解為服務的優勢與Cloud Native應用發展趨勢 了解 Service Mesh 與 Istio 觀念 能使用 Istio 於 Kubernetes，進行服務網路的管理。   你有聽過 Microservice / Istio有聽過嗎？ 今天來介紹一款好藥：Istio。如果你有以下問題：\n 維運大量(成千上百)微服務 需要服務對服務的流量控制，監控，管理   談 Service Mesh 之前，不免的要先談一下 Microservice，這個目前好像很夯的一個技術名詞。\n如果手上有一個 App，會希望依照 Monolith 的架構，或是 Microservices？ Microservices 聽起來又新又潮。相對於 Monolith有許多明顯的好處：\n Decoupling Scalability Performance  也有明顯的壞處：\n Development Complexity Operation Cost   沒事別挖坑跳\n  何為 Service Mesh？\n Service Mesh: Model / Pattern Implementations: linkerd, istio, \u0026hellip; 基於底層的網路服務，在複雜的 topology 中可靠的傳遞  使用Microservie 可能會遇到的問題：\n Traffic control Monitoring A/B Testing  ","date":1557892800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558582214,"objectID":"ab0c03aeb8a862eb9ba49b1163a53255","permalink":"https://chechiachang.github.io/talk/service-mesh-for-microservices-on-kubernetes/","publishdate":"2019-04-02T17:10:57+08:00","relpermalink":"/talk/service-mesh-for-microservices-on-kubernetes/","section":"talk","summary":"基於 Kubernetes 平台上的 Istio ，探討 Service Mesh 的概念與相關應用。","tags":["kubernetes","istio","service-mesh"],"title":"Service Mesh for Microservices on Kubernetes","type":"talk"},{"authors":[],"categories":[],"content":"Create GKE gcloud beta container --project \u0026quot;istio-playground-239810\u0026quot; clusters create \u0026quot;istio-playground\u0026quot; \\ --zone \u0026quot;asia-east1-b\u0026quot; \\ --username \u0026quot;admin\u0026quot; \\ --cluster-version \u0026quot;1.11.8-gke.6\u0026quot; \\ --machine-type \u0026quot;n1-standard-2\u0026quot; \\ --image-type \u0026quot;COS\u0026quot; \\ --disk-type \u0026quot;pd-standard\u0026quot; \\ --disk-size \u0026quot;100\u0026quot; \\ --preemptible \\ --num-nodes \u0026quot;1\u0026quot; \\ --enable-cloud-logging \\ --enable-cloud-monitoring \\ --no-enable-ip-alias \\ --addons HorizontalPodAutoscaling,HttpLoadBalancing,KubernetesDashboard,Istio \\ --istio-config auth=MTLS_PERMISSIVE \\ --no-enable-autoupgrade \\ --enable-autorepair Take a Peek $ kubectl get namespaces NAME STATUS AGE default Active 2m istio-system Active 1m kube-public Active 2m kube-system Active 2m $ kubectl get po -n istio-system NAME READY STATUS RESTARTS AGE istio-citadel-7f6f77cd7b-nxfbf 1/1 Running 0 3m istio-cleanup-secrets-h454m 0/1 Completed 0 3m istio-egressgateway-7c56db84cc-nlrwq 1/1 Running 0 3m istio-galley-6c747bdb4f-45jrp 1/1 Running 0 3m istio-ingressgateway-6ff68cf95d-tlkq4 1/1 Running 0 3m istio-pilot-8ff66f8c4-q9chz 2/2 Running 0 3m istio-policy-69b78b7d6-c8pld 2/2 Running 0 3m istio-sidecar-injector-558996c897-hr6q4 1/1 Running 0 3m istio-telemetry-f96459fb-5cbpg 2/2 Running 0 3m promsd-ff878d44b-hv8nh 2/2 Running 1 3m Deploy app kubectl label namespace default istio-injection=enabled Bookinfo Application\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/platform/kube/bookinfo.yaml kubectl get pods kubectl get services Gateway\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/bookinfo-gateway.yaml kubectl get gateways kubectl get svc istio-ingressgateway -n istio-system Go to ingress public ip\nexport INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}') export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==\u0026quot;http2\u0026quot;)].port}') export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==\u0026quot;https\u0026quot;)].port}') curl -v ${INGRESS_HOST}:{$INGRESS_PORT}/productpage 404 Not Found Apply destination rules\nkubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/destination-rule-all.yaml curl -v ${INGRESS_HOST}:{$INGRESS_PORT}/productpage Brief review kubectl get virtualservices kubectl get destinationrules kubectl get gateways Istio Tasks https://istio.io/docs/tasks/traffic-management/\n","date":1557137535,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557885090,"objectID":"262caf52e34b5cf4614d25adf2d45618","permalink":"https://chechiachang.github.io/post/service-mesh-for-microservice-on-kubernetes/","publishdate":"2019-05-06T18:12:15+08:00","relpermalink":"/post/service-mesh-for-microservice-on-kubernetes/","section":"post","summary":"基於 Kubernetes 平台上的 Istio ，實際部署，並一步一步操作Istio 的功能。","tags":["kubernetes","istio","service-mesh"],"title":"Istio 三分鐘就入坑 佈署篇","type":"post"},{"authors":[],"categories":null,"content":" How to deploy a cloud-native Jenkins with Jenkins X. A pipeline with Kubernetes based dynamics worker sclaing (jenkins-kubernetes). Give it a try. (Defered) Customized test reports for multiple language (ex. go-junit-report)  ","date":1555736400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555683962,"objectID":"3212c13fe0ec93769c195996be6fa2a5","permalink":"https://chechiachang.github.io/talk/jenkins-on-kubernetes/","publishdate":"2019-04-09T15:29:21+08:00","relpermalink":"/talk/jenkins-on-kubernetes/","section":"talk","summary":"Working pipeline with jenkins-x on Kubernetes.","tags":["kubernetes","jenkins","devops"],"title":"Jenkins on Kubernetes","type":"talk"},{"authors":null,"categories":null,"content":"Jenkins  One of the earliest open source antomation server Most common option in use Flexible and customizable. Hundreds of plugins Support automation for any project   Jenkins X  CI/CD platform (Jenkins Platform) Cloud native serverless For modern cloud applications on Kubernetes.   Outlines  Install Jenkins with jx Create a Pipeline with jx Develope with jx client  check Jenkins-X Github Repo\n Install Create GKE cluster \u0026amp; Get Credentials\ngcloud init gcloud components update CLUSTER_NAME=jenkins-server #CLUSTER_NAME=jenkins-serverless gcloud container clusters create ${CLUSTER_NAME} \\ --num-nodes 1 \\ --machine-type n1-standard-4 \\ --enable-autoscaling \\ --min-nodes 1 \\ --max-nodes 2 \\ --zone asia-east1-b \\ --preemptible  Create GKE cluster \u0026amp; Get Credentials\n# Get credentials to access cluster with kubectl gcloud container clusters get-credentials ${CLUSTER_NAME} # Check cluster stats. kubectl get nodes  Download Jenkins X Release \u0026amp; install jx on Local Machine\nJX_VERSION=v2.0.2 OS_ARCH=darwin-amd64 #OS_ARCH=linux-amd64 curl -L https://github.com/jenkins-x/jx/releases/download/\u0026quot;${JX_VERSION}\u0026quot;/jx-\u0026quot;${OS_ARCH}\u0026quot;.tar.gz | tar xzv sudo mv jx /usr/local/bin jx version NAME VERSION jx 2.0.2 Kubernetes cluster v1.11.7-gke.12 kubectl v1.11.9-dispatcher helm client v2.11.0+g2e55dbe helm server v2.11.0+g2e55dbe git git version 2.20.1 Operating System Mac OS X 10.14.4 build 18E226  (Install Option 1) Serverless Jenkins Pipeline\nDEFAULT_PASSWORD=mySecretPassWord123 jx install \\ --default-admin-password=${DEFAULT_PASSWORD} \\ --provider='gke'  Install options:\n Select Jenkins installation type:  Serverless Jenkins X Pipelines with Tekon Static Master Jenkins   Pick default workload build pack  Kubernetes Workloads: Automated CI+CD with GitOps Promotion Library Workloads: CI+Release but no CD    Your Kubernetes context is now set to the namespace: jx INFO[0231] To switch back to your original namespace use: jx namespace jx ...  (Install Option 2) Static Jenkins Server\nDEFAULT_PASSWORD=mySecretPassWord123 jx install \\ --default-admin-password=${DEFAULT_PASSWORD} \\ --provider='gke'  Options:\n Select Jenkins installation type:  Serverless Jenkins X Pipelines with Tekon Static Master Jenkins   Pick default workload build pack  Kubernetes Workloads: Automated CI+CD with GitOps Promotion Library Workloads: CI+Release but no CD    INFO[0465]Your Kubernetes context is now set to the namespace: jx INFO[0465] To switch back to your original namespace use: jx namespace default Access Static Jenkins Server through Domain with username and password Domain http://jenkins.jx.11.22.33.44.nip.io/  Uninstall jx uninstall # rm -rf ~/.jx  Setup CI/CD Pipeline Create Quickstart Repository\nkubectl get pods --namespace jx --watch # cd workspace jx create quickstart  Options:\n$ select the quickstart you wish to create [Use arrows to move, type to filter] aspnet-app dlang-http \u0026gt; golang-http jenkins-cwp-quickstart jenkins-quickstart node-http INFO[0121] Watch pipeline activity via: jx get activity -f serverless-jenkins-quickstart -w  Check log of the first run\njx logs pipeline  Add a setup step for pullrequest\ncd serverless-jenkins-quickstart jx create step --pipeline pullrequest \\ --lifecycle setup \\ --mode replace \\ --sh \u0026quot;echo hello world\u0026quot; Validate pipeline step for each modification\njx step validate A build-pack pod started after git push. Watch pod status with kubectl.\nkubectl get pods --namespace jx --watch  Check Build Status on Prow (Serverless)\nhttp://deck.jx.130.211.245.13.nip.io/ Login with username and password\n Import Existing Repository\n# In source code repository # Import jx to remote jenkins-server. This will apply a Jenkinsfile to repository by default jx import \\ --url git@github.com:chechiachang/serverless-jenkins-quickstart.git  Update jenkins-x.yml\njx create step git commit git push  Trouble Shooting: Failed to get jx resources\njx get pipelines Make sure your jx (or kubectl) context is with the correct GKE and namespace\nkc config set-context gke_my-project_asia-east1-b_jenkins \\ --namespace=jx  Helm vs Jenkins X   Jenkins Helm Chart\n create Jenkins master and slave cluster on Kubernetes utilizing the Jenkins Kubernetes plugin.    Jenkin Platform with jx\n Jenkins Platform native to Kubernetes Powerful cloud native components: Prow, Nexus, Docker Registry, Tekton Pipeline, \u0026hellip;     Check jenkins-x examples https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs\n jx Client jx get urls Name URL jenkins http://jenkins.jx.11.22.33.44.nip.io jenkins-x-chartmuseum http://chartmuseum.jx.11.22.33.44.nip.io jenkins-x-docker-registry http://docker-registry.jx.11.22.33.44.nip.io jenkins-x-monocular-api http://monocular.jx.11.22.33.44.nip.io jenkins-x-monocular-ui http://monocular.jx.11.22.33.44.nip.io nexus http://nexus.jx.11.22.33.44.nip.io  Get Cluster Status\njx diagnose Get Applications \u0026amp; Pipelines\njx get applications jx get pipelines  Get CI Activities \u0026amp; build log\njx get activities jx get activities --filter='jenkins-x-on-kubernetes' jx get build log INFO[0003] view the log at: http://jenkins.jx.11.22.33.44.nip.io/job/chechiachang/job/jenkins-x-on-kubernetes/job/feature-add-test/3/console ...  Trigger Build \u0026amp; Check Activity\njx start pipeline jx start pipeline --filter='jenkins-x-on-kubernetes/feature-add-test' jx get activities --filter='jenkins-x-on-kubernetes'  Create Pull Request\njx create pullrequest  Summary  Demonstrate a Jenkins pipeline Jenkins plugin  master slave cluster kubernetes plugin lovely GUI   jx on k8s jx cli     Jenkins 簡單用\n 設定與維護人力會比其他工具稍微多    Jenkins 複雜用\n Deep Customization: 希望花時間打造最符合自己需求的工具 預期有特殊需求    Jenkins X\n 應用依賴 Kubernetes 開發，測試，部屬 (ex. kubernetes client-go) 使用 jx 一站式服務     The End\n  ","date":1555681010,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568171821,"objectID":"f6ec8f2d00ca9f7da384d7b19d802ba9","permalink":"https://chechiachang.github.io/slides/jenkins-x-on-kubernetes/","publishdate":"2019-04-19T21:36:50+08:00","relpermalink":"/slides/jenkins-x-on-kubernetes/","section":"slides","summary":"Jenkins One of the earliest open source antomation server Most common option in use Flexible and customizable. Hundreds of plugins Support automation for any project Jenkins X CI/CD platform (Jenkins Platform) Cloud native serverless For modern cloud applications on Kubernetes. Outlines Install Jenkins with jx Create a Pipeline with jx Develope with jx client check Jenkins-X Github Repo Install Create GKE cluster \u0026amp; Get Credentials gcloud init gcloud components update","tags":null,"title":"Jenkins X on Kubernetes","type":"slides"},{"authors":[],"categories":null,"content":"是的，我們做了一款七龍珠中的戰鬥力探測器，透過人臉辨識，探測工程師的開源貢獻力。\n本次演講內容有:\n 初心者的人臉辨識技術 ，Face Recognition API 使用 Golang 在 Github 上做 Data Mining 從零開始的 side project，開發心路歷程與收穫分享  ","date":1555666318,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679944,"objectID":"ba5cd94fc710d297f573c13cc92496c4","permalink":"https://chechiachang.github.io/talk/gdg-devfest-2018-scouter/","publishdate":"2019-04-19T17:31:58+08:00","relpermalink":"/talk/gdg-devfest-2018-scouter/","section":"talk","summary":"是的，我們做了一款七龍珠中的戰鬥力探測器，透過人臉辨識技術探測工程師在Github上的的開源貢獻力","tags":["machine-learning","face-detection","face-recognition","unity","ios","golang","github-api","ar"],"title":"從零開始的人臉辨識，七龍珠戰鬥力探測器","type":"talk"},{"authors":[],"categories":[],"content":"Jenkins is one of the earliest open source antomation server and remains the most common option in use today. Over the years, Jenkins has evolved into a powerful and flexible framework with hundreds of plugins to support automation for any project.\nJenkins X, on the other hand, is a CI/CD platform (Jenkins Platform) for modern cloud applications on Kubernetes.\nHere we talk about some basic concepts about Jenkins X and provide a hand-to-hand guide to deploy jenkins-x on Kubernetes.\n Architecture of Jenkins X Install Jenkins with jx Create a Pipeline with jx Develope with jx client  For more information about jx itself, check Jenkins-X Github Repo\nArchitecture Check this beautiful diagram.\n https://jenkins-x.io/architecture/diagram/    Install Create GKE cluster \u0026amp; Get Credentials gcloud init gcloud components update CLUSTER_NAME=jenkins-server #CLUSTER_NAME=jenkins-serverless gcloud container clusters create ${CLUSTER_NAME} \\ --num-nodes 1 \\ --machine-type n1-standard-4 \\ --enable-autoscaling \\ --min-nodes 1 \\ --max-nodes 2 \\ --zone asia-east1-b \\ --preemptible # After cluster initialization, get credentials to access cluster with kubectl gcloud container clusters get-credentials ${CLUSTER_NAME} # Check cluster stats. kubectl get nodes Install jx on Local Machine [Jenkins X Release](https://github.com/jenkins-x/jx/releases](https://github.com/jenkins-x/jx/releases)\nJX_VERSION=v2.0.2 OS_ARCH=darwin-amd64 #OS_ARCH=linux-amd64 curl -L https://github.com/jenkins-x/jx/releases/download/\u0026quot;${JX_VERSION}\u0026quot;/jx-\u0026quot;${OS_ARCH}\u0026quot;.tar.gz | tar xzv sudo mv jx /usr/local/bin jx version NAME VERSION jx 2.0.2 Kubernetes cluster v1.11.7-gke.12 kubectl v1.11.9-dispatcher helm client v2.11.0+g2e55dbe helm server v2.11.0+g2e55dbe git git version 2.20.1 Operating System Mac OS X 10.14.4 build 18E226 (Option 1) Install Serverless Jenkins Pipeline DEFAULT_PASSWORD=mySecretPassWord123 jx install \\ --default-admin-password=${DEFAULT_PASSWORD} \\ --provider='gke' Options:\n Enter Github user name Enter Github personal api token for CI/CD Enable Github as Git pipeline server Select Jenkins installation type:  Serverless Jenkins X Pipelines with Tekon Static Master Jenkins   Pick default workload build pack  Kubernetes Workloads: Automated CI+CD with GitOps Promotion Library Workloads: CI+Release but no CD   Select the organization where you want to create the environment repository:  chechiachang    Your Kubernetes context is now set to the namespace: jx INFO[0231] To switch back to your original namespace use: jx namespace jx INFO[0231] Or to use this context/namespace in just one terminal use: jx shell INFO[0231] For help on switching contexts see: https://jenkins-x.io/developing/kube-context/ INFO[0231] To import existing projects into Jenkins: jx import INFO[0231] To create a new Spring Boot microservice: jx create spring -d web -d actuator INFO[0231] To create a new microservice from a quickstart: jx create quickstart (Option 2) Install Static Jenkins Server DEFAULT_PASSWORD=mySecretPassWord123 jx install \\ --default-admin-password=${DEFAULT_PASSWORD} \\ --provider='gke' Options:\n Enter Github user name Enter Github personal api token for CI/CD Enable Github as Git pipeline server Select Jenkins installation type:  Serverless Jenkins X Pipelines with Tekon Static Master Jenkins   Pick default workload build pack  Kubernetes Workloads: Automated CI+CD with GitOps Promotion Library Workloads: CI+Release but no CD   Select the organization where you want to create the environment repository:  chechiachang    INFO[0465]Your Kubernetes context is now set to the namespace: jx INFO[0465] To switch back to your original namespace use: jx namespace default INFO[0465] Or to use this context/namespace in just one terminal use: jx shell INFO[0465] For help on switching contexts see: https://jenkins-x.io/developing/kube-context/ INFO[0465] To import existing projects into Jenkins: jx import INFO[0465] To create a new Spring Boot microservice: jx create spring -d web -d actuator INFO[0465] To create a new microservice from a quickstart: jx create quickstart Access Static Jenkins Server through Domain with username and password Domain http://jenkins.jx.11.22.33.44.nip.io/\nUninstall jx uninstall # rm -rf ~/.jx  Setup CI/CD Pipeline Create Quickstart Repository kubectl get pods --namespace jx --watch # cd workspace jx create quickstart Options:\n Which organisation do you want to use? chechiachang Enter the new repository name: serverless-jenkins-quickstart select the quickstart you wish to create [Use arrows to move, type to filter] angular-io-quickstart aspnet-app dlang-http   golang-http jenkins-cwp-quickstart jenkins-quickstart node-http\n INFO[0121] Watch pipeline activity via: jx get activity -f serverless-jenkins-quickstart -w INFO[0121] Browse the pipeline log via: jx get build logs chechiachang/serverless-jenkins-quickstart/master INFO[0121] Open the Jenkins console via jx console INFO[0121] You can list the pipelines via: jx get pipelines INFO[0121] Open the Jenkins console via jx console INFO[0121] You can list the pipelines via: jx get pipelines INFO[0121] When the pipeline is complete: jx get applications Check log of the first run jx logs pipeline Add Step to Pipeline Add a setup step for pullrequest\ncd serverless-jenkins-quickstart jx create step --pipeline pullrequest \\ --lifecycle setup \\ --mode replace \\ --sh \u0026quot;echo hello world\u0026quot; Validate pipeline step for each modification\njx step validate A build-pack pod started after git push. Watch pod status with kubectl.\nkubectl get pods --namespace jx --watch Check Build Status on Prow (Serverless) http://deck.jx.130.211.245.13.nip.io/ Login with username and password\nImport Existing Repository In source code repository:\nImport jx to remote jenkins-server. This will apply a Jenkinsfile to repository by default\njx import --url git@github.com:chechiachang/serverless-jenkins-quickstart.git Update jenkins-x.yml\njx create step git commit \u0026amp; push\nTrouble Shooting Failed to get jx resources\njx get pipelines Make sure your jx (or kubectl) context is with the correct GKE and namespace\nkc config set-context gke_my-project_asia-east1-b_jenkins \\ --namespace=jx Why not use helm chart? It's readlly depend on what we need in CI/CD automation.\nJenkins Helm Chart create Jenkins master and slave cluster on Kubernetes utilizing the Jenkins Kubernetes plugin. Jenkin Platform with jx is Jenkins Platform native to Kubernetes. It comes with powerful cloud native components like Prow automation, Nexus, Docker Registry, Tekton Pipeline, \u0026hellip;\nCheck jenkins-x examples https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs\n Client jx get urls Name URL jenkins http://jenkins.jx.11.22.33.44.nip.io jenkins-x-chartmuseum http://chartmuseum.jx.11.22.33.44.nip.io jenkins-x-docker-registry http://docker-registry.jx.11.22.33.44.nip.io jenkins-x-monocular-api http://monocular.jx.11.22.33.44.nip.io jenkins-x-monocular-ui http://monocular.jx.11.22.33.44.nip.io nexus http://nexus.jx.11.22.33.44.nip.io Get Cluster Status jx diagnose Get Applications \u0026amp; Pipelines jx get applications jx get pipelines Get CI Activities \u0026amp; build log jx get activities jx get activities --filter='jenkins-x-on-kubernetes' jx get build log INFO[0003] view the log at: http://jenkins.jx.11.22.33.44.nip.io/job/chechiachang/job/jenkins-x-on-kubernetes/job/feature-add-test/3/console ... Trigger Build \u0026amp; Check Activity jx start pipeline jx start pipeline --filter='jenkins-x-on-kubernetes/feature-add-test' jx get activities --filter='jenkins-x-on-kubernetes' Create Pull Request jx create pullrequest ","date":1555647341,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555655323,"objectID":"cbbd48a2d957ed817017c3a954636f11","permalink":"https://chechiachang.github.io/post/jenkins-x-on-kubernetes/","publishdate":"2019-04-19T12:15:41+08:00","relpermalink":"/post/jenkins-x-on-kubernetes/","section":"post","summary":"Jenkins is one of the earliest open source antomation server and remains the most common option in use today. Over the years, Jenkins has evolved into a powerful and flexible framework with hundreds of plugins to support automation for any project.\nJenkins X, on the other hand, is a CI/CD platform (Jenkins Platform) for modern cloud applications on Kubernetes.\nHere we talk about some basic concepts about Jenkins X and provide a hand-to-hand guide to deploy jenkins-x on Kubernetes.","tags":["jenkins","ci","cd","kubernetes"],"title":"Jenkins X on Kubernetes","type":"post"},{"authors":null,"categories":null,"content":"An example project to demonstrate a working pipeline with jenkins-x on Kubernetes.\n","date":1555643519,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679944,"objectID":"286a27ce77e0cb13184316712581d55a","permalink":"https://chechiachang.github.io/project/jenkins-x-on-kubernetes/","publishdate":"2019-04-19T11:11:59+08:00","relpermalink":"/project/jenkins-x-on-kubernetes/","section":"project","summary":"An example project to demonstrate a working pipeline with jenkins-x on Kubernetes.","tags":["jenkins","ci","cd","kubernetes"],"title":"Jenkins X on Kubernetes","type":"project"},{"authors":[],"categories":null,"content":"","date":1548154800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679045,"objectID":"97cd09c1f8cbf6f2e86caf33ab5b942d","permalink":"https://chechiachang.github.io/talk/elk-on-kubernetes/","publishdate":"2019-01-19T20:56:45+08:00","relpermalink":"/talk/elk-on-kubernetes/","section":"talk","summary":"手把手教你部屬 ELK 監測 Kubernetes 上的應用","tags":["kubernetes","elasticsearch","elk","monitoring","devops"],"title":"ELK for Applications on Kubernetes","type":"talk"},{"authors":[],"categories":null,"content":"","date":1545130800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555675029,"objectID":"8c6feda28d4a3d60d85157945f8067c0","permalink":"https://chechiachang.github.io/talk/go-webassembly-intro/","publishdate":"2018-12-18T19:52:31+08:00","relpermalink":"/talk/go-webassembly-intro/","section":"talk","summary":"A quick introduction about WebAssembly and Go-WebAssembly","tags":["golang","webassembly"],"title":"Go Webassembly Intro","type":"talk"},{"authors":null,"categories":["kubernetes"],"content":"-\u0026gt; Slides here \u0026lt;-\n","date":1538798820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568171821,"objectID":"010124f9801011d6b344103b2d14a2d8","permalink":"https://chechiachang.github.io/post/kubernetes-container-runtime-interface/","publishdate":"2018-10-06T12:07:00+08:00","relpermalink":"/post/kubernetes-container-runtime-interface/","section":"post","summary":"-\u0026gt; Slides here \u0026lt;-","tags":["kubernetes","container","docker","cri"],"title":"Kubernetes Container Runtime Interface","type":"post"},{"authors":[],"categories":null,"content":"","date":1535454000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679944,"objectID":"d7400a9a14ccbb3fceede5ff7c8f1e82","permalink":"https://chechiachang.github.io/talk/go-github/","publishdate":"2018-08-28T19:00:00+08:00","relpermalink":"/talk/go-github/","section":"talk","summary":"使用 go-github 接 api 的一些眉角","tags":["golang","github"],"title":"使用 go-github 接 github api","type":"talk"},{"authors":null,"categories":null,"content":"footer: Che-Chia David Chang, 2018, https://github.com/chechiachang slidenumbers: true\nCRI, OCI, CRI-O  David Chang DevOps @ Mithril Back-End Developer, Kuberentes admin, DevOps\n      Outline  Container Runtime Interface (CRI) Open Container Initiative (OCI) CRI-O Kubernetes on CRI-O        Trend Kubernetes   Kubernetes 1.3 introduced rktnetes\n  Kubernetes 1.5 introduced CRI\n  Kubernetes 1.7 removed pre-CRI Docker / rkt integration\n  Currently works Kubelet to use CRI\n  CRI-O: released 1.0.x to match Kubernetes 1.7\n   Nomination CRI-O\n OCI-based implementation of Kubernetes Container Runtime Interface  CRI\n Kubernetes Container Runtime Interface  OCI\n Open Container initiative   Projects with Container Runtime docker, rkt, LXC/LXD, runC, containerd, OpenVZ, systemd-nspawn, machinectl, qemu-kvm, lkvm\u0026hellip;\nKubernetes (before 1.6) native supports\n Docker rkt        Container Runtime Interface(CRI)  Enable Kubernetes to support more runtimes Free kubernetes to focus on orchestration from runtime integration Consists  a protocol buffers and gRPC API libraries, additional specifications and tools     Container Runtime Interface(CRI)    CRI api in kubernetes https://github.com/kubernetes/kubernetes/ blob/master/pkg/kubelet/apis/ cri/runtime/v1alpha2/api.proto\n CRI runtimes  Docker CRI shim (cri-containerd) CoreOS rktlet frakti: hypervisor-based container runtimes Intel Clear container OpenStack kata runtime cri-o   Open Container Inititive (OCI)   open governance structure\n  container industry standards\n  runtime spec defines configuration, execution environment, and lifecycle of a container\n  image spec spec on archetecture and OS, filesystem layers and configuration\n   OCI from aspect of user  Use all OCI-conplimant container runtime Use all OCI-complimant images registries Similar UX  https://www.opencontainers.org/blog/2018/06/20/cri-o-how-standards-power-a-container-runtime\n CRI-O  OCI-based implementation of Kubernetes Container Runtime Interface Kubernetes incubator project also part of the CNCF Dedicated for Kubernetes Enable CRI-O plugin to other runtimes Available on RHEL, Fedora, Centos, Ubuntu\u0026hellip;  http://cri-o.io/\n CRI-O vs Docker (containerd) kubelet -\u0026gt; cri-containerd (shim) -\u0026gt; containerd -\u0026gt; runC -\u0026gt; container kubelet -\u0026gt; cri-o -\u0026gt; runC -\u0026gt; container\n Lightweight Stability  built for Kubernetes No cli, image utilities, \u0026hellip; No swarm, mesosphere integration, \u0026hellip;        Let's use CRI-O  Install cri-o and dependencies, runC and CNI Install Podman  Podman to cri-o as Docker-cli to Docker daemon    sudo podman run --name my-golang golang:alpine bash  Minikube\nminikube start \\  --network-plugin=cni \\  --container-runtime=cri-o minikube start \\  --network-plugin=cni \\  --extra-config=kubelet.container-runtime=remote \\  --extra-config=kubelet.container-runtime-endpoint=/var/run/crio/crio.sock \\  --extra-config=kubelet.image-service-endpoint=/var/run/crio/crio.sock  Run Kubernetes on CRI-O Kubespray\nkubeadm_enabled: true ... container_manager: crio Full cluster\nkubelet --container-runtime-endpoint=unix:///var/run/crio/crio.sock ...  References https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/ https://kubernetes.io/blog/2017/11/containerd-container-runtime-options-kubernetes/ Rttps://kubernetes.io/blog/2017/11/containerd-container-runtime-options-kubernetes/ https://xuxinkun.github.io/2017/12/12/docker-oci-runc-and-kubernetes/ https://www.kubernetes.org.cn/1079.html\n","date":1534672835,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568171821,"objectID":"2b56757a962b2aa7289451db7e5eff3e","permalink":"https://chechiachang.github.io/slides/container-runtime-interface/","publishdate":"2018-08-19T18:00:35+08:00","relpermalink":"/slides/container-runtime-interface/","section":"slides","summary":"footer: Che-Chia David Chang, 2018, https://github.com/chechiachang slidenumbers: true\nCRI, OCI, CRI-O  David Chang DevOps @ Mithril Back-End Developer, Kuberentes admin, DevOps\n      Outline  Container Runtime Interface (CRI) Open Container Initiative (OCI) CRI-O Kubernetes on CRI-O        Trend Kubernetes   Kubernetes 1.3 introduced rktnetes\n  Kubernetes 1.5 introduced CRI\n  Kubernetes 1.7 removed pre-CRI Docker / rkt integration","tags":null,"title":"CRI, OCI, CRI-O","type":"slides"},{"authors":[],"categories":null,"content":"是的，我們做了一款七龍珠中的戰鬥力探測器，透過人臉辨識，探測工程師的開源貢獻力。\n本次演講內容有:\n 初心者的人臉辨識技術 ，Face Recognition API 使用 Golang 在 Github 上做 Data Mining 從零開始的 side project，開發心路歷程與收穫分享  Live Stream on Youtube\n  ","date":1533949200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679944,"objectID":"be139de05e17ea7c0c08fcb523e4acd2","permalink":"https://chechiachang.github.io/talk/coscup-2018-scouter/","publishdate":"2018-08-11T17:31:58+08:00","relpermalink":"/talk/coscup-2018-scouter/","section":"talk","summary":"是的，我們做了一款七龍珠中的戰鬥力探測器，透過人臉辨識技術探測工程師在Github上的的開源貢獻力","tags":["machine-learning","face-detection","face-recognition","unity","ios","golang","github-api","ar"],"title":"從零開始的人臉辨識，七龍珠戰鬥力探測器","type":"talk"},{"authors":[],"categories":null,"content":"從系統管理層面看Kubernetes的網路架構\n網路實作為Kubernetes架構，也是開發過程中容易出錯的部分。本次演講將從群集管理員的角度，說明Kubernetes 中網路的實作。\n大綱:\n Docker 與 Kubernetes 的網路架構 不同層級的網路溝通實作   容器對容器 Pod對Pod 集群內部與Service 集群外部對Service  以flannel為例講解網路實作 開發過程中常遇到的網路問題  希望聽眾對Kubernetes的網路架構能有基礎的概念，並在開發過程中遇到問題時，有明確的除錯步驟來判定網路是否有問題。遇到網路的問題，也能明確的知道問題的核心，並找到解法。\n","date":1528938000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555670692,"objectID":"1a116ed5492a1d3ee42d40ec7b5667b8","permalink":"https://chechiachang.github.io/talk/kubernetes-networking/","publishdate":"2018-06-10T18:35:07+08:00","relpermalink":"/talk/kubernetes-networking/","section":"talk","summary":"從系統管理層面看Kubernetes的網路架構","tags":["kubernetes","networking","docker","flannel"],"title":"Kubernetes Networking","type":"talk"},{"authors":[],"categories":null,"content":"Manage and Schedule GPU Computing Tasks on Kubernetes\n使用Kubernets管理集群GPU機器，靈活的分配調度GPU資源，並自動排程GPU運算工作。 使用者如資料科學家，只需將運算工作實施到Kubernetes上，Kubernetes便會檢視機器上可用的GPU資源，將運算工作分配到合適的機器 上，並監控工作的狀況。如資源不足Kubernetes會自動將工作加入排程，當前面的工作完成，GPU資源釋放後，Kubernetes會自動將運算 工作，配置到合適的機器上。管理者如系統工程師，只需透過Kubernetes，將機器上的GPU資源加入到Kubernetes。\n Why we need Kubernetes for GPUs computing? Pros \u0026amp; Cons How to deploy a GPU-enabled Kubernetes cluster Run GPU computing on Kubernetes cluster  ","date":1526439600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555671770,"objectID":"484a47a6b60f09b4da23188574382a0b","permalink":"https://chechiachang.github.io/talk/gpu-computing-on-kubernetes/","publishdate":"2018-05-10T18:46:23+08:00","relpermalink":"/talk/gpu-computing-on-kubernetes/","section":"talk","summary":"Manage and Schedule GPU Computing Tasks on Kubernetes 使用Kubernets管理集群GPU機器，靈活的分配調度GPU資源，並自動排程GPU運算工作。 使用者如資料科學家，只需將運算","tags":["kubernetes","gpu-computing","cloud-computing","container","automation"],"title":"Manage and Schedule GPU Computing Tasks on Kubernetes","type":"talk"},{"authors":null,"categories":null,"content":"footer: Che-Chia David Chang, 2018, https://github.com/chechiachang/my-speeches/tree/master/go-github slidenumbers: true\nGithub API with Go-Github  David Chang Back-End Developer, Kuberentes admin, DevOps\n   Outline  Let's try Github API Use github API with go-github Work with limitation of github API An application of github user data     Let's Try Github API Get data of a user with username\nWeb page\nhttps://github.com/chechiachang\nApi\nhttps://api.github.com/users/chechiachang\n https://github.com/search?q=location:Taiwan+type:user\n   /users?q=location:Taiwan\u0026amp;sort=followers\u0026amp;order=desc\n   Github Search User API Docs\n   Github API Authentication  Most API requires authentication https://developer.github.com/v3/#authentication Let's generate api access token from web page   Github -\u0026gt; User -\u0026gt; settings -\u0026gt; Developer settings -\u0026gt; Personal access tokens\n   Go-github  Provide programmatic way to access APIs A client library for accessing github API in golang  https://github.com/google/go-github\n    https://github.com/chechiachang/scouter/blob/master/github.go#L44\n   Limitation of Github API  API paging limit: Search API only return first 1000 users API request limit Search API 30 query / min User API 50000 query / hour  /users?q=location:taiwan+created:2008-01-01..2008-02-01\u0026amp;sort=joined\u0026amp;order=asc\n Work with limitation  Paging limit: narrow down search query with time interval Control your requests rate One of the easist ways is time.Sleep()  https://github.com/chechiachang/scouter/blob/master/cmd/user_fetcher/main.go#L68\n   Application: User Data Miners  Use access token Add Query, SearchOption, Sort, Order, ListOption \u0026hellip; fetch user data with search API  https://github.com/chechiachang/scouter/blob/master/cmd/user_fetcher/main.go\n An Application Using Github Data Scouter https://github.com/chechiachang/scouter\nLet's Live Demo\n An Application Using Github Data  User Data Miners to fetch user details, avatars, and contribution Face detection \u0026amp; Face recognition Api server  Video Stream -\u0026gt; Face Image -\u0026gt; Identify User -\u0026gt; User Data -\u0026gt; Show data\n Video Stream on COSCUP 2018\n   The end ","date":1524132035,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568171821,"objectID":"730af9b2ad0060e2ad4f95d20df19f9a","permalink":"https://chechiachang.github.io/slides/go-github/","publishdate":"2018-04-19T18:00:35+08:00","relpermalink":"/slides/go-github/","section":"slides","summary":"footer: Che-Chia David Chang, 2018, https://github.com/chechiachang/my-speeches/tree/master/go-github slidenumbers: true\nGithub API with Go-Github  David Chang Back-End Developer, Kuberentes admin, DevOps\n   Outline  Let's try Github API Use github API with go-github Work with limitation of github API An application of github user data     Let's Try Github API Get data of a user with username\nWeb page\nhttps://github.com/chechiachang\nApi\nhttps://api.github.com/users/chechiachang\n https://github.com/search?q=location:Taiwan+type:user\n   /users?","tags":null,"title":"Github API with go-github","type":"slides"},{"authors":null,"categories":null,"content":"footer: Che-Chia David Chang, 2018, https://github.com/chechiachang/scouter slidenumbers: true\nScouter: Face recognition contribution detector  David Chang Back-End Developer, Kuberentes admin, DevOps\n Scouter: 3 reasons why Garbage Talks with Linkers Drangon Ball! For COSCUP!\n Let's Live Demo!  Outline Data mining Face detection \u0026amp; recognition\n Feature \u0026amp; Architecture  Face + Contributino \u0026mdash;-\u0026gt; Github api + go-github (Golang) Face Recognitiion \u0026mdash;-\u0026gt; Face detection api (Python) API server + Database \u0026mdash;-\u0026gt; Flask + PyMongodb (Python) Webcam + AR + Face detection \u0026mdash;-\u0026gt; Unity + face tracker (C#)   Face and User Data Mining  Download user data and avatar Fetch contribution statics  Github API go-github (Api library in Golang)\n 4 Data Miners (Golang)  User fetcher \u0026ndash; fetch user data with search API User detail fetcher \u0026ndash; fetch user detail with user API Avatar downloader \u0026ndash; fetch user's avatar by user data Contribution fetcher \u0026ndash; parse github contribution HTML   Notes about Github API  API paging limit Search API only return first 1000 users API request limit Search API 30 query / min User API 50000 query / hour Parallel request with Wait Group (Optional)  https://github.com/kubernetes/kubernetes/pull/66403\n Face detection \u0026amp; Face recognition The world's simplest facial recognition api Data pre-processing -\u0026gt; Face encoding -\u0026gt; Face recognition\n Face detection \u0026amp; Face recognition  Detect face from avatars Detect identities face image Store identities and userID in a \u0026lsquo;big\u0026rsquo; matrix Detect face from a unknown image Compare unknown face with matrix find the distances between all face identities   Api server  Consume face image from App Detect face from image and recogniize user by face identity Get user data from DB and return to App   App Workflow               Camera APP API server Face recognition DB API server App   Video Stream Face Image  Identify User User Data  Show data     App and AR unity Unity : build app and AR UI\nOpenCV : image processing library\ndlib : face recognition tools, models and algorithms\n Unity App  Control camera Detect face on App-side with face tracker Cut and Send face to API server and get user data back Display user data to view   Issues  Github data source Nobody use their won face! 3000 human faces / 14000 avatars Github avatar has very low resolution Face recognition API tuning required I'm a Unity and C# newbie ;)   『不是不準，只是正確機率不夠高。』 \u0026ndash;XD\n  Review           Golang crawler \u0026amp; html parser Golang    Github API     Python Flask     Face Recognition API     Unity     OpenCvForUnity     dlib shape predictor     C#       How to learn anything in one Month 我想分享的是一個越級打怪，一邊快速成長的捷徑\n #『去報 COSCUP ，講一個 session』\n   『因為我自己想做，還有當初推坑我的人太厲害。』\n  Reviews Scouter is relatively simple project. Do try this at home!\n The end 投影片及講稿 https://github.com/chechiachang/my-speeches/tree/master/fr-ar-open-source-power-detector\nScouter 原始碼 https://github.com/chechiachang/scouter\n","date":1524132035,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568171821,"objectID":"d8f12de29d1e74cc8ca050aed0f74d5f","permalink":"https://chechiachang.github.io/slides/coscup-2018-scouter/","publishdate":"2018-04-19T18:00:35+08:00","relpermalink":"/slides/coscup-2018-scouter/","section":"slides","summary":"footer: Che-Chia David Chang, 2018, https://github.com/chechiachang/scouter slidenumbers: true Scouter: Face recognition contribution detector David Chang Back-End Developer, Kuberentes admin, DevOps Scouter: 3 reasons why Garbage Talks with Linkers Drangon Ball! For COSCUP! Let's Live Demo! Outline Data mining Face detection \u0026amp; recognition Feature \u0026amp; Architecture Face + Contributino \u0026mdash;-\u0026gt; Github api + go-github (Golang) Face Recognitiion \u0026mdash;-\u0026gt; Face detection api (Python) API server + Database \u0026mdash;-\u0026gt; Flask + PyMongodb (Python)","tags":null,"title":"Scouter","type":"slides"},{"authors":[],"categories":null,"content":"Prerequisites If you're interested in building your own Kubernetes. Install the following tools we use.\nvirtualbox 5.1+ to create VMs, on which we deploy our Kubernetes.\nvagrant 2.0.x+ to control virtualbox to build and manage vms.\nansible-playbook to run Kubespray playbook to deploy Kuberentes\nkubectl to control Kubernetes cluster\n# Ubuntu apt-add-repository ppa:ansible/ansible \\ \u0026amp;\u0026amp; apt-get update \\ \u0026amp;\u0026amp; apt-get install -y python3 ansible \u0026amp;\u0026amp; pip install netaddr # Mac pip install ansible port install py27-netaddr # netaddr is required by Kubespray Let's get started clone https://github.com/kubernetes-incubator/kubespray.git cd kubespray vagrant up That's it!\nThis gonna take a while. Let's get to some details.\nVirtualbox Install virtualbox 5.1+.\nDisadvantage about vbox GUI:\n Clicking is time-consuming and engineers are lazy. Bad for automation. Lack of Scalibility Manual operation could cause mistakes.  A good practice is to Write shell script with VBoxManage, the client of virtualbox\nOr even better, use Vagrant\nVagrant vagrant 2.0.x+\nCreate you VMs with (ruby based) script.\nBring VMs up \u0026amp; down within only one command\nCheck the Vagrantfile\nAnsible playbook Ansible is a IT automation tools\nBasically, ansible playbook ssh and execute bash command on servers.\n Reduce manual efforts. Deliver and deploy faster Install K8s components to each servers and check components status on each step Come with lots of handy tools (like native array supports) Automation is everything  Kubespay Deploy k8s with ansible-playbook\nAvailable on AWS, GCE, or baremetal\nHigh Available cluster\nGenerate inventory file with inventory.py\ncp -rfp inventory/sample inventory/mycluster declare -a IPS=(10.10.1.3 10.10.1.4 10.10.1.5) CONFIG_FILE=inventory/mycluster/hosts.ini python3 contrib/inventory_builder/inventory.py ${IPS[@]} (Optional) Change parameters\ndeploy\nansible-playbook -i inventory/myCluster/hosts.ini cluster.yml Kubectl kubectl config use-context kubectl get po Destroy Remember to suspend / destroy VMs\nvagrant suspend vagrant destroy More about Kubernetes Why k8s\nUse case 1: when data scientist wants GPU Workflow dispatching and resouce management\nUse case 2: when your site grows bigger Scalibility\nFYI\n","date":1522234800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555672661,"objectID":"6c5ec292fa3a055366c6dd3109f1ee27","permalink":"https://chechiachang.github.io/talk/deploy-kubernetes-with-kubespray/","publishdate":"2018-03-27T19:08:35+08:00","relpermalink":"/talk/deploy-kubernetes-with-kubespray/","section":"talk","summary":"Build your own Kubernetes cluster with ease","tags":["kubernetes","kubespray"],"title":"Deploy Kubernetes With Kubespray","type":"talk"},{"authors":[],"categories":null,"content":"Outlines   Docker Storage\n  Kubernetes Storage\n  GlusterFS for K8s\n  Docker Storage Doc\n within container: inside writable layer of a container   deleted with container couple with host machine require storage driver  docker ps -s docker inspect ubuntu dd if=/dev/zero of=1Mfile bs=1k count=1000 Docker volume   a directory on host prepare: provision on host usage: set volume on docker run  Kubernetes Storage https://kubernetes.io/docs/concepts/storage/volumes/\n On-disk files:   Deleted on container restart File sharing in Pod  Kubernetes Volume:   a directory Coexist with Pod Data preserved across container restarts Pod can use many volumes of different types  (Some of) Types of volumes :\n  emptyDir\n first created volume prepare: none usage: always    gcePersistentDisk\n independent to pod prepare: gcp usage: claim by name  gcloud compute disks create --size=500GB --zone=us-central1-a my-data-disk   PersistentVolumeClaim\n prepare: provision by admin usage: add PVC request    Example\nPersistentVolume Doc\n  Persistent Volume\n a piece of provisioned storage Independent lifecycle abstract with k8s object API many implementations: ex. GCEPersistentDisk, NFS, GlusterFS\u0026hellip;    Why PersistentVolume\n one APIs, many PV implementations Separates providers (admin) and consumers (users) PV subsystem API handles details of implementation Handle different need like size, access mode, performance\u0026hellip;    PersistentVolumeClaim\n PV: a resource PVC: a request for storage Pods consume Node resources and PVCs consume PV resources    PVC lifecycle\n Povisioning Binding Using Reclaiming Deleting    PV Access Modes\n ReadWriteOnce: 1 node R/W ReadOnlyMany: n node R, 1 node W ReadWriteMany: n node R/W    StorageClass\n usage:PV.storageClassName    Doc\nGlusterFS Doc\n  Why glusterFS\n Network FS Distributed FS  High Availability Scalability   High performance    Architecture: Types of Volumes\n Distributed Replicated Distributed Replicated Striped: file Distributed Striped  note: glusterFS Volume vs Kubernetes PV\n  GlusterFS for k8s   Heketi\n REST storage management API Receive requests from k8s storage driver use secret to control glusterFS    Usage\n has a glusterFS apply storage class and secret to k8s Create PV Request PVC with Pods    Demo  Env  Kubernetes 1.9.2    ","date":1518228000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679957,"objectID":"3c8d261f61b72c4d3057b4f2e5eb5b6f","permalink":"https://chechiachang.github.io/talk/kubernetes-storage-and-glusterfs/","publishdate":"2018-02-10T20:49:32+08:00","relpermalink":"/talk/kubernetes-storage-and-glusterfs/","section":"talk","summary":"Kubernetes storage system: use GlusterFS as an example","tags":["kubernetes","storage","filesystem","glusterfs"],"title":"Kubernetes Storage and Glusterfs","type":"talk"},{"authors":null,"categories":null,"content":"","date":1492595116,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555679944,"objectID":"a474a93641fbd62e9acd012c967e21db","permalink":"https://chechiachang.github.io/project/scouter/","publishdate":"2017-04-19T17:45:16+08:00","relpermalink":"/project/scouter/","section":"project","summary":"A face recognizer app which retrieves your Github contribution by your face.","tags":["machine-learning","face-detection","face-recognition","unity","ios","golang","github-api","ar"],"title":"Scouter: face recognition.","type":"project"}]