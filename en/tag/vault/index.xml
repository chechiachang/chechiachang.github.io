<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vault | Che-Chia Chang</title>
    <link>https://chechia.net/en/tag/vault/</link>
      <atom:link href="https://chechia.net/en/tag/vault/index.xml" rel="self" type="application/rss+xml" />
    <description>vault</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 10 May 2023 12:19:02 +0800</lastBuildDate>
    <image>
      <url>https://chechia.net/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>vault</title>
      <link>https://chechia.net/en/tag/vault/</link>
    </image>
    
    <item>
      <title>Hashicorp Comminity Presentation Vault Introduction</title>
      <link>https://chechia.net/en/post/2023-05-10-hashicorp-comminity-presentation-vault-introduction/</link>
      <pubDate>Wed, 10 May 2023 12:19:02 +0800</pubDate>
      <guid>https://chechia.net/en/post/2023-05-10-hashicorp-comminity-presentation-vault-introduction/</guid>
      <description>&lt;h1 id=&#34;target-group&#34;&gt;target group&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;金融客戶&lt;/li&gt;
&lt;li&gt;vault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4/15 上架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;accupass
5/10 (Wed) 11:00-12:00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;webbase link (online)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10:30 上線設備測試&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11:00 Ming 開場&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11:05 主講&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12:00 Q&amp;amp;A (留言)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當天錄影會上線&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;演講大綱&#34;&gt;演講大綱&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;基本介紹 vault 架構&lt;/li&gt;
&lt;li&gt;企業需求
&lt;ul&gt;
&lt;li&gt;self-host&lt;/li&gt;
&lt;li&gt;複雜的 policy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用例 demo
&lt;ul&gt;
&lt;li&gt;aws auth&lt;/li&gt;
&lt;li&gt;k8s auth&lt;/li&gt;
&lt;li&gt;policy&lt;/li&gt;
&lt;li&gt;當天提供 github example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A (10mins)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;內容&#34;&gt;內容&lt;/h1&gt;
&lt;p&gt;演講主題：Hashicorp vault 雲端地端通吃的私鑰管理平台&lt;/p&gt;
&lt;p&gt;現代網路應用需要處理許多私密金曜的管理，例如：user 的密碼，server 的資料，database 的資料，microservices 彼此 authentication&amp;hellip;。加上駭客團體猖獗，許多國內外知名企業紛紛遭駭，導致公司與使用者的損失。
如何系統化且自動化管理大量的私密資料，成為系統整體安全性的關鍵。
Hashicorp Vault 為一款開源的私密資料管理平台，除了保障系統安全性，比起市面上的其他管理工具，有許多特點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不依賴外部服務，適合自行架設在內部公有雲/私有雲/傳統server/Kubernetes/VM&lt;/li&gt;
&lt;li&gt;支援跨環境的應用，可以串連混合雲中的應用，作為私要認證的中心
本次演講簡介 Hashicorp Vault，以 aws cloud 與本地 kubernetes 為例，提供幾個基本的操作範例
適合初次接觸的 Hashicorp Vault，與尋找私要管理平台的團隊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;講者簡介&lt;/p&gt;
&lt;p&gt;Che-Chia Chang，SRE，喜歡研究公有雲/容器化應用/Kubernetes
Microsoft MVP，Ithome 雲端大會/COSCUP講師，常出現 CNTUG / DevOpsTW / Golang Taipei
技術 blog 收錄過往演講與文章 &lt;a href=&#34;https://chechia.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://chechia.net&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;presentation&#34;&gt;Presentation&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1iex9lm89OCIR8IAoD1RPe4vcW--bcKBmMHoixDybqP8/edit#slide=id.g2403737215e_0_147&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.google.com/presentation/d/1iex9lm89OCIR8IAoD1RPe4vcW--bcKBmMHoixDybqP8/edit#slide=id.g2403737215e_0_147&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2021 11 16 Ithome Cloud Summit Vault</title>
      <link>https://chechia.net/en/post/2021-11-16-ithome-cloud-summit-vault/</link>
      <pubDate>Tue, 16 Nov 2021 01:04:12 +0800</pubDate>
      <guid>https://chechia.net/en/post/2021-11-16-ithome-cloud-summit-vault/</guid>
      <description>&lt;p&gt;各位好&lt;/p&gt;
&lt;p&gt;關於這個 QRcode&lt;/p&gt;
&lt;p&gt;每次上台前，我都會想要帶什麼樣的內容給觀眾，讓觀眾值得花 30 分鐘在底下聽。後來就習慣先發表一篇文章，把對觀眾有幫助的資源包成一包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是完整投影片：https://slides.com/chechiac&amp;hellip;/terraform-introduction-a56697&lt;/li&gt;
&lt;li&gt;逐字講稿：(最後校稿中）&lt;/li&gt;
&lt;li&gt;然而只有本次演講內容，回去可能還是不太容易操作。所以這次附上使用 Terraform 一鍵部署 vault 的 Github Repository：https://github.com/&amp;hellip;/southe&amp;hellip;/chechia_net/vault/singleton&lt;/li&gt;
&lt;li&gt;如果不熟 Terraform，再附上 30 天手把手 Terraform 教學文章，只要願意花時間，全篇中文一個月帶你上手 Terraform。
&lt;ul&gt;
&lt;li&gt;IThome 鐵人賽好讀版：https://ithelp.ithome.com.tw/users/20120327/ironman/4057&lt;/li&gt;
&lt;li&gt;Github Repository 完整版：https://github.com/&amp;hellip;/terraform-30&amp;hellip;/tree/main/lecture/zh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果遇到問題還是需要找人發問，所以再推薦兩個社群，可以來這邊發問，要找我本人也找得到。甚至只是加入潛水不講話，都可以被動吸收許多新知。
&lt;ul&gt;
&lt;li&gt;Cloud Native Taiwan User Group
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t.me/cntug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://t.me/cntug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fb.cloudnative.tw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fb.cloudnative.tw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DevOps Taiwan Meetup Group
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://t.me/devopstw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://t.me/devopstw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大家可以手機拍完這個就出去吃午餐了。
或是拍回家，然後傳給一個同事叫他花 30 天把 Terraform 跟 Vault 這些都學會。&lt;/p&gt;
&lt;p&gt;總之希望對各位有幫助，讓國內技術力能持續進步成長。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;回到本次演講。&lt;/p&gt;
&lt;p&gt;本次演講有三個關鍵字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Vault&lt;/li&gt;
&lt;li&gt;Terraform 這個是隱藏的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;請問平時工作會用到這三個技術之一的朋友，請舉個手，好讓我知道一下觀眾的分布，等等分享的內容會照比例做一些調整。&lt;/p&gt;
&lt;p&gt;我們今天不會講太多 Kubernetes 的內容，重點放在 Vault，以及如何設定 Vault，所以 Terraform Infrastructure as Code 或是 configuration as Code 會在這邊跑出來。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;關於我，我是哲嘉。我在 Maicoin 當 SRE。常出現的社群是 CNTUG 與 DevOpsTW。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我們今天談的更大的主題其實是 Key Management 私鑰管理，或是密碼管理。這是一個很大的題目，今天演講內容只是其中的一個實作案例。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;舉個例子，一邊是 API Server，另一邊 Database，或是第三方服務&lt;/p&gt;
&lt;p&gt;Database 來 Authenticate 合法的 Client 用戶端，可能是 username + password，或是 API Key + Secret，或是 Access Token，或是 Private Key，Client Certificate，都可以。&lt;/p&gt;
&lt;p&gt;在跨不同平台或是介面的服務，我們常用的 Auth 方法。認 Key 不認人。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那中間這些 Key 要怎麼管理，就有很多學問
其中最基本的，是怎麼配置給 API Server 讓他使用
注意：讓 API Server 使用，隱含的意思是，其他人不管是其他微服務，或是開發工程師，閒雜人等都不能看到。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這邊我們假設 API Server 是在 Kubernetes 裡面跑，微服務架構，所以 API Server 可能是一個 Pod，我們 SRE 要為這組 Pod 配置密碼。&lt;/p&gt;
&lt;p&gt;這邊列出的應該是 K8s 比較常見的幾種做法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plain text，直接寫進 file 讓 Pod 去讀取&lt;/li&gt;
&lt;li&gt;k8s secret 做 base64 encode&lt;/li&gt;
&lt;li&gt;安全一點的透過外部機制作加密解密&lt;/li&gt;
&lt;li&gt;或是寫在 API Server 的 memory 中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事實上如果沒有使用 K8s，使用 VM 或是公有雲 Container Service，應該都是類似的原理，大家都是 Linux base，secret 放進來看要放在 disk 或是 memory 裏面。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;實際放到 K8s 大概會長長這些 yaml&lt;/p&gt;
&lt;p&gt;最簡單，就直接把 secret 壓到 Pod env 裏面，&lt;/p&gt;
&lt;p&gt;最簡單也最危險&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有看得到 yaml 的人都明碼看見密碼&lt;/li&gt;
&lt;li&gt;所有能進到 file system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提外話&lt;/p&gt;
&lt;p&gt;API Server 被從正面打穿，滲透到拿到這組密碼的機會多高？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 API Server golang library 有在跟安全性更新&lt;/li&gt;
&lt;li&gt;Kubernetes 用公有雲的 Kubernetes Service，有在更新&lt;/li&gt;
&lt;li&gt;OS ami 跟 docker image 都有在更新&lt;/li&gt;
&lt;li&gt;然後有功能正常的防火牆&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打掛蠻有可能的，但打穿服務到拿到密碼，是有難度的。&lt;/p&gt;
&lt;p&gt;更多時候，至少在幣圈有被爆出來的資安事件，大多是是公司員工被釣魚信掉到，被植入惡意軟體在 local 電腦，然後他又看得到明碼的密碼，直接爆炸。&lt;/p&gt;
&lt;p&gt;明碼糟糕的地方，大家都看得到，一開始就是 exposed 的狀態，風險不可控，也無從管制。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;然後是 K8s secret，也是從 env 掛進去 Pod&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;放在 k8s secret，是 base64 的格式&lt;/p&gt;
&lt;p&gt;看起來跟原先內容不一樣了，有人就跟我說，他們家的 k8s secret 有用 base64 加密。&lt;/p&gt;
&lt;p&gt;encode 跟 encrypt&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;k8s secret 有什麼問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明碼 plain text 的問題，不該看到的人很容易就看到&lt;/li&gt;
&lt;li&gt;根本的問題還是 RBAC 懶得設定，大家都用 default role 進來&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要用可以，先看 k8s secret 後面的儲存實作是什麼？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是 k8s etcd&lt;/li&gt;
&lt;li&gt;透過 k8s API server 存取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;etcd 跟 kube-api 一般來說是夠安全的。官方文件還建議&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;secret 要加密 encrypt&lt;/li&gt;
&lt;li&gt;增強 RBAC 控制，只有特定 role 才看得到 secret，，而不是每個人都用 default role 近來 k8s，然後進到 namespace 全部 secret 就看光光&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RBAC 有設定好，有加密，是可以做到安全。當然還是沒有專門 key Management 工具，如 Vault 有額外管理上的優化功能。&lt;/p&gt;
&lt;p&gt;加密範例可以看強者我朋友的文章&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;加密完可能長這樣，還要額外透過其他機制才能進行解密，拿到原始資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如透過 k8s controller 解密&lt;/li&gt;
&lt;li&gt;或是透過 vault server&lt;/li&gt;
&lt;li&gt;或是透過公有雲的 Key Management Service 做解密&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;其他的 k8s secret 加密解決方案&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天我們使用 Vault，其中一個目的就是要坐中間這段 Safe Magic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;給這個 Pod secret&lt;/li&gt;
&lt;li&gt;然後只給這個 Pod Secret&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;當然 Key Management 其他還有一堆事情要處理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;密碼洩漏的話有沒有 revoke 機制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能不能定時 Rotate 汰換密碼？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;改架構，底下的設定好不好耕著動態調整，還是要跟著 rename / mv k8s secret&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎麼做稽核，怎麼檢查內容。我看不到 vault 幫我看一下內容對不對，這個很容易發生。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;臆想頭就很痛&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天的目的很單純&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密碼的露出盡量小&lt;/li&gt;
&lt;li&gt;最好密碼是有期限的，逾期自動失效&lt;/li&gt;
&lt;li&gt;暴露了可以 revoke&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Vault&lt;/p&gt;
&lt;p&gt;有人用過？這邊簡介一下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 CNCF 的 landscape 漱渝 Key Management，應該是裡面市佔最高的開源項目&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;重點就是保護與管理 secret&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Vault 的核心概念，這個影片是 Hashicorp 官方介紹的影片，講得很好，大家自己回去看一下&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這邊簡單 vault 101&lt;/p&gt;
&lt;p&gt;現在有一台 vault server 已經設定好了，我們可以使用 vault client 連線&lt;/p&gt;
&lt;p&gt;例如這邊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 VAULT TOKEN 告訴 vault 你是什麼身份的用戶&lt;/li&gt;
&lt;li&gt;或是進行 login，Vault 會呸發一組臨時的 TOKEN 給你&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拿著組 TOKEN 去問 Vault，請問我可以要 /user/mysql 這個路徑下的資料嗎？&lt;/p&gt;
&lt;p&gt;Vault 檢查 TOKEN 的 role 與 permission，可以就回傳值
不行就 permission denied&lt;/p&gt;
&lt;p&gt;Vault 就是金庫，真正重要的 key 存在裡面，使用這要來問 Vault，要先過 Vault 這關&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Vault 實際存放 Secret Engine，這邊也跳過，大家先把他當 key / value 存放好了 XD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;等等，這樣 vault Auth 有點怪&lt;/p&gt;
&lt;p&gt;本來拿 username / password 去控制 Mysql
先在多一步，先拿到 VAULT TOKEN，再拿 TOKEN 去跟 Vault 拿 Mysql password，再去連 MySQL&lt;/p&gt;
&lt;p&gt;咦這樣不是很怪？我如果 Vault token 暴露了，有心人士還是可以從 vault 拿到資料啊&lt;/p&gt;
&lt;p&gt;這樣有比較安全嗎？還是只是花式被駭&lt;/p&gt;
&lt;p&gt;對，只是做 token 交換的話，還是不夠，所以 Vault 有提供許多 Auth method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;token 只是其中一種&lt;/li&gt;
&lt;li&gt;有很多認證方法不用 token 交換，但也能讓 vault 認得 k8s pod 與 api server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這是今天的重點之一，token / 密碼傳遞不安全，那就用其他手段 auth&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以 AWS IAM auth 為例&lt;/p&gt;
&lt;p&gt;如果今天是在 aws ec2 上跑，那可以透過 aws internal api 去取得身份認證資料，也就是 ec2 instance metadata&lt;/p&gt;
&lt;p&gt;拿這個 metadata 去問 vault，vault 再透過 aws api 去確認，這個 ec2 instance 真的是合法的&lt;/p&gt;
&lt;p&gt;然後依據 ec2 instance 身份，配發權限跟資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;api server ec2 就給 api server secret&lt;/li&gt;
&lt;li&gt;frontend server ec2 就給 frontend secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中間沒有多餘的密碼 / token 交換&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;來往的對話大概是這樣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS API 是可信的&lt;/li&gt;
&lt;li&gt;Vault 自己維護是可信的&lt;/li&gt;
&lt;li&gt;服務透過三方交握去認證，認 runtime 環境的 metadata，不再是認 key 不認人&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;至於 api server ec2 近來 vault 後，應該有什麼樣的權限，在 vault 內部透過 policy 配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定 path&lt;/li&gt;
&lt;li&gt;設定允許的 operation 例如 read write list delete &amp;hellip; 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;runtime 動態調整&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;當然 Vault 還有提供很多更加安全的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如如何安全地存放 secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storage 這邊跳過&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Secret + auth 搭配跳過&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以及 dynamic secret，來解認 key 不認人的問題&lt;/p&gt;
&lt;p&gt;例如 mysql 的靜態 username / password，透過 vault 設定可以變成動態的&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;回到 k8s，使用 token auth，然後把 VAULT TOKEN 放在 k8s secret 裏面，只有比較安全一點點&lt;/p&gt;
&lt;p&gt;就是 VAULT TOKEN 可以快速 rotate 跟 revoke&lt;/p&gt;
&lt;p&gt;這邊可以搭配其他 auth 方式來解決&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;剛剛不是讓 vault 去認 aws ec2？&lt;/p&gt;
&lt;p&gt;在 k8s 中，可以讓 vault 去認 k8s cluster / service account&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;路徑圖長這樣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pod runtime 都會有 service account&lt;/li&gt;
&lt;li&gt;使用 service account 的 metadata 去問 vault&lt;/li&gt;
&lt;li&gt;vault 去問 k8s，這個 service account 是真的假的&lt;/li&gt;
&lt;li&gt;k8s 回答 vault，Pod 跟service account 是合法的&lt;/li&gt;
&lt;li&gt;vault 再配權限給 Pod&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;auth detail 的文字描述，跟上面講的一樣&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;配合 k8s sidecar，可以把 vault 拿到的 key 寫到 memory mount 裏面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod init 時 init container 才去 invoke vault API&lt;/li&gt;
&lt;li&gt;key 不會透過 k8s api 傳遞，也不會在 etcd 內出現&lt;/li&gt;
&lt;li&gt;main container 透過 memory mount 存取 key&lt;/li&gt;
&lt;li&gt;key 的 lifecycle 跟 pod 一樣， pod delete 掉這組 in-memory key 也自動清除&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;好處&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更少 expose，沒有過 kube-api 與 etcd&lt;/li&gt;
&lt;li&gt;in-memory&lt;/li&gt;
&lt;li&gt;vault 跟 pod 之間的 vault token 的 time-to-live 期限可以很短，幾十秒內，init 完即可拋棄的 token&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;壞處（？）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每個 pod 起來會去打 vault api
&lt;ul&gt;
&lt;li&gt;實務經驗上 loading 很低&lt;/li&gt;
&lt;li&gt;而且 vault server 可以做 HA 跟 horizontal scaling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最大的成本，其實是 vault 設定
&lt;ul&gt;
&lt;li&gt;讓 vault 認 k8s&lt;/li&gt;
&lt;li&gt;根據 service account 去配權限&lt;/li&gt;
&lt;li&gt;其他花俏功能都需要額外的設定&lt;/li&gt;
&lt;li&gt;系統複雜，保證配到你頭昏眼花&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;想像一下，這張圖里的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;policy 跟為服務數量呈正比&lt;/li&gt;
&lt;li&gt;secret path 也耕服務數量呈正比&lt;/li&gt;
&lt;li&gt;auth k8s 數量也跟服務數量呈正相關&lt;/li&gt;
&lt;li&gt;用越久，內容隨時間增加&lt;/li&gt;
&lt;li&gt;改架構時更刺激&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;建議使用 vault 務必 搭配 Terraform 管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;infrastructure as code&lt;/li&gt;
&lt;li&gt;configuration as code&lt;/li&gt;
&lt;li&gt;policy as code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Terraform 非常適合管理複雜，但有常常需要細部調整的設定資料&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其他功能，跳過&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其他功能&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;secret debug 超麻煩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;內容正確性，valid key 還是 invalid key，還是根本是另一隻 key&lt;/li&gt;
&lt;li&gt;權限正確性，是不是這個 username / password 的權限是正確的&lt;/li&gt;
&lt;li&gt;跨團隊溝通更頭痛，不是可以貼在 slack 大家一起幫看的東西&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;terraform 可以幫助 vault 設定 debug&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;至少跨環境復現問題很方邊&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Vault 有 HA&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Vault Performance 通常不是問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雖然 loading 隨 micro service 線性增加&lt;/li&gt;
&lt;li&gt;但本身可以是無狀態 server，可以 horizontal scale&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;注意一下 auto-retry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pod fail restart 又再 init 一次，如果一萬個 pod 一直 retry 可能真的會把 vault 打爆&lt;/li&gt;
&lt;li&gt;backup limit 要注意&lt;/li&gt;
&lt;li&gt;使用 init container 的話，是 cache 在 Pod 層級，container fail restart 不會重新打 vault api&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;安全性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vault 有專業資安團隊把關&lt;/li&gt;
&lt;li&gt;不要怕 vault 被打穿，而是要怕同事被釣魚&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;結論&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;要不要 vault&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;qrcode 最後機會&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;有問題可以來社群找我&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Maicoin 是間好公司 2014 服務上線到現在，在台灣已經邁入第八年。顧客數一直增加，我們也持續緩慢擴編。&lt;/p&gt;
&lt;p&gt;覺得自己有能力，歡迎來挑戰，等等私下找我聊&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;謝謝&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Q &amp;amp; A&lt;/p&gt;
&lt;p&gt;Terraform vs Pulumi&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作語言差異，有好有壞&lt;/li&gt;
&lt;li&gt;vault 跟 terraform 的 hcl 是增強版 json，本質還是 json，有興趣可以去看我的文章&lt;/li&gt;
&lt;li&gt;terraform 目前是站跟星星還是領先，未來繼續看&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes Service account token 要不要更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要，應該定期更新，官方文件有操作步驟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vault / Terraform 實務上的工作負擔會很花時間跟人力嗎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;學習曲線比較奇怪，要花一點時間做中學&lt;/li&gt;
&lt;li&gt;學熟了之後就很好改，效率很高&lt;/li&gt;
&lt;li&gt;至少是屌打用 gui 改或是 client 直接下 cmd 拉&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
