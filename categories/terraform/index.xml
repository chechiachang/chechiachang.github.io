<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terraform on Che-Chia Chang</title>
    <link>https://chechia.net/categories/terraform/</link>
    <description>Recent content in terraform on Che-Chia Chang</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016–2020, Che-Chia Chang; all rights reserved.</copyright>
    <lastBuildDate>Tue, 20 Sep 2022 10:39:37 +0800</lastBuildDate><atom:link href="https://chechia.net/categories/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>14th Ithome Ironman Iac Aws Workshop 06 Provision Iam Group Policy</title>
      <link>https://chechia.net/post/2022-09-20-14th-ithome-ironman-iac-aws-workshop-06-provision-iam-group-policy/</link>
      <pubDate>Tue, 20 Sep 2022 10:39:37 +0800</pubDate>
      
      <guid>https://chechia.net/post/2022-09-20-14th-ithome-ironman-iac-aws-workshop-06-provision-iam-group-policy/</guid>
      <description>
        
          
            昨天我們將 root account IAM user import 到 terraform 中
示範 terraform import 增加 iam user 的功能到 module repository 中 今天要完成 root account 中 IAM Group + Policy，順便聊聊 aws IAM policy 管理原則
root 中設定 IAM User 將手動產生的 Administrator 的 IAM User import terraform 中 補上 root account IAM Policy 補上 root account IAM Group iThome 鐵人賽好讀版
賽後文章會整理放到個人的部落格上 http://chechia.net/
追蹤粉專可以收到文章的主動推播
承接昨天的 plan 結果，我們今天要把 IAM policy 與 group 開出來
Iam User 首先 review aws_iam_user 的 resource
          
          
        
      </description>
    </item>
    
    <item>
      <title>14th Ithome Ironman Iac Aws Workshop 05 Provision Iam User</title>
      <link>https://chechia.net/post/2022-09-19-14th-ithome-ironman-iac-aws-workshop-05-provision-iam-user/</link>
      <pubDate>Mon, 19 Sep 2022 11:59:27 +0800</pubDate>
      
      <guid>https://chechia.net/post/2022-09-19-14th-ithome-ironman-iac-aws-workshop-05-provision-iam-user/</guid>
      <description>
        
          
            昨天我們為每個環境(dev / stag / prod &amp;hellip;) 設定一個 aws organization account
今天要使用 terraform 設定 AWS IAM User
root 中設定 IAM User 將手動產生的 Administrator 的 IAM User 加到 terraform 中 security 中設定 IAM User security 設定 password policy security 設定 MFA policy iThome 鐵人賽好讀版
賽後文章會整理放到個人的部落格上 http://chechia.net/
追蹤粉專可以收到文章的主動推播
Accounts &amp;amp; IAM Users 今天要使用 Terraform 設定 IAM Users。
未來所有的 User 都會透過 terraform 設定並管理 Day02 設定的 root account IAM User: Administrator 雖然是手動建立的，我們一樣需要把他匯入到 terraform 中 然而上個 PR 中，我們的 terraform module 中並沒有設定 IAM User 的功能，也就是這段 code 是沒有發揮功能 https://github.
          
          
        
      </description>
    </item>
    
    <item>
      <title>14th Ithome Ironman Iac Aws Workshop 04 AWS Multi-Accounts Structure</title>
      <link>https://chechia.net/post/2022-09-18-14th-ithome-ironman-iac-aws-workshop-04-aws-multi-account-structure/</link>
      <pubDate>Sun, 18 Sep 2022 09:35:25 +0800</pubDate>
      
      <guid>https://chechia.net/post/2022-09-18-14th-ithome-ironman-iac-aws-workshop-04-aws-multi-account-structure/</guid>
      <description>
        
          
            昨天設定了多個 aws organization accounts，但我們還沒有說明為什麼要這樣做
今天會先講 Gruntwork 提出的 Production-Grade Design: multi-account security strategy
拆分多個 account 的用意 多 account 下如何統一管理 IAM User access control 與安全性控管 iThome 鐵人賽好讀版
賽後文章會整理放到個人的部落格上 http://chechia.net/
追蹤粉專可以收到文章的主動推播
Production-grade Design IAM Gruntwork 提出的 Production-Grade Design: multi-account security strategy，我們這邊一一講解
Root Account 的用途 位於 diagram 圖中的最上層 是整個架構的創世帳號，權限最大 root account 裡面沒有任何 infrastructure 元件， i.e. aws ec2 不會長在裡面，是一個空 account root account 的存取最嚴格 只有很少數的 admin 可以存取 i.e 只有 SRE 部門主管有自己的 IAM User，其他 SRE 沒有權限存取 root account root account 的工作最少 設定 child account 管理 billing IAM policy 管理，不要把 policy 直接綁在 User 上，應該要
          
          
        
      </description>
    </item>
    
    <item>
      <title>14th Ithome Ironman Iac Aws Workshop-03 Provision Child AWS Accounts</title>
      <link>https://chechia.net/post/2022-09-16-14th-ithome-ironman-iac-aws-workshop-03-provision-aws-account/</link>
      <pubDate>Fri, 16 Sep 2022 17:16:21 +0800</pubDate>
      
      <guid>https://chechia.net/post/2022-09-16-14th-ithome-ironman-iac-aws-workshop-03-provision-aws-account/</guid>
      <description>
        
          
            今天要使用 terraform 設定 AWS account structure
iThome 鐵人賽好讀版
賽後文章會整理放到個人的部落格上 http://chechia.net/
追蹤粉專可以收到文章的主動推播
&amp;ndash;
Provision AWS Account
今天要把 aws account 設定完成，並且開始使用 live-repository 來搭建 aws 元件
我們自己的 module repository 開一個權限的 repository fork 我自幹的 modules repository terragrunt-infrastructure-modules https://github.com/chechiachang/terragrunt-infrastructure-modules 上面這個是放 terraform module 的 repository，是兩個 repository 不要跟執行 terragrunt repository 搞混，是兩個 repository https://github.com/chechiachang/terragrunt-infrastructure-live-example 今天的進度與 code base
terraform-live-example PR 在此 terragrunt-infrastructure-modules 請直接看 tag v0.0.1 因為有地方嚴重寫錯，我有 force push 東西 :tear:，如果已經提早下載的朋友可能會需要清掉 repository main branch + tag 重拉 orz 對，我們且戰且走常常會這樣，發現昨天寫的東西寫錯臨時改，請大家見諒
為何使用 aws modules X) 因為我們沒有付錢，不能用 gruntwork 的 priviate repository (大誤
          
          
        
      </description>
    </item>
    
    <item>
      <title>14th Ithome Ironman Iac Aws Workshop-02 AWS Account Struture</title>
      <link>https://chechia.net/post/2022-09-15-14th-ithome-ironman-iac-aws-workshop-02-aws-account-structure/</link>
      <pubDate>Thu, 15 Sep 2022 17:16:21 +0800</pubDate>
      
      <guid>https://chechia.net/post/2022-09-15-14th-ithome-ironman-iac-aws-workshop-02-aws-account-structure/</guid>
      <description>
        
          
            今天要使用 terraform 設定 AWS account structure
iThome 鐵人賽好讀版
賽後文章會整理放到個人的部落格上 http://chechia.net/
追蹤粉專可以收到文章的主動推播
&amp;ndash;
AWS Account structure AWS account structure 是 AWS IAM 提供的 feature 之一，可以讓用戶從一個 account login，然後透過授權操作其他 account 的元件。
然而有這個 feature 不代表用戶就要買單，有實際需求我們才來用 feature。使用 account structure 的理由是什麼？
Account structure 的需求 AWS 官方 whitepaper: 使用 multiple aws account 的好處
依據職務需求將 workload 分組 為不同 environment 設定獨立的 security control 限制敏感資料的存取 提升創新與開發的敏捷 控制事故的影響程度與衝擊 impact 精細的拆分 IT 的工作 成本控管 分散 aws quotas 使用限額與 API rate limit AWS 官方的 organization best practice AWS 官方 OU 管理的 best practice
          
          
        
      </description>
    </item>
    
    <item>
      <title>14th iThome ironman-01 IaC best practice workshop on aws</title>
      <link>https://chechia.net/post/2022-09-12-14th-ithome-ironman-iac-aws-workshop-01-introduction/</link>
      <pubDate>Mon, 12 Sep 2022 14:31:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2022-09-12-14th-ithome-ironman-iac-aws-workshop-01-introduction/</guid>
      <description>
        
          
            iThome 鐵人賽好讀版
賽後文章會整理放到個人的部落格上 http://chechia.net/
追蹤粉專可以收到文章的主動推播
&amp;ndash;
AWS 為例，實現 production framework 的最佳實踐的 30 天 workshop
準備 Production environmtn Devops 面臨的問題 DevOps 的工作內容繁雜
今天想要 Deploy 一個 backend API deployment 到 k8s 上 一轉眼發現自己在修 port / servie / ingress / alb 一轉眼發現自己在修 tls certificate 一轉眼發現自己在修 node linux 上的一個 bug 一轉眼發現自己在修 monitoring / metrics + alert / log collection &amp;hellip; 我只是想 deploy 一個 backend deployment 修infra 花了好幾天，而寫 deployment 只要 2 hr Devops 的工作，是處理 developer 與 operator 中間的繁雜的細節 換個角度思考：上面這些元件全都是存在許久的功能，應該有一套統一介面隨叫即用這些服務，ex.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code: Atlantis</title>
      <link>https://chechia.net/post/2020-10-07-terraform-infrastructure-as-code-atlantis/</link>
      <pubDate>Wed, 07 Oct 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-10-07-terraform-infrastructure-as-code-atlantis/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
需求與問題 隨著 terraform 在團隊內的規模持續成長，團隊需要讓工作流程更加順暢，來面對大量的 tf 變更查核與變更請求。想像幾十個工程師同時在修改幾十個不同的 terraform projects / modules，這時可能會有幾個問題
需要一個穩定乾淨的環境執行 terraform 工程師的開發本機不是個好選擇 需要 24/7 的 terraform 執行中心 執行中心會有各個環境 (dev / stage / prod) 的存取權限，希望設置在內部 下列兩個工作會切換工作平台，例如 Github review，檢視 difference，與討論 PR review 完有時會忘記 merge，merge 完有時會忘記 apply repository 越多，忘得越多&amp;hellip; 團隊已經導入 Git-flow，希望把工作流程做得更完整自動化更加便利
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code: Terragrunt</title>
      <link>https://chechia.net/post/2020-10-06-terraform-infrastructure-as-code-terragrunt/</link>
      <pubDate>Tue, 06 Oct 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-10-06-terraform-infrastructure-as-code-terragrunt/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
上面講解 Terraform 的基本操作流程，提供範本原始碼，以及一步一步導入的詳細步驟。各位應該都可以依照上面幾篇的說明，開始快樂的使用 Terraform 了。
而當使用 Terraform 的規模越來越大，管理的資料越來越多時，開始會出現一些問題，例如重複的 terraform code 越來越多，協同工作 review 不太容易，state 的內容管理與鎖管理，等等。這些問題可以透過一些工作流程的改進，或是導入新的小工具，來改善工作效率。
接下來筆者推薦幾個心得與工具，希望能提升使用 Terraform 的效率與產值
以下幾篇文章，適合已經使用過 terraform 一點時間，有經驗的團隊，並打算更大規模導入 terraform，正在尋求改善的方向。
心得 CI/CD 全自動化 State backend 選擇 最佳實踐 https://www.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code: Recommended Practices</title>
      <link>https://chechia.net/post/2020-10-05-terraform-infrastructure-as-code-recommended-practices/</link>
      <pubDate>Mon, 05 Oct 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-10-05-terraform-infrastructure-as-code-recommended-practices/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
上面講解 Terraform 的基本操作流程，提供範本原始碼，以及一步一步導入的詳細步驟。各位應該都可以依照上面幾篇的說明，開始快樂的使用 Terraform 了。
以下幾篇文章，適合已經使用過 terraform 一點時間，有經驗的團隊，並打算更大規模導入 terraform，正在尋求改善的方向。
心得 CI/CD 全自動化 State backend 選擇 最佳實踐 工具 Terraform Atlantis Terragrunt 工具與文化 新工具提供解決方案，然而單純導入工具後不是就一勞永逸，許多實務上的問題，還是要依賴改善工作流程，並且避免整體運作的錯誤。
其次，不同團隊已有既有的團隊文化，整合新的工具後還是需要磨合，不一定要照單全收。換句話說，工作流程的不斷改進也是解決方案的一環。
建議實踐 Recommended Practices Terraform 官網有許多建議的實作與導入流程，其中大部分的建議我們都已經在前面的幾篇文章中提到，這邊要來說明一下，並補充其他官方推薦的實踐。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code: Backends</title>
      <link>https://chechia.net/post/2020-10-04-terraform-infrastructure-as-code-backend/</link>
      <pubDate>Sun, 04 Oct 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-10-04-terraform-infrastructure-as-code-backend/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
上面講解 Terraform 的基本操作流程，提供範本原始碼，以及一步一步導入的詳細步驟。各位應該都可以依照上面幾篇的說明，開始快樂的使用 Terraform 了。
而當使用 Terraform 的規模越來越大，管理的資料越來越多時，開始會出現一些問題，例如重複的 terraform code 越來越多，協同工作 review 不太容易，state 的內容管理與鎖管理，等等。這些問題可以透過一些工作流程的改進，或是導入新的小工具，來改善工作效率。
接下來筆者推薦幾個心得與工具，希望能提升使用 Terraform 的效率與產值
以下幾篇文章，適合已經使用過 terraform 一點時間，有經驗的團隊，並打算更大規模導入 terraform，正在尋求改善的方向。
心得 CI/CD 全自動化 State backend 選擇 最佳實踐 https://www.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code: CI/CD automation</title>
      <link>https://chechia.net/post/2020-10-03-terraform-infrastructure-as-code-automation/</link>
      <pubDate>Sat, 03 Oct 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-10-03-terraform-infrastructure-as-code-automation/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
上面講解 Terraform 的基本操作流程，提供範本原始碼，以及一步一步導入的詳細步驟。各位應該都可以依照上面幾篇的說明，開始快樂的使用 Terraform 了。
而當使用 Terraform 的規模越來越大，管理的資料越來越多時，開始會出現一些問題，例如重複的 terraform code 越來越多，協同工作 review 不太容易，state 的內容管理與鎖管理，等等。這些問題可以透過一些工作流程的改進，或是導入新的小工具，來改善工作效率。
接下來筆者推薦幾個心得與工具，希望能提升使用 Terraform 的效率與產值
以下幾篇文章，適合已經使用過 terraform 一點時間，有經驗的團隊，並打算更大規模導入 terraform，正在尋求改善的方向。
心得 CI/CD 全自動化 State backend 選擇 最佳實踐 https://www.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code: Example repository</title>
      <link>https://chechia.net/post/2020-10-02-terraform-infrastructure-as-code-repository-example/</link>
      <pubDate>Fri, 02 Oct 2020 11:15:48 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-10-02-terraform-infrastructure-as-code-repository-example/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
上面講了很多 terraform 的操作範例，應該看到這裡，對於 terraform 基本上是什麼東西，應該有些概念了。然而這樣還不能算是學會 terraform，這種工具的東西一定要有實際操作過的經驗才算是學會。
可以直接參考 Terraform 官方的 Get-started 文件來操作學習，我這邊也提供一個 Git repository 讓大家上手，當作初次操作的框架。
提供做為範例的原始碼 這個 Github Repository 是我給社群演講所使用的範例，第一次使用的可以參考
https://github.com/chechiachang/terraform-playground
1tree 2├── README.md 3├── SOP.md 4├── aws/ 5├── azure/ 6└── gcp/ TL;DR 選擇使用的雲平台，這邊提供三家範例，例如我這邊使用 gcp，當然你就要準備 GCP 的帳號，並且下載有執行權限的用戶 credential json key 等等。
          
          
        
      </description>
    </item>
    
    <item>
      <title>Terraform Infrastructure as Code Transcript</title>
      <link>https://chechia.net/post/2020-06-15-terraform-infrastructure-as-code-transcript/</link>
      <pubDate>Mon, 15 Jun 2020 10:58:56 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-06-15-terraform-infrastructure-as-code-transcript/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
各位好
About this presentation 開始之前，先分享一些資源
投影片 講稿 程式碼 SOP 範本 Facebook 粉專 都放在這裡，因為有附逐字稿，所以如果很忙的朋友，掃了 QR code 就可以回家自己看了，不用客氣。
然後有興趣在追這系列文章的，可以幫我 facebook 粉專按個讚跟追蹤，每周新文章出來，會推播通知。
文章在 chechia.net 上，新文章通知靠 facebook 粉專這樣。也可以只追蹤不按讚。我自己看別人技術 blog 也很常這樣(XD
          
          
        
      </description>
    </item>
    
    <item>
      <title>從零開始的 Infrastructure as Code: Terraform - 01</title>
      <link>https://chechia.net/post/2020-06-14-terraform-infrastructure-as-code/</link>
      <pubDate>Sun, 14 Jun 2020 16:46:09 +0800</pubDate>
      
      <guid>https://chechia.net/post/2020-06-14-terraform-infrastructure-as-code/</guid>
      <description>
        
          
            This article is part of 從零開始的 Infrastructu as Code: Terraform
Get-started examples / SOP on Github Introducation to Terraform Iac: Speaker transcript Presentation Check my website chechia.net for other blog. Follow my page to get notification. Like my page if you really like it :)
Outlline our story: issues, steps, &amp;amp; results basics IaC, terraform benefits risks and 坑 to be or not to be experience oriented
Our stories 100+ devs, many teams 25+ projects 50+ GKEs 80+ SQLs IAMs, redis, VPCs, load-balancers, &amp;hellip; Issues Ops manually create resources through GUI by SOP.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
